{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WFRMLS Python API Wrapper","text":"<p>A comprehensive Python wrapper for the Wasatch Front Regional MLS (WFRMLS) API, providing easy access to MLS data including properties, agents, offices, media, and more.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Complete API Coverage: Access to all WFRMLS endpoints including properties, agents, offices, analytics, and more</li> <li>Type Safety: Comprehensive type hints throughout the codebase</li> <li>Easy Authentication: Simple API key-based authentication with environment variable support</li> <li>Robust Error Handling: Custom exceptions with meaningful error messages</li> <li>Full Test Coverage: 100% test coverage with comprehensive unit and integration tests</li> <li>Modern Python: Supports Python 3.8+ with modern async/await patterns where applicable</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from wfrmls import WFRMLSClient\n\n# Initialize client (uses WFRMLS_BEARER_TOKEN environment variable)\nclient = WFRMLSClient()\n\n# Or provide API key directly\nclient = WFRMLSClient(api_key=\"your_api_key_here\")\n\n# Search properties\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    property_type=\"Residential\",\n    max_list_price=500000\n)\n\n# Get property details\nproperty_details = client.properties.get_property(\"12345\")\n\n# Search agents\nagents = client.member.search_members(\n    first_name=\"John\",\n    last_name=\"Smith\"\n)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install wfrmls\n</code></pre> <p>For development installation:</p> <pre><code>git clone https://github.com/theperrygroup/wfrmls.git\ncd wfrmls\npip install -e \".[dev]\"\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Installation Guide - Setup and configuration</li> <li>Quick Start Guide - Get up and running in 5 minutes</li> <li>API Reference - Complete endpoint documentation</li> <li>Examples - Comprehensive usage examples</li> <li>Troubleshooting - Common issues and solutions</li> <li>Contributing - Development guidelines</li> <li>Changelog - Version history and changes</li> <li>Deployment - Production deployment guidance</li> </ul>"},{"location":"#available-endpoints","title":"Available Endpoints","text":"<p>The WFRMLS Python wrapper provides access to the following endpoint categories:</p>"},{"location":"#core-data-access","title":"Core Data Access","text":"<ul> <li>Properties: Search, retrieve, and analyze property listings</li> <li>Members: Access agent and member information</li> <li>Office: Office and brokerage data</li> <li>Media: Property photos, documents, and media files</li> </ul>"},{"location":"#specialized-features","title":"Specialized Features","text":"<ul> <li>Analytics: Market analytics and reporting data</li> <li>Lookup: Reference data and lookup tables  </li> <li>History: Property and listing history</li> <li>Open House: Open house event information</li> <li>ADU: Accessory Dwelling Unit data</li> <li>Green Verification: Green building certifications</li> </ul>"},{"location":"#system-information","title":"System Information","text":"<ul> <li>Resource: API metadata and available resources</li> <li>Data System: System information and capabilities</li> <li>Property Unit Types: Property classification data</li> </ul>"},{"location":"#authentication","title":"Authentication","text":"<p>The WFRMLS API uses Bearer token authentication. Set your API key as an environment variable:</p> <pre><code>export WFRMLS_BEARER_TOKEN=\"your_api_key_here\"\n</code></pre> <p>Or pass it directly when initializing the client:</p> <pre><code>client = WFRMLSClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: https://wfrmls.readthedocs.io</li> <li>Issues: GitHub Issues</li> <li>API Documentation: Available in the <code>api_docs/</code> directory</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. </p>"},{"location":"STYLE_GUIDE/","title":"Documentation Style Guide","text":"<p>This comprehensive style guide establishes standards for creating consistent, high-quality documentation across all project materials. These guidelines ensure clarity, accessibility, and maintainability of documentation.</p>"},{"location":"STYLE_GUIDE/#writing-standards","title":"\ud83d\udcdd Writing Standards","text":""},{"location":"STYLE_GUIDE/#tone-and-voice","title":"Tone and Voice","text":"<p>Primary Tone: Professional, helpful, and approachable - Use active voice whenever possible - Write directly to the reader using \"you\" - Be concise but comprehensive - Maintain consistency throughout all documentation</p> <p>Prohibited Tones: - \u274c Overly casual or colloquial language - \u274c Condescending or patronizing language - \u274c Overly technical jargon without explanation - \u274c Vague or ambiguous statements</p>"},{"location":"STYLE_GUIDE/#language-guidelines","title":"Language Guidelines","text":""},{"location":"STYLE_GUIDE/#grammar-and-punctuation","title":"Grammar and Punctuation","text":"<p>Sentence Structure: - Use clear, concise sentences (maximum 25 words) - Avoid compound sentences with more than two clauses - Start sentences with the most important information - Use parallel structure in lists and series</p> <p>Punctuation Rules: - Use Oxford/serial commas: \"A, B, and C\" - End bullet points with periods only if they are complete sentences - Use em dashes (\u2014) for breaks in thought, not hyphens (-) - Use straight quotes (\"\") not curly quotes (\"\")</p> <p>Capitalization: - Use sentence case for headings and titles - Capitalize proper nouns and official product names - Use title case only for navigation menu items - API endpoint names should maintain their original casing</p>"},{"location":"STYLE_GUIDE/#word-choice","title":"Word Choice","text":"<p>Preferred Terms: - \"click\" not \"click on\" - \"sign in\" not \"login\" (as a verb) - \"set up\" (verb) vs \"setup\" (noun) - \"email\" not \"e-mail\" - \"website\" not \"web site\"</p> <p>Avoid These Words: - \"Simply\" or \"just\" (implies ease that may not exist) - \"Obviously\" or \"clearly\" (may not be obvious to all readers) - \"Easy\" or \"quick\" (subjective assessments) - Gender-specific pronouns when referring to users</p>"},{"location":"STYLE_GUIDE/#content-structure","title":"Content Structure","text":""},{"location":"STYLE_GUIDE/#information-hierarchy","title":"Information Hierarchy","text":"<p>Required Elements (in order): 1. Title: Clear, descriptive H1 heading 2. Overview: 1-2 sentence summary of the page content 3. Prerequisites (if applicable): What users need before starting 4. Main Content: Structured with clear headings 5. Next Steps: Links to related content or logical next actions</p> <p>Heading Structure: - Use only one H1 per page - Follow logical hierarchy (H1 \u2192 H2 \u2192 H3 \u2192 H4) - Never skip heading levels - Use descriptive, action-oriented headings - Keep headings under 60 characters</p>"},{"location":"STYLE_GUIDE/#page-length-guidelines","title":"Page Length Guidelines","text":"<p>Optimal Lengths: - Getting Started pages: 800-1,200 words - Tutorial pages: 1,000-2,000 words - Reference pages: 500-1,500 words - API documentation: 1,500-3,000 words</p> <p>When to Split Content: - If a page exceeds 3,000 words - If it covers more than one primary task - If it contains more than 10 main sections</p>"},{"location":"STYLE_GUIDE/#modern-visual-layout-and-styling","title":"\ud83c\udfa8 Modern Visual Layout and Styling","text":""},{"location":"STYLE_GUIDE/#material-design-grid-cards","title":"Material Design Grid Cards","text":"<p>Primary Navigation Pattern: Use Material Design grid cards for section overviews and navigation. This creates a modern, scannable layout that guides users visually.</p> <p>Card Structure: <pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n-   :material-icon-name:{ .lg .middle } **Section Title**\n\n    ---\n\n    Brief description of what this section contains\n\n    [:octicons-arrow-right-24: Link Text](link-destination.md)\n\n-   :material-another-icon:{ .lg .middle } **Another Section**\n\n    ---\n\n    Another brief description\n\n    [:octicons-arrow-right-24: Link Text](link-destination.md)\n\n&lt;/div&gt;\n</code></pre></p> <p>Card Guidelines: - Use meaningful Material Design icons (<code>:material-home:</code>, <code>:material-api:</code>, etc.) - Keep descriptions under 15 words - Use consistent arrow links with descriptive text - Group 2-6 cards per grid for optimal visual balance - Always include the <code>{ .lg .middle }</code> classes for proper icon sizing</p>"},{"location":"STYLE_GUIDE/#tabbed-content-organization","title":"Tabbed Content Organization","text":"<p>Use Case: Organize related information that users might want to compare or choose between.</p> <p>Tabbed Structure: <pre><code>=== \"Tab Name 1\"\n    Content for first tab with examples and explanations.\n\n=== \"Tab Name 2\"  \n    Content for second tab with different approach or information.\n\n=== \"Tab Name 3\"\n    Content for third tab with additional variations.\n</code></pre></p> <p>Tab Guidelines: - Use for code examples with different languages/approaches - Organize beginner vs advanced content - Present different operating system instructions - Show before/after examples - Maximum 5 tabs per section for usability</p>"},{"location":"STYLE_GUIDE/#visual-admonitions-with-emojis","title":"Visual Admonitions with Emojis","text":"<p>Modern Callout System: Use rich admonitions with emojis for visual scanning and clear messaging hierarchy.</p> <p>Admonition Types:</p> <pre><code>!!! example \"Quick Start\"\n    Use for hands-on examples and getting started content.\n\n!!! tip \"Pro Tip\"\n    \ud83d\udca1 Use for helpful suggestions and best practices.\n\n!!! info \"Good to Know\"\n    \ud83d\udcdd Use for additional context and background information.\n\n!!! warning \"Important\"\n    \u26a0\ufe0f Use for important considerations and potential issues.\n\n!!! success \"Available\"\n    \u2705 Use for confirmed working features and positive status.\n\n!!! note \"Prerequisites\"\n    \ud83d\udccb Use for requirements and things users need before starting.\n</code></pre> <p>Visual Guidelines: - Always include descriptive titles - Use appropriate emojis for quick visual recognition - Keep content under 100 words for scanability - Use sparingly (maximum 3 per page) - Choose colors that support the message intent</p> <p>Advanced Admonition Examples:</p> <pre><code>!!! example \"Live Example\"\n    Working code example with explanation of each step.\n\n!!! success \"Service Status: Available \u2705\"\n    Current status and availability information.\n\n!!! warning \"Temporary Limitation \u26a0\ufe0f\"\n    Known issues or temporary restrictions.\n\n!!! info \"Developer Note \ud83d\udcdd\"\n    Technical insights and implementation details.\n\n!!! tip \"Pro Tip \ud83d\udca1\"\n    Expert advice and optimization suggestions.\n</code></pre>"},{"location":"STYLE_GUIDE/#visual-status-system","title":"Visual Status System","text":"<p>Service Status Indicators: Create clear visual hierarchy for different types of information:</p> <pre><code>&lt;!-- Service Available --&gt;\n!!! success \"\u2705 Properties API\"\n    Fully operational with real-time data access.\n\n&lt;!-- Service Issues --&gt;  \n!!! warning \"\u26a0\ufe0f Member Data Service\"\n    Experiencing intermittent delays (&lt; 5 second impact).\n\n&lt;!-- Feature Status --&gt;\n!!! info \"\ud83d\ude80 New Feature\"\n    Recently added functionality - see examples below.\n</code></pre> <p>Implementation Status Patterns: - \u2705 Available: Feature is fully implemented and tested - \ud83d\udea7 In Development: Feature is being actively developed - \ud83d\udccb Planned: Feature is planned for future releases - \u26a0\ufe0f Limited: Feature has known limitations or constraints - \u274c Deprecated: Feature will be removed in future versions</p>"},{"location":"STYLE_GUIDE/#professional-page-structure","title":"Professional Page Structure","text":"<p>Required Visual Hierarchy:</p> <ol> <li>Hero Section: Title + brief overview with visual elements</li> <li>Navigation Cards: Grid of options for major sections  </li> <li>Tabbed Examples: Organized code/content with clear labels</li> <li>Progressive Sections: Simple \u2192 intermediate \u2192 advanced</li> <li>Visual Callouts: Strategic admonitions for key information</li> <li>Cross-References: Clear \"Next Steps\" with visual elements</li> </ol> <p>Example Page Layout: <pre><code># Page Title\n\nBrief engaging overview that explains value and scope.\n\n## \ud83c\udfaf Quick Navigation\n\n&lt;div class=\"grid cards\" markdown&gt;\n[Grid cards for main sections]\n&lt;/div&gt;\n\n## Core Content\n\n### Basic Usage\n\n=== \"Simple Example\"\n    Basic code example with explanation\n\n=== \"Advanced Example\"  \n    More complex example with additional features\n\n!!! tip \"Best Practice\"\n    Key insight that helps users succeed\n\n### Advanced Topics\n\nMore detailed content organized in clear sections.\n\n## What's Next?\n\n- \ud83d\udcda [Related Guide](link.md) - Brief description\n- \ud83d\ude80 [Next Steps](link.md) - Logical progression  \n- \ud83d\udca1 [Examples](link.md) - Practical applications\n</code></pre></p>"},{"location":"STYLE_GUIDE/#information-architecture-strategy","title":"Information Architecture Strategy","text":"<p>Progressive Disclosure Approach: Structure all documentation to follow a clear progression from simple to complex, allowing users to dive as deep as they need.</p> <p>Documentation Hierarchy: 1. Getting Started - Onboarding journey with clear steps 2. Guides - Task-oriented how-to documentation 3. API Reference - Complete technical documentation 4. Examples - Practical code samples by complexity 5. Reference - Quick lookup materials 6. Development - Contributor and advanced user content</p> <p>Section Landing Pages: Every major section should have an index page with: - Brief section overview - Grid cards for subsections - Learning path recommendations - Quick access to popular content - Cross-references to related sections</p> <p>Visual Navigation Patterns: - Use consistent grid card layouts for navigation - Implement tabbed content for comparing options - Include \"Next Steps\" sections with visual elements - Provide breadcrumb-style progress indicators - Use visual callouts to highlight key information</p>"},{"location":"STYLE_GUIDE/#modern-documentation-design-elements","title":"Modern Documentation Design Elements","text":"<p>Card-Based Navigation: Replace traditional text lists with visually appealing cards that include: - Meaningful icons for quick recognition - Descriptive titles that indicate functionality - Brief descriptions that explain value - Clear call-to-action links</p> <p>Content Organization Strategies: - Tabbed Examples: Group related code examples, different approaches, or platform-specific instructions - Collapsible Sections: Use for detailed field information, advanced options, or troubleshooting details - Quick Reference Tables: Provide scannable information with clear headers and consistent formatting - Visual Status Indicators: Use colors and icons to show feature availability, importance levels, and current status</p>"},{"location":"STYLE_GUIDE/#collapsible-content-sections","title":"Collapsible Content Sections","text":"<p>Use Cases for Collapsible Content: - Code examples that are long but important - Detailed parameter explanations - Advanced configuration options - Troubleshooting steps - Optional/advanced features</p> <p>Implementation Patterns:</p> <pre><code>??? example \"Code Example\"\n    ```python\n    # Detailed code example here\n    result = client.method(parameter=\"value\")\n    ```\n\n??? info \"Advanced Configuration\"\n    Additional details that experienced users might need\n    but beginners can skip initially.\n\n??? note \"Parameter Details\"\n    Comprehensive explanation of all available parameters\n    and their effects on the API call.\n</code></pre> <p>Collapsible Guidelines: - Use descriptive titles that indicate the content value - Start with closed state for optional information - Use open state (<code>???+</code>) for important examples - Keep titles under 50 characters - Include appropriate icons for visual clarity - Group related collapsible sections together</p> <p>Real-World Integration Examples: Go beyond basic API calls to show: - Complete application examples with multiple components - Production-ready code with error handling - Performance optimization tips and implementation - Integration patterns with external systems - Dashboard and analytics implementations</p>"},{"location":"STYLE_GUIDE/#formatting-standards","title":"\ud83c\udfa8 Formatting Standards","text":""},{"location":"STYLE_GUIDE/#markdown-conventions","title":"Markdown Conventions","text":""},{"location":"STYLE_GUIDE/#text-formatting","title":"Text Formatting","text":"<p>Bold Text (<code>**text**</code>): - UI elements (buttons, menu items, field names) - Important warnings or key concepts - File names and directory names - First occurrence of important terms</p> <p>Italic Text (<code>*text*</code>): - Emphasis within sentences - Variable names in explanations - Book titles and publication names - Foreign words or phrases</p> <p>Code Formatting (<code>`text`</code>): - Code snippets, commands, and file paths - API endpoints and parameter names - Environment variables - Technical terms that are literals</p>"},{"location":"STYLE_GUIDE/#lists-and-organization","title":"Lists and Organization","text":"<p>Unordered Lists: - Use <code>-</code> (hyphens) consistently, not <code>*</code> or <code>+</code> - Maintain parallel structure across all items - Use sentence case for list items - End with periods only if items are complete sentences</p> <p>Ordered Lists: - Use for sequential steps or ranked items - Start each item with a verb when describing actions - Use numbers, not letters (1, 2, 3 not a, b, c) - Restart numbering for separate procedures</p> <p>Definition Lists: - Use for term/definition pairs - Keep definitions concise (under 50 words) - Maintain alphabetical order when possible</p>"},{"location":"STYLE_GUIDE/#code-examples","title":"Code Examples","text":""},{"location":"STYLE_GUIDE/#code-block-standards","title":"Code Block Standards","text":"<p>Required Elements: - Language specification for syntax highlighting - Complete, runnable examples when possible - Comments explaining non-obvious sections - Consistent indentation (2 or 4 spaces, never tabs)</p> <p>Example Structure: <pre><code># Clear, descriptive comment\ndef example_function(parameter: str) -&gt; dict:\n    \"\"\"\n    Brief description of what the function does.\n\n    Args:\n        parameter: Description of the parameter\n\n    Returns:\n        Description of return value\n    \"\"\"\n    # Implementation comment\n    result = {\"status\": \"success\", \"data\": parameter}\n    return result\n\n# Usage example\nresponse = example_function(\"test_data\")\nprint(response)  # Expected output\n</code></pre></p> <p>Code Quality Requirements: - All code examples must be tested and functional - Use realistic, meaningful variable names - Include error handling where appropriate - Show expected output or results - Follow the project's code style conventions</p>"},{"location":"STYLE_GUIDE/#command-line-examples","title":"Command Line Examples","text":"<p>Format: <pre><code># Description of what this command does\n$ command --option value\n\n# Expected output:\nOutput text here\n</code></pre></p> <p>Requirements: - Include the <code>$</code> prompt for clarity - Show expected output when helpful - Use long-form flags when available (<code>--help</code> not <code>-h</code>) - Include comments for complex commands</p>"},{"location":"STYLE_GUIDE/#visual-elements","title":"Visual Elements","text":""},{"location":"STYLE_GUIDE/#admonitions-and-callouts","title":"Admonitions and Callouts","text":"<p>Usage Guidelines:</p> <p>Note (general information):</p> <p>Optional Title</p> <p>General information that provides additional context or background.</p> <p>Tip (helpful suggestions):</p> <p>Pro Tip</p> <p>Helpful suggestions or best practices that can improve the user experience.</p> <p>Warning (important cautions):</p> <p>Important</p> <p>Information about potential problems or important considerations.</p> <p>Danger (critical alerts):</p> <p>Critical</p> <p>Information about actions that could cause data loss or system problems.</p> <p>Requirements: - Use sparingly (maximum 3 per page) - Keep content under 100 words - Always include a descriptive title - Use appropriate emoji for visual scanning</p>"},{"location":"STYLE_GUIDE/#tables","title":"Tables","text":"<p>Structure Requirements: - Include clear, descriptive headers - Use sentence case for headers - Left-align text content - Right-align numerical data - Keep cell content under 50 words</p> <p>API Documentation Tables:</p> <p>For method parameters (matches mkdocstrings output): | Name | Type | Description | Default | |------|------|-------------|---------| | **kwargs | Any | Additional OData parameters (top, select, orderby, etc.) | {} |</p> <p>For method returns: | Type | Description | |------|-------------| | Dict[str, Any] | Dictionary containing active property listings |</p> <p>Table Formatting Guidelines: - Use consistent column widths for readability - Bold parameter names for emphasis when needed - Include type information in monospace font when possible - Keep descriptions concise but informative - Show default values clearly - Use proper technical terminology</p> <p>Example: | Parameter | Type | Required | Description | |-----------|------|----------|-------------| | name | string | Yes | User's full name | | email | string | Yes | Valid email address | | age | integer | No | User's age in years |</p>"},{"location":"STYLE_GUIDE/#links-and-references","title":"Links and References","text":"<p>Link Text: - Use descriptive, action-oriented text - Never use \"click here\" or \"read more\" - Keep link text under 60 characters - Make context clear without surrounding text</p> <p>Examples: - \u2705 \"View the installation guide\" - \u2705 \"Download the latest release\" - \u274c \"Click here for more information\" - \u274c \"Read more\"</p> <p>Link Types: - Internal links: Use relative paths (<code>../guides/setup.md</code>) - External links: Always open in same tab unless specifically noted - Code references: Link to specific lines when possible - API references: Link to exact method or endpoint</p>"},{"location":"STYLE_GUIDE/#technical-documentation","title":"\ud83d\udd27 Technical Documentation","text":""},{"location":"STYLE_GUIDE/#api-documentation","title":"API Documentation","text":""},{"location":"STYLE_GUIDE/#endpoint-documentation","title":"Endpoint Documentation","text":"<p>Required Sections: 1. Description: What the endpoint does 2. HTTP Method and URL: Complete endpoint path 3. Parameters: All parameters with types and descriptions 4. Request Example: Complete, working request 5. Response Example: Complete response with all fields 6. Error Responses: Common error cases and codes</p> <p>Parameter Documentation: <pre><code>| Parameter | Type | Required | Description | Example |\n|-----------|------|----------|-------------|---------|\n| user_id | integer | Yes | Unique user identifier | 12345 |\n| include_deleted | boolean | No | Include deleted records | false |\n</code></pre></p>"},{"location":"STYLE_GUIDE/#code-documentation","title":"Code Documentation","text":"<p>Function/Method Documentation: - Include purpose, parameters, return values, and exceptions - Provide working usage examples - Document any side effects or state changes - Include version information for deprecated methods</p>"},{"location":"STYLE_GUIDE/#error-documentation","title":"Error Documentation","text":""},{"location":"STYLE_GUIDE/#error-message-standards","title":"Error Message Standards","text":"<p>Structure: 1. Error Code: Consistent format (e.g., ERR_001) 2. Error Message: Clear, actionable message 3. Description: Detailed explanation of the cause 4. Resolution: Step-by-step solution 5. Related Information: Links to relevant documentation</p> <p>Example: <pre><code>### ERR_AUTH_001: Invalid Authentication Token\n\n**Message**: \"Authentication failed: Invalid or expired token\"\n\n**Cause**: The provided authentication token is either malformed, expired, or invalid.\n\n**Resolution**:\n1. Verify your token is correctly set in the environment variable\n2. Check that the token hasn't expired\n3. Ensure there are no extra spaces or characters\n4. Generate a new token if necessary\n\n**See Also**: [Authentication Guide](../guides/authentication.md)\n</code></pre></p>"},{"location":"STYLE_GUIDE/#user-experience-guidelines","title":"\ud83c\udfaf User Experience Guidelines","text":""},{"location":"STYLE_GUIDE/#navigation-and-structure","title":"Navigation and Structure","text":""},{"location":"STYLE_GUIDE/#information-architecture","title":"Information Architecture","text":"<p>Page Organization: - Group related information together - Use progressive disclosure (simple \u2192 complex) - Provide multiple entry points for different user types - Include clear navigation paths between related topics</p> <p>Table of Contents: - Required for pages over 1,000 words - Maximum 3 levels deep - Use descriptive, scannable titles - Include estimated reading time for long sections</p>"},{"location":"STYLE_GUIDE/#cross-references","title":"Cross-References","text":"<p>Internal Linking Strategy: - Link to relevant information contextually - Provide \"See Also\" sections for related topics - Use consistent link text for the same destinations - Avoid excessive linking within paragraphs</p>"},{"location":"STYLE_GUIDE/#accessibility-standards","title":"Accessibility Standards","text":""},{"location":"STYLE_GUIDE/#content-accessibility","title":"Content Accessibility","text":"<p>Requirements: - Use descriptive alt text for all images - Provide text alternatives for video content - Use sufficient color contrast (4.5:1 minimum) - Structure content with proper heading hierarchy - Write at a 9<sup>th</sup>-grade reading level or lower</p> <p>Image Guidelines: - Alt text should describe the image content and context - Use empty alt text (<code>alt=\"\"</code>) for decorative images - Keep alt text under 125 characters - Don't start with \"Image of\" or \"Picture of\"</p>"},{"location":"STYLE_GUIDE/#screen-reader-compatibility","title":"Screen Reader Compatibility","text":"<p>Best Practices: - Use semantic HTML elements - Provide skip navigation links - Use descriptive link text - Include form labels and instructions - Test with screen reader software</p>"},{"location":"STYLE_GUIDE/#international-considerations","title":"International Considerations","text":""},{"location":"STYLE_GUIDE/#writing-for-global-audiences","title":"Writing for Global Audiences","text":"<p>Guidelines: - Avoid idioms, slang, and cultural references - Use simple sentence structures - Define technical terms on first use - Provide glossaries for complex terminology - Consider right-to-left reading patterns in design</p>"},{"location":"STYLE_GUIDE/#localization-preparation","title":"Localization Preparation","text":"<p>Requirements: - Avoid embedding text in images - Use flexible layouts that accommodate text expansion - Separate content from formatting - Use Unicode-compliant text encoding - Plan for date/time format variations</p>"},{"location":"STYLE_GUIDE/#quality-assurance","title":"\ud83d\udcca Quality Assurance","text":""},{"location":"STYLE_GUIDE/#content-review-process","title":"Content Review Process","text":""},{"location":"STYLE_GUIDE/#review-checklist","title":"Review Checklist","text":"<p>Technical Accuracy: - [ ] All code examples tested and functional - [ ] API endpoints verified and current - [ ] Screenshots current and accurate - [ ] Links functional and pointing to correct destinations - [ ] Version numbers and compatibility information current</p> <p>Editorial Quality: - [ ] Grammar and spelling checked - [ ] Tone consistent with style guide - [ ] Headings follow hierarchy rules - [ ] Lists use parallel structure - [ ] Formatting follows style guide conventions</p> <p>User Experience: - [ ] Information architecture logical - [ ] Prerequisites clearly stated - [ ] Next steps provided - [ ] Error scenarios addressed - [ ] Multiple user paths considered</p>"},{"location":"STYLE_GUIDE/#maintenance-standards","title":"Maintenance Standards","text":""},{"location":"STYLE_GUIDE/#update-frequency","title":"Update Frequency","text":"<p>Content Types and Update Schedule: - Getting Started guides: Review monthly - API documentation: Update with each release - Screenshots: Update quarterly or with UI changes - Code examples: Test with each major version - External links: Check quarterly</p>"},{"location":"STYLE_GUIDE/#version-control","title":"Version Control","text":"<p>Documentation Versioning: - Tag documentation versions with software releases - Maintain changelog for documentation updates - Archive outdated versions but keep accessible - Use semantic versioning for major documentation changes</p>"},{"location":"STYLE_GUIDE/#metrics-and-analytics","title":"Metrics and Analytics","text":"<p>Track These Metrics: - Page views and time on page - User feedback scores and comments - Search query analysis - Exit points and bounce rates - Mobile vs desktop usage patterns</p> <p>Regular Reviews: - Monthly analytics review - Quarterly user feedback analysis - Annual comprehensive content audit - Ongoing competitor analysis</p>"},{"location":"STYLE_GUIDE/#tools-and-automation","title":"\ud83d\udee0\ufe0f Tools and Automation","text":""},{"location":"STYLE_GUIDE/#writing-tools","title":"Writing Tools","text":""},{"location":"STYLE_GUIDE/#required-tools","title":"Required Tools","text":"<p>Grammar and Style: - Grammar checker (Grammarly, ProWritingAid, or similar) - Readability analyzer (Hemingway Editor or similar) - Spell checker with technical dictionary - Markdown linter for formatting consistency</p> <p>Testing Tools: - Link checker for broken links - Accessibility scanner (WAVE, aXe, or similar) - Mobile responsiveness tester - Performance monitoring tools</p>"},{"location":"STYLE_GUIDE/#style-enforcement","title":"Style Enforcement","text":""},{"location":"STYLE_GUIDE/#automated-checks","title":"Automated Checks","text":"<p>Implement These Checks: - Markdown formatting validation - Heading structure verification - Link validation (internal and external) - Image alt text presence - Code block language specification</p> <p>Style Guide Automation: - Create custom dictionaries for spell checkers - Develop style guide templates - Set up automated style checking in CI/CD - Use consistent file naming conventions</p>"},{"location":"STYLE_GUIDE/#content-management","title":"Content Management","text":""},{"location":"STYLE_GUIDE/#file-organization","title":"File Organization","text":"<p>Directory Structure: <pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Landing page\n\u251c\u2500\u2500 getting-started/           # User onboarding\n\u251c\u2500\u2500 guides/                   # How-to documentation\n\u251c\u2500\u2500 api/                     # API reference\n\u251c\u2500\u2500 examples/               # Code examples\n\u251c\u2500\u2500 reference/             # Quick reference\n\u251c\u2500\u2500 development/          # Contributor docs\n\u251c\u2500\u2500 assets/              # Images and media\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 videos/\n\u2502   \u2514\u2500\u2500 downloads/\n\u2514\u2500\u2500 templates/          # Documentation templates\n    \u251c\u2500\u2500 guide-template.md\n    \u251c\u2500\u2500 api-template.md\n    \u2514\u2500\u2500 tutorial-template.md\n</code></pre></p> <p>File Naming Conventions: - Use lowercase with hyphens: <code>user-management.md</code> - Be descriptive but concise: <code>api-authentication-guide.md</code> - Use consistent prefixes for related files: <code>api-*.md</code> - Include version numbers for versioned docs: <code>migration-v2-to-v3.md</code></p>"},{"location":"STYLE_GUIDE/#templates-and-examples","title":"\ud83d\udccb Templates and Examples","text":""},{"location":"STYLE_GUIDE/#page-templates","title":"Page Templates","text":""},{"location":"STYLE_GUIDE/#guide-template","title":"Guide Template","text":"<pre><code># Page Title\n\nBrief overview paragraph explaining what this guide covers and who it's for.\n\n## Prerequisites\n\n- List any required knowledge\n- Include links to prerequisite reading\n- Mention required tools or setup\n\n## Overview\n\nMore detailed explanation of what users will accomplish.\n\n## Step-by-step Instructions\n\n### Step 1: Descriptive heading\n\nDetailed instructions with code examples.\n\n### Step 2: Next step\n\nContinue with clear, actionable steps.\n\n## Troubleshooting\n\nCommon issues and solutions.\n\n## Next Steps\n\n- Link to related guides\n- Suggest logical next actions\n- Point to additional resources\n\n## Additional Resources\n\n- Links to related documentation\n- External references\n- Community resources\n</code></pre>"},{"location":"STYLE_GUIDE/#api-reference-template","title":"API Reference Template","text":"<p><pre><code># API Endpoint Name\n\nBrief description of what this endpoint does.\n\n## HTTP Request\n</code></pre> METHOD /api/v1/endpoint <pre><code>## Parameters\n\n| Parameter | Type | Required | Description | Example |\n|-----------|------|----------|-------------|---------|\n| param1 | string | Yes | Description | \"value\" |\n\n## Request Example\n\n```language\nCode example here\n</code></pre></p>"},{"location":"STYLE_GUIDE/#response-example","title":"Response Example","text":"<pre><code>{\n  \"example\": \"response\"\n}\n</code></pre>"},{"location":"STYLE_GUIDE/#error-responses","title":"Error Responses","text":"<p>List common error scenarios.</p>"},{"location":"STYLE_GUIDE/#rate-limiting","title":"Rate Limiting","text":"<p>Explain any rate limits. <pre><code>#### Method Documentation Template (mkdocstrings)\n\nFor Python method documentation that auto-generates with mkdocstrings, ensure your docstrings follow this pattern:\n\n```python\ndef get_active_properties(self, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get properties with Active status.\n\n    Convenience method to retrieve only active property listings. This is one of the most common\n    queries for real estate applications.\n\n    Args:\n        **kwargs: Additional OData parameters (top, select, orderby, etc.)\n\n    Returns:\n        Dictionary containing active property listings\n\n    Example:\n        ```python\n        # Get all active properties\n        active_properties = client.property.get_active_properties(top=100)\n\n        # Get active properties with specific fields\n        active_properties = client.property.get_active_properties(\n            select=[\"ListingId\", \"ListPrice\", \"UnparsedAddress\"],\n            orderby=\"ListPrice\"\n        )\n        ```\n\n    Raises:\n        WFRMLSError: If the request fails\n        ValidationError: If parameters are invalid\n    \"\"\"\n</code></pre></p> <p>Key Documentation Elements for Methods:</p> <ol> <li>Method Signature: Clear method name with parameters</li> <li>Brief Description: One-line summary of functionality  </li> <li>Detailed Description: Explain use cases and context</li> <li>Parameters Table: Auto-generated from Args docstring section</li> <li>Returns Table: Auto-generated from Returns docstring section</li> <li>Collapsible Examples: Use example blocks in docstrings</li> <li>Error Information: Document exceptions in Raises section</li> </ol> <p>mkdocstrings Integration Tips: - Use Google-style docstrings for best formatting - Include realistic examples in docstring Example blocks - Use proper type hints for parameter and return type display - Keep examples concise but functional - Use meaningful variable names in examples</p>"},{"location":"STYLE_GUIDE/#content-examples","title":"Content Examples","text":""},{"location":"STYLE_GUIDE/#effective-vs-ineffective-examples","title":"Effective vs Ineffective Examples","text":"<p>\u274c Poor Example: <pre><code># Setup\n\nJust run the install command and you're good to go! It's really easy.\n\n```bash\nnpm install\n</code></pre></p> <p>That's it! <pre><code>**\u2705 Good Example**:\n```markdown\n# Installation\n\nInstall the package using npm to add it to your project dependencies.\n\n## Prerequisites\n\n- Node.js 14.0 or higher\n- npm 6.0 or higher\n\n## Install Command\n\n```bash\n# Install the package\nnpm install package-name\n\n# Verify installation\nnpm list package-name\n</code></pre></p>"},{"location":"STYLE_GUIDE/#verification","title":"Verification","text":"<p>Confirm the installation was successful:</p> <pre><code>const package = require('package-name');\nconsole.log(package.version); // Should output version number\n</code></pre>"},{"location":"STYLE_GUIDE/#next-steps","title":"Next Steps","text":"<ul> <li>Configure the package</li> <li>View usage examples ```</li> </ul>"},{"location":"STYLE_GUIDE/#visual-design-principles","title":"\ud83c\udfaf Visual Design Principles","text":""},{"location":"STYLE_GUIDE/#color-and-visual-hierarchy","title":"Color and Visual Hierarchy","text":"<p>Status Colors: Use consistent color coding throughout documentation: - Green (\u2705): Available features, success states, working examples - Orange (\u26a0\ufe0f): Warnings, important considerations, temporary issues - Red (\u274c): Errors, deprecated features, critical issues - Blue (\ud83d\udcdd): Information, tips, additional context - Purple (\ud83d\ude80): Advanced features, next steps, future features</p>"},{"location":"STYLE_GUIDE/#icon-usage-standards","title":"Icon Usage Standards","text":"<p>Material Design Icons: Use meaningful, consistent icons throughout: - <code>:material-home:</code> - Properties, main sections - <code>:material-account-group:</code> - Members, users, people - <code>:material-office-building:</code> - Offices, organizations - <code>:material-calendar:</code> - Events, scheduling, time-based - <code>:material-api:</code> - APIs, technical interfaces - <code>:material-code:</code> - Code examples, development - <code>:material-book:</code> - Documentation, guides, learning - <code>:material-rocket:</code> - Getting started, quick actions</p> <p>Emoji Enhancement: Strategic emoji use for quick visual scanning: - \ud83c\udfaf for goals, objectives, targeting - \ud83d\udcda for learning, documentation, guides - \ud83d\ude80 for getting started, quick actions - \ud83d\udca1 for tips, insights, ideas - \u26a0\ufe0f for warnings, important notes - \u2705 for success, available features - \ud83d\udd27 for tools, technical setup - \ud83d\udcca for data, analytics, reporting</p>"},{"location":"STYLE_GUIDE/#responsive-visual-design","title":"Responsive Visual Design","text":"<p>Mobile-First Considerations: - Grid cards stack vertically on mobile - Tabs remain functional on small screens - Code blocks scroll horizontally when needed - Navigation cards maintain readability - Admonitions work well on all screen sizes</p> <p>This style guide creates modern, professional documentation that users can navigate intuitively while maintaining technical accuracy and comprehensive coverage.</p> <p>Last updated: [Date] | Version: 1.0 | Next review: [Date + 6 months] </p>"},{"location":"api/","title":"API Reference","text":"<ul> <li> <p> Core Client</p> <p>The main entry point for accessing all WFRMLS API functionality</p> <p> WFRMLSClient</p> </li> <li> <p> Properties</p> <p>Search, retrieve, and analyze property listings with comprehensive filtering</p> <p> Property API</p> </li> <li> <p> Members &amp; Offices</p> <p>Access agent, broker, and office information for the MLS network</p> <p> Members \u00b7  Offices</p> </li> <li> <p> Open Houses</p> <p>Manage and query open house schedules and showing information</p> <p> Open Houses</p> </li> <li> <p> Data &amp; Lookups</p> <p>Access reference data, lookups, and system metadata</p> <p> Data System \u00b7  Lookups</p> </li> <li> <p> Specialized</p> <p>ADU data, deleted records, analytics, and property unit types</p> <p> Specialized APIs</p> </li> </ul>"},{"location":"api/#quick-start-reference","title":"Quick Start Reference","text":"Basic UsageSearch PropertiesMembers &amp; OfficesOpen Houses <pre><code>from wfrmls import WFRMLSClient\n\n# Initialize client\nclient = WFRMLSClient(bearer_token=\"your_token\")\n\n# Get active properties (first 10)\nproperties = client.property.get_active_properties(top=10)\n\n# Get property details\nproperty_detail = client.property.get_property(\"12345678\")\n</code></pre> <pre><code># Search by location\nproperties = client.property.search_properties_by_radius(\n    latitude=40.7608, \n    longitude=-111.8910, \n    radius_miles=10,\n    top=50\n)\n\n# Search with filters\nproperties = client.property.get_properties(\n    filter_query=\"ListPrice gt 500000 and City eq 'Salt Lake City'\",\n    orderby=\"ListPrice desc\",\n    top=25\n)\n</code></pre> <pre><code># Get active agents\nmembers = client.member.get_active_members(top=50)\n\n# Get member with office info\nmember_detail = client.member.get_member_with_office(\"12345\")\n\n# Get active offices\noffices = client.office.get_active_offices(top=50)\n</code></pre> <pre><code># Get upcoming open houses\nopen_houses = client.openhouse.get_upcoming_open_houses(days_ahead=7)\n\n# Get open houses for specific property\nproperty_opens = client.openhouse.get_open_houses_for_property(\"1611952\")\n\n# Get open houses by agent\nagent_opens = client.openhouse.get_open_houses_by_agent(\"96422\")\n</code></pre>"},{"location":"api/#service-status","title":"Service Status","text":"<p>Available Endpoints</p> <p>The following endpoints are fully operational and ready for production use:</p> <p>\u2705 Properties - Complete property data and search capabilities \u2705 Members - Agent and broker information \u2705 Offices - Brokerage and office data \u2705 Open Houses - Showing schedules and events \u2705 Data System - System metadata and information \u2705 Resource - API resource definitions \u2705 Lookup - Reference data and enumerations \u2705 ADU - Accessory Dwelling Unit data \u2705 Property Unit Types - Unit classification data \u2705 Deleted - Deleted record tracking  </p> <p>Temporarily Unavailable</p> <p>The following endpoints are experiencing server-side issues and have been temporarily disabled:</p> <p>\u26a0\ufe0f Media - Property photos and documents (504 Gateway Timeouts) \u26a0\ufe0f History - Property and listing history (Missing entity type) \u26a0\ufe0f Green Verification - Green building certifications (Missing entity type) \u26a0\ufe0f Analytics - Market analytics and reporting (Limited availability)</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All API calls require a bearer token for authentication:</p> <pre><code># Method 1: Pass token directly\nclient = WFRMLSClient(bearer_token=\"9d0243d7632d115b002acf3547d2d7ee\")\n\n# Method 2: Use environment variable\nimport os\nos.environ['WFRMLS_BEARER_TOKEN'] = \"9d0243d7632d115b002acf3547d2d7ee\"\nclient = WFRMLSClient()  # Will auto-load from environment\n</code></pre> <p>Environment Variables</p> <p>It's recommended to store your bearer token in the <code>WFRMLS_BEARER_TOKEN</code> environment variable for security.</p>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The WFRMLS client uses a comprehensive exception hierarchy for error handling:</p> <pre><code>from wfrmls.exceptions import (\n    WFRMLSError,           # Base exception\n    AuthenticationError,   # Invalid credentials\n    NotFoundError,        # Resource not found  \n    RateLimitError,       # Rate limit exceeded\n    ValidationError       # Invalid parameters\n)\n\ntry:\n    properties = client.property.get_properties()\nexcept AuthenticationError:\n    print(\"\u274c Invalid API credentials\")\nexcept RateLimitError:\n    print(\"\u23f1\ufe0f Rate limit exceeded - please wait\")\nexcept NotFoundError:\n    print(\"\ud83d\udd0d Resource not found\")\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid parameters: {e}\")\nexcept WFRMLSError as e:\n    print(f\"\ud83d\udea8 API error: {e}\")\n</code></pre>"},{"location":"api/#response-format","title":"Response Format","text":"<p>All API responses follow the OData v4 standard format:</p> <pre><code>{\n    \"@odata.context\": \"https://api.wfrmls.com/RETS/api/$metadata#Property\",\n    \"@odata.count\": 1250,\n    \"value\": [\n        {\n            \"ListingId\": \"12345678\",\n            \"ListPrice\": 750000,\n            \"Address\": \"123 Main St\",\n            \"City\": \"Salt Lake City\",\n            \"StateOrProvince\": \"Utah\",\n            \"@odata.etag\": \"W/\\\"datetime'2024-01-15T10%3A30%3A00.000Z'\\\"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/#pagination","title":"Pagination","text":"<p>Use <code>$top</code>, <code>$skip</code>, and <code>$count</code> parameters for pagination:</p> <pre><code># Get first 50 properties\npage1 = client.property.get_properties(top=50)\n\n# Get next 50 properties  \npage2 = client.property.get_properties(top=50, skip=50)\n\n# Include total count\nwith_count = client.property.get_properties(top=10, count=True)\nprint(f\"Total properties: {with_count.get('@odata.count', 'Unknown')}\")\n</code></pre>"},{"location":"api/#filtering-and-ordering","title":"Filtering and Ordering","text":"<p>The API supports OData v4 query syntax for filtering and ordering:</p> <pre><code># Filter by price range and city\nproperties = client.property.get_properties(\n    filter_query=\"ListPrice ge 400000 and ListPrice le 800000 and City eq 'Park City'\",\n    orderby=\"ListPrice desc\",\n    top=25\n)\n\n# Filter by date range\nfrom datetime import datetime, timedelta\nrecent_date = (datetime.now() - timedelta(days=7)).strftime(\"%Y-%m-%dT%H:%M:%SZ\")\nrecent_properties = client.property.get_properties(\n    filter_query=f\"ModificationTimestamp ge {recent_date}\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre> <p>OData Query Reference</p> <p>For complete OData v4 query syntax, refer to the OData documentation.</p>"},{"location":"api/#rate-limits","title":"Rate Limits","text":"<p>The WFRMLS API implements rate limiting to ensure fair usage:</p> <ul> <li>Standard Rate: 1000 requests per hour per token</li> <li>Burst Rate: 100 requests per minute  </li> <li>Concurrent: Maximum 10 simultaneous connections</li> </ul> <p>Rate Limit Best Practices</p> <ul> <li>Implement exponential backoff for rate limit errors</li> <li>Use appropriate <code>$top</code> values to minimize requests</li> <li>Cache frequently accessed data when possible</li> <li>Monitor rate limit headers in responses</li> </ul> <p>For detailed method documentation, parameter specifications, and return types, explore the individual API sections using the navigation above. </p>"},{"location":"api/client/","title":"Core Client","text":"<p>The <code>WFRMLSClient</code> is the main entry point for accessing the WFRMLS API. It provides access to all available resources through service-specific client properties using lazy initialization.</p> <p>Quick Start</p> <pre><code>from wfrmls import WFRMLSClient\n\n# Initialize with bearer token\nclient = WFRMLSClient(bearer_token=\"your_token_here\")\n\n# Or use environment variable (recommended)\nimport os\nos.environ['WFRMLS_BEARER_TOKEN'] = \"your_token_here\"\nclient = WFRMLSClient()\n\n# Discover available resources\nservice_doc = client.get_service_document()\nmetadata = client.get_metadata()\n</code></pre>"},{"location":"api/client/#main-client-class","title":"Main Client Class","text":""},{"location":"api/client/#wfrmls.client.WFRMLSClient","title":"<code>wfrmls.client.WFRMLSClient</code>","text":"<p>Main client for WFRMLS API.</p> <p>This is the primary entry point for accessing the WFRMLS API. It provides access to all available resources through service-specific client properties. The client uses lazy initialization to create service clients only when accessed.</p> <p>Note: Media, History, and Green Verification endpoints are currently unavailable due to server-side issues (504 Gateway Timeouts and missing entity types).</p> Example <pre><code>from wfrmls import WFRMLSClient\n\n# Initialize with bearer token from environment variable\nclient = WFRMLSClient()\n\n# Or provide bearer token directly\nclient = WFRMLSClient(bearer_token=\"your_bearer_token_here\")\n\n# Discover available resources\nservice_doc = client.get_service_document()\nmetadata = client.get_metadata()\n\n# Use service endpoints\nproperties = client.property.get_properties(top=10)\nproperty_detail = client.property.get_property(\"12345678\")\n\n# Search properties by location\nproperties = client.property.search_properties_by_radius(\n    latitude=40.7608, longitude=-111.8910, radius_miles=10\n)\n\n# Get open houses\nopen_houses = client.openhouse.get_upcoming_open_houses(days_ahead=7)\n\n# Get member information\nmembers = client.member.get_active_members(top=50)\n\n# Get office information\noffices = client.office.get_active_offices(top=50)\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication. If not provided, will attempt to load from WFRMLS_BEARER_TOKEN environment variable.</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API. Defaults to the production WFRMLS API.</p> <code>None</code> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If no bearer token is provided or found in environment.</p>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.get_service_document","title":"<code>get_service_document()</code>","text":"<p>Get the OData service document.</p> <p>The service document provides a list of all available resources (entity sets) that can be accessed through the API. This is essential for discovering what endpoints are available for the authenticated user.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing the service document with available resources</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> Example <pre><code># Get available resources\nservice_doc = client.get_service_document()\n\n# List available entity sets\nfor resource in service_doc.get('value', []):\n    print(f\"Resource: {resource['name']} - {resource['url']}\")\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Get the OData metadata document.</p> <p>The metadata document provides the complete schema definition including entity types, properties, relationships, and enumerations. This is essential for understanding the structure of the data model.</p> <p>Returns:</p> Type Description <code>str</code> <p>XML string containing the complete metadata schema</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> Example <pre><code># Get metadata schema\nmetadata_xml = client.get_metadata()\n\n# Save to file for inspection\nwith open('wfrmls_metadata.xml', 'w') as f:\n    f.write(metadata_xml)\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.property","title":"<code>property()</code>","text":"<p>Access to property endpoints.</p> <p>Provides access to property listings, search functionality, and property details. This is the primary resource for real estate data in the WFRMLS system.</p> <p>Returns:</p> Type Description <code>PropertyClient</code> <p>PropertyClient instance for property operations</p> Example <pre><code># Get active properties\nproperties = client.property.get_active_properties(top=50)\n\n# Get property with photos\nproperty_with_media = client.property.get_properties_with_media(\n    filter_query=\"ListingId eq '12345678'\"\n)\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.member","title":"<code>member()</code>","text":"<p>Access to member (agent/broker) endpoints.</p> <p>Provides access to real estate agent and broker information, including contact details, office affiliations, and licensing data.</p> <p>Returns:</p> Type Description <code>MemberClient</code> <p>MemberClient instance for member operations</p> Example <pre><code># Get active members\nmembers = client.member.get_active_members(top=50)\n\n# Get member with office info\nmember_with_office = client.member.get_members_with_office(\n    filter_query=\"MemberKey eq '12345'\"\n)\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.office","title":"<code>office()</code>","text":"<p>Access to office (brokerage) endpoints.</p> <p>Provides access to real estate office and brokerage information, including contact details, addresses, and licensing information.</p> <p>Returns:</p> Type Description <code>OfficeClient</code> <p>OfficeClient instance for office operations</p> Example <pre><code># Get active offices\noffices = client.office.get_active_offices(top=50)\n\n# Get office with members\noffice_with_members = client.office.get_offices_with_members(\n    filter_query=\"OfficeKey eq '12345'\"\n)\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.openhouse","title":"<code>openhouse()</code>","text":"<p>Access to open house schedule endpoints.</p> <p>Provides access to open house schedules, events, and showing information. Useful for finding upcoming open houses and managing showing schedules.</p> <p>Returns:</p> Type Description <code>OpenHouseClient</code> <p>OpenHouseClient instance for open house operations</p> Example <pre><code># Get upcoming open houses\nopen_houses = client.openhouse.get_upcoming_open_houses(days_ahead=7)\n\n# Get open houses for a property\nproperty_opens = client.openhouse.get_open_houses_for_property(\"1611952\")\n\n# Get open houses by agent\nagent_opens = client.openhouse.get_open_houses_by_agent(\"96422\")\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.data_system","title":"<code>data_system()</code>","text":"<p>Access to data system metadata endpoints.</p> <p>Provides access to data system information, including version details, contact information, and system capabilities.</p> <p>Returns:</p> Type Description <code>DataSystemClient</code> <p>DataSystemClient instance for data system operations</p> Example <pre><code># Get system information\nsystem_info = client.data_system.get_system_info()\n\n# Get specific data system by key\nsystem = client.data_system.get_data_system(\"WFRMLS\")\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.resource","title":"<code>resource()</code>","text":"<p>Access to resource metadata endpoints.</p> <p>Provides access to API resource metadata, including field definitions, data types, and resource relationships.</p> <p>Returns:</p> Type Description <code>ResourceClient</code> <p>ResourceClient instance for resource metadata operations</p> Example <pre><code># Get all resources\nresources = client.resource.get_resources()\n\n# Get Property resource metadata\nproperty_resource = client.resource.get_resource_by_name(\"Property\")\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.property_unit_types","title":"<code>property_unit_types()</code>","text":"<p>Access to property unit types endpoints.</p> <p>Provides access to property unit type information, including condos, townhomes, apartments, and other unit classifications.</p> <p>Returns:</p> Type Description <code>PropertyUnitTypesClient</code> <p>PropertyUnitTypesClient instance for unit type operations</p> Example <pre><code># Get all unit types\nunit_types = client.property_unit_types.get_property_unit_types()\n\n# Get residential unit types\nresidential = client.property_unit_types.get_residential_unit_types()\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.lookup","title":"<code>lookup()</code>","text":"<p>Access to lookup table endpoints.</p> <p>Provides access to enumeration values and reference data used throughout the MLS system, including property types, statuses, and other lookup values.</p> <p>Returns:</p> Type Description <code>LookupClient</code> <p>LookupClient instance for lookup operations</p> Example <pre><code># Get property type lookups\nproperty_types = client.lookup.get_property_type_lookups()\n\n# Get all lookup names\nlookup_names = client.lookup.get_lookup_names()\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.adu","title":"<code>adu()</code>","text":"<p>Access to Accessory Dwelling Unit (ADU) endpoints.</p> <p>Provides access to accessory dwelling unit information, including types, statuses, and property relationships for secondary housing units.</p> <p>Returns:</p> Type Description <code>AduClient</code> <p>AduClient instance for ADU operations</p> Example <pre><code># Get all ADUs\nadus = client.adu.get_adus()\n\n# Get existing ADUs\nexisting_adus = client.adu.get_existing_adus()\n\n# Get ADUs for a property\nproperty_adus = client.adu.get_adus_for_property(\"1611952\")\n</code></pre>"},{"location":"api/client/#wfrmls.client.WFRMLSClient.deleted","title":"<code>deleted()</code>","text":"<p>Access to deleted records endpoints.</p> <p>Provides access to deleted record tracking for data synchronization. Essential for maintaining data integrity when replicating MLS data.</p> <p>Returns:</p> Type Description <code>DeletedClient</code> <p>DeletedClient instance for deleted record operations</p> Example <pre><code># Get all deleted records\ndeleted = client.deleted.get_deleted(top=50)\n\n# Get deleted properties since yesterday\nfrom datetime import datetime, timedelta\nyesterday = datetime.utcnow() - timedelta(days=1)\ndeleted_properties = client.deleted.get_deleted_since(\n    since=yesterday.isoformat() + \"Z\",\n    resource_name=\"Property\"\n)\n\n# Get recent deletions for synchronization\nrecent_deletions = client.deleted.get_deleted_property_records(\n    orderby=\"DeletedDateTime desc\"\n)\n</code></pre>"},{"location":"api/client/#service-discovery","title":"Service Discovery","text":"<p>The client provides two methods for discovering available API resources and understanding the data schema:</p>"},{"location":"api/client/#service-document","title":"Service Document","text":"<p>The service document lists all available entity sets (resources) that can be accessed:</p> <pre><code>service_doc = client.get_service_document()\n\n# Explore available resources\nfor resource in service_doc.get('value', []):\n    print(f\"\ud83d\udccb {resource['name']} - {resource['url']}\")\n    if 'title' in resource:\n        print(f\"   {resource['title']}\")\n</code></pre> Example Service Document Response <pre><code>{\n    \"@odata.context\": \"https://api.wfrmls.com/RETS/api/$metadata\",\n    \"value\": [\n        {\n            \"name\": \"Property\",\n            \"kind\": \"EntitySet\",\n            \"url\": \"Property\",\n            \"title\": \"Property listings and details\"\n        },\n        {\n            \"name\": \"Member\", \n            \"kind\": \"EntitySet\",\n            \"url\": \"Member\",\n            \"title\": \"Real estate agents and brokers\"\n        },\n        {\n            \"name\": \"Office\",\n            \"kind\": \"EntitySet\", \n            \"url\": \"Office\",\n            \"title\": \"Real estate offices and brokerages\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/client/#metadata-document","title":"Metadata Document","text":"<p>The metadata document provides the complete schema definition with entity types, properties, and relationships:</p> <pre><code>metadata_xml = client.get_metadata()\n\n# Save for inspection (useful for development)\nwith open('wfrmls_schema.xml', 'w') as f:\n    f.write(metadata_xml)\n</code></pre> <p>Schema Exploration</p> <p>The metadata document is essential for understanding:</p> <ul> <li>Available entity properties and their data types</li> <li>Required vs. optional fields  </li> <li>Relationships between entities</li> <li>Enumeration values and constraints</li> </ul>"},{"location":"api/client/#service-clients","title":"Service Clients","text":"<p>Each service client provides specialized access to different parts of the WFRMLS API:</p> <ul> <li> <p> property</p> <p>Property listings, search, and analysis</p> <pre><code>properties = client.property.get_active_properties()\n</code></pre> </li> <li> <p> member</p> <p>Real estate agents and brokers</p> <pre><code>agents = client.member.get_active_members()\n</code></pre> </li> <li> <p> office</p> <p>Real estate offices and brokerages</p> <pre><code>offices = client.office.get_active_offices()\n</code></pre> </li> <li> <p> openhouse</p> <p>Open house schedules and events</p> <pre><code>opens = client.openhouse.get_upcoming_open_houses()\n</code></pre> </li> <li> <p> data_system</p> <p>System metadata and information</p> <pre><code>system_info = client.data_system.get_system_info()\n</code></pre> </li> <li> <p> resource</p> <p>API resource definitions and metadata</p> <pre><code>resources = client.resource.get_resources()\n</code></pre> </li> <li> <p> lookup</p> <p>Reference data and lookup tables</p> <pre><code>lookups = client.lookup.get_lookup_names()\n</code></pre> </li> <li> <p> adu</p> <p>Accessory Dwelling Unit data</p> <pre><code>adus = client.adu.get_existing_adus()\n</code></pre> </li> <li> <p> property_unit_types</p> <p>Property unit classifications</p> <pre><code>unit_types = client.property_unit_types.get_residential_unit_types()\n</code></pre> </li> <li> <p> deleted</p> <p>Deleted record tracking</p> <pre><code>deleted = client.deleted.get_recent_deletions()\n</code></pre> </li> </ul>"},{"location":"api/client/#best-practices","title":"Best Practices","text":""},{"location":"api/client/#initialization","title":"Initialization","text":"Environment Variable (Recommended)Direct TokenCustom Base URL <pre><code>import os\n\n# Set token in environment\nos.environ['WFRMLS_BEARER_TOKEN'] = \"your_token_here\"\n\n# Initialize client\nclient = WFRMLSClient()\n</code></pre> <pre><code># For testing or scripts\nclient = WFRMLSClient(bearer_token=\"your_token_here\")\n</code></pre> <pre><code># For testing against different environments\nclient = WFRMLSClient(\n    bearer_token=\"your_token\",\n    base_url=\"https://test-api.wfrmls.com/RETS/api\"\n)\n</code></pre>"},{"location":"api/client/#resource-discovery","title":"Resource Discovery","text":"<pre><code># Check what's available before building queries\nservice_doc = client.get_service_document()\navailable_resources = [r['name'] for r in service_doc.get('value', [])]\n\nif 'Property' in available_resources:\n    properties = client.property.get_active_properties(top=10)\n\nif 'OpenHouse' in available_resources:\n    open_houses = client.openhouse.get_upcoming_open_houses()\n</code></pre>"},{"location":"api/client/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import AuthenticationError, WFRMLSError\n\ntry:\n    # Initialize client\n    client = WFRMLSClient()\n\n    # Test connection\n    service_doc = client.get_service_document()\n    print(f\"\u2705 Connected! Found {len(service_doc.get('value', []))} resources\")\n\nexcept AuthenticationError:\n    print(\"\u274c Authentication failed - check your bearer token\")\nexcept WFRMLSError as e:\n    print(f\"\ud83d\udea8 API error: {e}\")\n</code></pre>"},{"location":"api/client/#client-lifecycle","title":"Client Lifecycle","text":"<p>The <code>WFRMLSClient</code> uses lazy initialization for optimal performance:</p> <ol> <li>Initialization: Only stores configuration, no API calls made</li> <li>First Access: Service clients are created when first accessed</li> <li>Reuse: Service clients are cached for subsequent calls</li> <li>Thread Safety: Each thread should use its own client instance</li> </ol> <pre><code># Client creation is lightweight\nclient = WFRMLSClient()  # No API calls yet\n\n# First access creates the service client  \nproperties = client.property.get_properties()  # PropertyClient created\n\n# Subsequent calls reuse the same client instance\nmore_properties = client.property.get_active_properties()  # Reuses PropertyClient\n</code></pre>"},{"location":"api/data-system/","title":"Data System API","text":"<p>The Data System API provides access to data system metadata, including version details, contact information, and system capabilities. This API is essential for understanding the WFRMLS system configuration and capabilities.</p> <p>Quick Start</p> <pre><code># Get system information\nsystem_info = client.data_system.get_system_info()\n\n# Get specific data system by key\nsystem = client.data_system.get_data_system(\"WFRMLS\")\n\n# Get all data systems\nsystems = client.data_system.get_data_systems()\n</code></pre>"},{"location":"api/data-system/#data-system-client","title":"Data System Client","text":""},{"location":"api/data-system/#wfrmls.data_system.DataSystemClient","title":"<code>wfrmls.data_system.DataSystemClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for data system metadata API endpoints.</p> <p>The DataSystem resource provides metadata about the data system itself, including version information, contact details, and system capabilities. This is useful for understanding the MLS system configuration and features.</p>"},{"location":"api/data-system/#wfrmls.data_system.DataSystemClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the data system client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/data-system/#wfrmls.data_system.DataSystemClient.get_data_system","title":"<code>get_data_system(data_system_key)</code>","text":"<p>Get data system by data system key.</p> <p>Retrieves a single data system record by its unique key. This is the most efficient way to get detailed information about a specific data system configuration.</p> <p>Parameters:</p> Name Type Description Default <code>data_system_key</code> <code>str</code> <p>Data system key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing data system data for the specified record</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the data system with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific data system by key\ndata_system = client.data_system.get_data_system(\"WFRMLS\")\n\nprint(f\"System Name: {data_system['DataSystemName']}\")\nprint(f\"Version: {data_system.get('SystemVersion', 'Unknown')}\")\nprint(f\"Contact: {data_system.get('ContactEmail', 'Unknown')}\")\n</code></pre>"},{"location":"api/data-system/#wfrmls.data_system.DataSystemClient.get_data_systems","title":"<code>get_data_systems(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get data system information with optional OData filtering.</p> <p>This method retrieves data system metadata with full OData v4.0 query support. Provides information about the MLS system configuration and capabilities.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing data system metadata with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of data system records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get all data system information\ndata_systems = client.data_system.get_data_systems()\n\n# Get specific fields only\ndata_systems = client.data_system.get_data_systems(\n    select=[\"DataSystemKey\", \"DataSystemName\", \"SystemVersion\"]\n)\n\n# Get data systems with specific properties\ndata_systems = client.data_system.get_data_systems(\n    filter_query=\"DataSystemName eq 'WFRMLS'\",\n    expand=\"Resources\"\n)\n</code></pre>"},{"location":"api/data-system/#wfrmls.data_system.DataSystemClient.get_modified_data_systems","title":"<code>get_modified_data_systems(since, **kwargs)</code>","text":"<p>Get data systems modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only data system records that have been updated since the last sync. Useful for monitoring system configuration changes.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date, datetime]</code> <p>ISO format datetime string, date object, or datetime object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing data systems modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get systems modified in last day\ncutoff_time = datetime.utcnow() - timedelta(days=1)\nupdates = client.data_system.get_modified_data_systems(\n    since=cutoff_time\n)\n\n# Get systems modified since a specific date\nupdates = client.data_system.get_modified_data_systems(\n    since=\"2023-01-01T00:00:00Z\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/data-system/#wfrmls.data_system.DataSystemClient.get_system_info","title":"<code>get_system_info()</code>","text":"<p>Get general system information.</p> <p>Convenience method to retrieve basic system information. Typically returns information about the primary MLS system.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing system information</p> Example <pre><code># Get system information\nsystem_info = client.data_system.get_system_info()\n\nfor system in system_info.get('value', []):\n    print(f\"System: {system['DataSystemName']}\")\n    print(f\"Description: {system.get('DataSystemDescription', 'N/A')}\")\n</code></pre>"},{"location":"api/data-system/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/data-system/#system-information-retrieval","title":"System Information Retrieval","text":"Basic System InfoSpecific System DetailsSystem Capabilities <pre><code># Get general system information\nsystem_info = client.data_system.get_system_info()\n\n# Get all available data systems\nall_systems = client.data_system.get_data_systems(top=50)\n\n# Get data systems with specific ordering\nsystems_by_name = client.data_system.get_data_systems(\n    orderby=\"DataSystemName asc\"\n)\n</code></pre> <pre><code># Get WFRMLS system details\nwfrmls_system = client.data_system.get_data_system(\"WFRMLS\")\n\n# Get system by name (if different from key)\nsystem = client.data_system.get_data_systems(\n    filter_query=\"DataSystemName eq 'WFRMLS Production'\",\n    top=1\n)\n</code></pre> <pre><code># Get systems with contact information\nsystems_with_contact = client.data_system.get_data_systems(\n    filter_query=\"DataSystemContactEmail ne null\",\n    select=\"DataSystemKey,DataSystemName,DataSystemContactEmail,DataSystemVersion\"\n)\n\n# Get systems by status\nactive_systems = client.data_system.get_data_systems(\n    filter_query=\"DataSystemStatus eq 'Active'\",\n    orderby=\"DataSystemName asc\"\n)\n</code></pre>"},{"location":"api/data-system/#data-system-data-structure","title":"Data System Data Structure","text":"<p>Data Systems in WFRMLS follow the RESO standard with comprehensive system metadata:</p> Key Data System Fields <p>System Identification</p> <ul> <li><code>DataSystemKey</code> - Unique system identifier</li> <li><code>DataSystemName</code> - Human-readable system name</li> <li><code>DataSystemDescription</code> - System description</li> <li><code>DataSystemAbbreviation</code> - System abbreviation</li> <li><code>DataSystemVersion</code> - Current system version</li> </ul> <p>Contact Information</p> <ul> <li><code>DataSystemContactEmail</code> - Contact email for support</li> <li><code>DataSystemContactPhone</code> - Contact phone number</li> <li><code>DataSystemContactName</code> - Contact person name</li> <li><code>DataSystemURL</code> - System website URL</li> </ul> <p>Technical Details</p> <ul> <li><code>DataSystemStatus</code> - System status (Active, Inactive, etc.)</li> <li><code>DataSystemTimeZone</code> - System timezone</li> <li><code>DataSystemLocale</code> - System locale/language</li> <li><code>DataSystemCurrency</code> - Default currency</li> </ul> <p>Timestamps</p> <ul> <li><code>ModificationTimestamp</code> - Last update time</li> <li><code>OriginalEntryTimestamp</code> - Initial creation time</li> </ul>"},{"location":"api/data-system/#integration-examples","title":"Integration Examples","text":""},{"location":"api/data-system/#system-status-dashboard","title":"System Status Dashboard","text":"<pre><code>def create_system_status_dashboard(client):\n    \"\"\"Create a comprehensive system status dashboard.\"\"\"\n\n    # Get all data systems\n    systems = client.data_system.get_data_systems(\n        select=\"DataSystemKey,DataSystemName,DataSystemVersion,DataSystemStatus,DataSystemContactEmail,ModificationTimestamp\",\n        orderby=\"DataSystemName asc\",\n        top=50\n    )\n\n    dashboard = {\n        'total_systems': 0,\n        'active_systems': 0,\n        'systems_with_contact': 0,\n        'systems': [],\n        'latest_update': None\n    }\n\n    latest_timestamp = None\n\n    for system in systems.get('value', []):\n        dashboard['total_systems'] += 1\n\n        status = system.get('DataSystemStatus', 'Unknown')\n        if status == 'Active':\n            dashboard['active_systems'] += 1\n\n        if system.get('DataSystemContactEmail'):\n            dashboard['systems_with_contact'] += 1\n\n        # Track latest modification\n        mod_timestamp = system.get('ModificationTimestamp')\n        if mod_timestamp:\n            if not latest_timestamp or mod_timestamp &gt; latest_timestamp:\n                latest_timestamp = mod_timestamp\n                dashboard['latest_update'] = mod_timestamp\n\n        dashboard['systems'].append({\n            'key': system.get('DataSystemKey', 'Unknown'),\n            'name': system.get('DataSystemName', 'Unknown'),\n            'version': system.get('DataSystemVersion', 'Unknown'),\n            'status': status,\n            'contact_email': system.get('DataSystemContactEmail'),\n            'last_modified': mod_timestamp\n        })\n\n    return dashboard\n\n# Usage\nsystem_dashboard = create_system_status_dashboard(client)\nprint(f\"\ud83d\udda5\ufe0f Data System Status Dashboard\")\nprint(f\"   Total Systems: {system_dashboard['total_systems']}\")\nprint(f\"   Active Systems: {system_dashboard['active_systems']} ({system_dashboard['active_systems']/system_dashboard['total_systems']*100:.1f}%)\")\nprint(f\"   Systems with Contact: {system_dashboard['systems_with_contact']}\")\nprint(f\"   Latest Update: {system_dashboard['latest_update']}\")\n\nprint(f\"\\n\ud83d\udccb System Details:\")\nfor system in system_dashboard['systems']:\n    status_icon = \"\u2705\" if system['status'] == 'Active' else \"\u274c\"\n    contact_icon = \"\ud83d\udce7\" if system['contact_email'] else \"\u2753\"\n    print(f\"   {status_icon} {system['name']} (v{system['version']})\")\n    print(f\"      Key: {system['key']} | Contact: {contact_icon}\")\n</code></pre>"},{"location":"api/data-system/#system-configuration-audit","title":"System Configuration Audit","text":"<pre><code>def audit_system_configuration(client):\n    \"\"\"Audit system configuration for completeness and compliance.\"\"\"\n\n    # Get all systems with full details\n    systems = client.data_system.get_data_systems(top=100)\n\n    audit_results = {\n        'total_systems': 0,\n        'complete_configs': 0,\n        'missing_contact': [],\n        'missing_version': [],\n        'inactive_systems': [],\n        'outdated_systems': [],\n        'configuration_issues': []\n    }\n\n    for system in systems.get('value', []):\n        audit_results['total_systems'] += 1\n\n        name = system.get('DataSystemName', 'Unknown')\n        key = system.get('DataSystemKey', 'Unknown')\n        system_display = f\"{name} ({key})\"\n\n        issues = []\n\n        # Check contact information\n        if not system.get('DataSystemContactEmail'):\n            issues.append('Missing contact email')\n            audit_results['missing_contact'].append(system_display)\n\n        # Check version information\n        version = system.get('DataSystemVersion')\n        if not version or version.lower() in ['unknown', 'n/a', '']:\n            issues.append('Missing version info')\n            audit_results['missing_version'].append(system_display)\n\n        # Check system status\n        status = system.get('DataSystemStatus', 'Unknown')\n        if status != 'Active':\n            issues.append(f'Inactive status: {status}')\n            audit_results['inactive_systems'].append(system_display)\n\n        # Check for potential outdated systems (basic heuristic)\n        if version and any(old_version in version.lower() for old_version in ['1.0', '2.0', 'beta', 'test']):\n            issues.append('Potentially outdated version')\n            audit_results['outdated_systems'].append(system_display)\n\n        if not issues:\n            audit_results['complete_configs'] += 1\n        else:\n            audit_results['configuration_issues'].append({\n                'system': system_display,\n                'issues': issues\n            })\n\n    return audit_results\n\n# Usage\naudit_report = audit_system_configuration(client)\nprint(f\"\ud83d\udd0d System Configuration Audit\")\nprint(f\"   Total Systems: {audit_report['total_systems']}\")\nprint(f\"   Complete Configurations: {audit_report['complete_configs']} ({audit_report['complete_configs']/audit_report['total_systems']*100:.1f}%)\")\nprint(f\"   Missing Contact Info: {len(audit_report['missing_contact'])} systems\")\nprint(f\"   Missing Version Info: {len(audit_report['missing_version'])} systems\")\nprint(f\"   Inactive Systems: {len(audit_report['inactive_systems'])} systems\")\n\nif audit_report['configuration_issues']:\n    print(f\"\\n\u26a0\ufe0f Configuration Issues:\")\n    for issue in audit_report['configuration_issues'][:10]:\n        print(f\"   - {issue['system']}\")\n        for problem in issue['issues']:\n            print(f\"     \u2022 {problem}\")\n</code></pre>"},{"location":"api/data-system/#version-tracking","title":"Version Tracking","text":"<pre><code>def track_system_versions(client):\n    \"\"\"Track system versions and update history.\"\"\"\n\n    # Get systems with version information\n    systems = client.data_system.get_data_systems(\n        select=\"DataSystemKey,DataSystemName,DataSystemVersion,ModificationTimestamp,OriginalEntryTimestamp\",\n        orderby=\"ModificationTimestamp desc\",\n        top=100\n    )\n\n    version_tracking = {\n        'systems_by_version': {},\n        'recent_updates': [],\n        'version_distribution': {},\n        'update_timeline': []\n    }\n\n    for system in systems.get('value', []):\n        name = system.get('DataSystemName', 'Unknown')\n        version = system.get('DataSystemVersion', 'Unknown')\n        mod_time = system.get('ModificationTimestamp')\n\n        # Group by version\n        if version not in version_tracking['systems_by_version']:\n            version_tracking['systems_by_version'][version] = []\n        version_tracking['systems_by_version'][version].append(name)\n\n        # Count version distribution\n        version_tracking['version_distribution'][version] = version_tracking['version_distribution'].get(version, 0) + 1\n\n        # Track recent updates\n        if mod_time:\n            from datetime import datetime, timedelta\n            try:\n                mod_datetime = datetime.fromisoformat(mod_time.replace('Z', '+00:00'))\n                days_ago = (datetime.now(mod_datetime.tzinfo) - mod_datetime).days\n\n                if days_ago &lt;= 30:  # Recent updates (last 30 days)\n                    version_tracking['recent_updates'].append({\n                        'system': name,\n                        'version': version,\n                        'days_ago': days_ago,\n                        'timestamp': mod_time\n                    })\n\n                version_tracking['update_timeline'].append({\n                    'system': name,\n                    'version': version,\n                    'date': mod_datetime.strftime('%Y-%m-%d'),\n                    'days_ago': days_ago\n                })\n            except:\n                pass\n\n    # Sort recent updates by recency\n    version_tracking['recent_updates'].sort(key=lambda x: x['days_ago'])\n\n    return version_tracking\n\n# Usage\nversion_report = track_system_versions(client)\nprint(f\"\ud83d\udcca System Version Tracking\")\n\nprint(f\"\\n\ud83c\udff7\ufe0f Version Distribution:\")\nfor version, count in sorted(version_report['version_distribution'].items(), key=lambda x: x[1], reverse=True):\n    print(f\"   {version}: {count} systems\")\n\nif version_report['recent_updates']:\n    print(f\"\\n\ud83d\udd04 Recent Updates (Last 30 days):\")\n    for update in version_report['recent_updates'][:10]:\n        print(f\"   \ud83d\udcc5 {update['days_ago']} days ago: {update['system']} \u2192 v{update['version']}\")\n\nprint(f\"\\n\ud83d\udcc8 Systems by Version:\")\nfor version, systems in version_report['systems_by_version'].items():\n    print(f\"   {version}:\")\n    for system in systems[:5]:  # Show first 5 systems per version\n        print(f\"     - {system}\")\n    if len(systems) &gt; 5:\n        print(f\"     ... and {len(systems) - 5} more\")\n</code></pre>"},{"location":"api/data-system/#system-health-check","title":"System Health Check","text":"<pre><code>def perform_system_health_check(client):\n    \"\"\"Perform a comprehensive system health check.\"\"\"\n\n    try:\n        # Test basic connectivity\n        systems = client.data_system.get_data_systems(top=5)\n\n        health_status = {\n            'connectivity': 'OK',\n            'response_time': None,\n            'data_availability': 'OK',\n            'system_count': len(systems.get('value', [])),\n            'issues': []\n        }\n\n        # Check if we got any data\n        if not systems.get('value'):\n            health_status['data_availability'] = 'WARNING'\n            health_status['issues'].append('No data systems returned')\n\n        # Basic validation of returned data\n        for system in systems.get('value', []):\n            if not system.get('DataSystemKey'):\n                health_status['issues'].append('System missing DataSystemKey')\n            if not system.get('DataSystemName'):\n                health_status['issues'].append('System missing DataSystemName')\n\n        # Check for required WFRMLS system\n        wfrmls_found = False\n        for system in systems.get('value', []):\n            if 'WFRMLS' in system.get('DataSystemName', '').upper():\n                wfrmls_found = True\n                break\n\n        if not wfrmls_found:\n            health_status['issues'].append('WFRMLS system not found in first 5 results')\n\n        # Determine overall health\n        if health_status['issues']:\n            health_status['overall'] = 'WARNING' if len(health_status['issues']) &lt; 3 else 'ERROR'\n        else:\n            health_status['overall'] = 'HEALTHY'\n\n        return health_status\n\n    except Exception as e:\n        return {\n            'connectivity': 'ERROR',\n            'overall': 'ERROR',\n            'error': str(e),\n            'issues': [f'Connection failed: {str(e)}']\n        }\n\n# Usage\nhealth_check = perform_system_health_check(client)\nstatus_icon = {\n    'HEALTHY': '\u2705',\n    'WARNING': '\u26a0\ufe0f',\n    'ERROR': '\u274c'\n}.get(health_check['overall'], '\u2753')\n\nprint(f\"\ud83c\udfe5 System Health Check: {status_icon} {health_check['overall']}\")\nprint(f\"   Connectivity: {health_check['connectivity']}\")\nprint(f\"   Data Availability: {health_check.get('data_availability', 'Unknown')}\")\nprint(f\"   Systems Found: {health_check.get('system_count', 0)}\")\n\nif health_check.get('issues'):\n    print(f\"\\n\u26a0\ufe0f Issues Detected:\")\n    for issue in health_check['issues']:\n        print(f\"   - {issue}\")\n\nif health_check.get('error'):\n    print(f\"\\n\u274c Error: {health_check['error']}\")\n</code></pre>"},{"location":"api/data-system/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError\n\ntry:\n    # Try to get system information\n    system_info = client.data_system.get_system_info()\n\nexcept NotFoundError:\n    print(\"\u274c Data system information not found\")\n\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid request parameters: {e}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Unexpected error: {e}\")\n</code></pre>"},{"location":"api/data-system/#performance-tips","title":"Performance Tips","text":"<p>Optimization Strategies</p> <p>Efficient Queries</p> <ul> <li>Data system information changes infrequently - cache results for extended periods</li> <li>Use <code>select</code> to limit fields when you only need basic system info</li> <li>Filter by status to get only active systems if needed</li> </ul> <p>Common Patterns</p> <pre><code># Get essential system info only\nbasic_systems = client.data_system.get_data_systems(\n    select=\"DataSystemKey,DataSystemName,DataSystemVersion,DataSystemStatus\",\n    orderby=\"DataSystemName asc\"\n)\n\n# Check for specific system efficiently\nwfrmls_system = client.data_system.get_data_systems(\n    filter_query=\"contains(tolower(DataSystemName), 'wfrmls')\",\n    top=1\n)\n</code></pre> <p>Caching Considerations</p> <ul> <li>System metadata rarely changes - safe to cache for hours or days</li> <li>Monitor <code>ModificationTimestamp</code> to detect configuration changes</li> <li>Use system health checks periodically to ensure connectivity </li> </ul>"},{"location":"api/lookup/","title":"Lookup API","text":"<p>The Lookup API provides access to enumeration values and reference data used throughout the MLS system, including property types, statuses, and other lookup values. This API is essential for understanding valid values for filtering and data validation.</p> <p>Quick Start</p> <pre><code># Get all lookup names\nlookup_names = client.lookup.get_lookup_names()\n\n# Get property type lookups\nproperty_types = client.lookup.get_property_type_lookups()\n\n# Get specific lookup values\nlookup_values = client.lookup.get_lookup(\"PropertyType\")\n</code></pre>"},{"location":"api/lookup/#lookup-client","title":"Lookup Client","text":""},{"location":"api/lookup/#wfrmls.lookup.LookupClient","title":"<code>wfrmls.lookup.LookupClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for lookup table data API endpoints.</p> <p>The Lookup resource contains enumeration values and reference data used throughout the MLS system. This includes property types, status values, and other standardized lookup values.</p>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the lookup client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_active_lookups","title":"<code>get_active_lookups(**kwargs)</code>","text":"<p>Get active lookup values.</p> <p>Convenience method to filter for active/enabled lookup values. Excludes deprecated or disabled lookup entries.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing active lookup values</p> Example <pre><code># Get all active lookups\nactive_lookups = client.lookup.get_active_lookups(\n    orderby=\"LookupName asc, DisplayOrder asc\"\n)\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_lookup","title":"<code>get_lookup(lookup_key)</code>","text":"<p>Get lookup by lookup key.</p> <p>Retrieves a single lookup record by its unique key. This is the most efficient way to get detailed information about a specific lookup value.</p> <p>Parameters:</p> Name Type Description Default <code>lookup_key</code> <code>str</code> <p>Lookup key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing lookup data for the specified record</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the lookup with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific lookup by key\nlookup = client.lookup.get_lookup(\"PROP_TYPE_RESIDENTIAL\")\n\nprint(f\"Lookup Name: {lookup['LookupName']}\")\nprint(f\"Value: {lookup['LookupValue']}\")\nprint(f\"Standard Value: {lookup.get('StandardLookupValue', 'N/A')}\")\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_lookup_names","title":"<code>get_lookup_names()</code>","text":"<p>Get lookup data for extracting unique lookup names.</p> <p>Convenience method to get lookup data that can be used to discover what lookup types are available. Returns the full response for compatibility with test expectations.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing lookup data with all available lookups</p> Example <pre><code># Get all available lookups\nlookups_response = client.lookup.get_lookup_names()\n\n# Extract unique names from the response\nnames = set()\nfor item in lookups_response.get(\"value\", []):\n    if \"LookupName\" in item:\n        names.add(item[\"LookupName\"])\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_lookups","title":"<code>get_lookups(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get lookup data with optional OData filtering.</p> <p>This method retrieves lookup table data with full OData v4.0 query support. Provides access to enumeration values and reference data used in the system.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing lookup data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of lookup records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get all lookup data\nlookups = client.lookup.get_lookups()\n\n# Get lookups for a specific resource\nlookups = client.lookup.get_lookups(\n    filter_query=\"LookupName eq 'PropertyType'\",\n    orderby=\"DisplayOrder asc\"\n)\n\n# Get lookup values with specific fields\nlookups = client.lookup.get_lookups(\n    select=[\"LookupKey\", \"LookupName\", \"LookupValue\", \"StandardLookupValue\"],\n    top=100\n)\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_lookups_by_name","title":"<code>get_lookups_by_name(lookup_name, **kwargs)</code>","text":"<p>Get lookups by lookup name.</p> <p>Convenience method to retrieve all lookup values for a specific lookup name. Useful for getting all values for enumeration types like PropertyType, PropertyStatus, etc.</p> <p>Parameters:</p> Name Type Description Default <code>lookup_name</code> <code>str</code> <p>Lookup name to filter by (e.g., \"PropertyType\", \"PropertyStatus\")</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing lookups for the specified name</p> Example <pre><code># Get all property type lookups\nproperty_types = client.lookup.get_lookups_by_name(\n    lookup_name=\"PropertyType\",\n    orderby=\"DisplayOrder asc\"\n)\n\n# Get all property status lookups\nstatuses = client.lookup.get_lookups_by_name(\"PropertyStatus\")\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_modified_lookups","title":"<code>get_modified_lookups(since, **kwargs)</code>","text":"<p>Get lookups modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only lookup records that have been updated since the last sync. Useful for maintaining up-to-date lookup values and enumeration data.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date, datetime]</code> <p>ISO format datetime string, date object, or datetime object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing lookups modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get lookups modified in last month\ncutoff_time = datetime.utcnow() - timedelta(days=30)\nupdates = client.lookup.get_modified_lookups(\n    since=cutoff_time\n)\n\n# Get lookups modified since a specific date\nupdates = client.lookup.get_modified_lookups(\n    since=\"2023-01-01T00:00:00Z\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_property_status_lookups","title":"<code>get_property_status_lookups(**kwargs)</code>","text":"<p>Get property status lookup values.</p> <p>Convenience method to retrieve all property status enumeration values. Useful for understanding available property statuses in the system.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property status lookup values</p> Example <pre><code># Get all property statuses\nstatuses = client.lookup.get_property_status_lookups()\n\nfor status in statuses.get('value', []):\n    print(f\"Status: {status['LookupValue']}\")\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_property_type_lookups","title":"<code>get_property_type_lookups(**kwargs)</code>","text":"<p>Get property type lookup values.</p> <p>Convenience method to retrieve all property type enumeration values. Useful for understanding available property types in the system.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property type lookup values</p> Example <pre><code># Get all property types\nproperty_types = client.lookup.get_property_type_lookups(\n    orderby=\"DisplayOrder asc\"\n)\n\nfor prop_type in property_types.get('value', []):\n    print(f\"Property Type: {prop_type['LookupValue']}\")\n</code></pre>"},{"location":"api/lookup/#wfrmls.lookup.LookupClient.get_standard_lookups","title":"<code>get_standard_lookups(**kwargs)</code>","text":"<p>Get standard RESO lookup values.</p> <p>Convenience method to filter for standard RESO-defined lookup values. These are the core lookup values defined by the RESO standard.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing standard RESO lookup values</p> Example <pre><code># Get all standard lookups\nstandard_lookups = client.lookup.get_standard_lookups()\n\nfor lookup in standard_lookups.get('value', []):\n    print(f\"Standard Lookup: {lookup['StandardLookupValue']}\")\n</code></pre>"},{"location":"api/lookup/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/lookup/#basic-lookup-retrieval","title":"Basic Lookup Retrieval","text":"Available LookupsProperty-Related LookupsSpecific Lookup Categories <pre><code># Get all available lookup names\nlookup_names = client.lookup.get_lookup_names()\n\n# Get lookups with specific ordering\nordered_lookups = client.lookup.get_lookups(\n    orderby=\"LookupName asc\",\n    top=50\n)\n\n# Get lookup metadata\nlookup_info = client.lookup.get_lookups(\n    select=\"LookupName,LookupValue,StandardLookupValue,LookupDisplayOrder\"\n)\n</code></pre> <pre><code># Get property type values\nproperty_types = client.lookup.get_property_type_lookups()\n\n# Get property subtypes\nproperty_subtypes = client.lookup.get_lookup(\"PropertySubType\")\n\n# Get status values\nstatus_values = client.lookup.get_lookup(\"StandardStatus\")\n\n# Get property features\narchitectural_styles = client.lookup.get_lookup(\"ArchitecturalStyle\")\n</code></pre> <pre><code># Get all lookups for a specific category\nstatus_lookups = client.lookup.get_lookups(\n    filter_query=\"LookupName eq 'StandardStatus'\",\n    orderby=\"LookupDisplayOrder asc\"\n)\n\n# Get lookup values with descriptions\ncity_lookups = client.lookup.get_lookups(\n    filter_query=\"LookupName eq 'City'\",\n    select=\"LookupValue,StandardLookupValue,LookupDisplayOrder\",\n    orderby=\"LookupValue asc\"\n)\n</code></pre>"},{"location":"api/lookup/#advanced-filtering-and-search","title":"Advanced Filtering and Search","text":"Search Lookup ValuesLookup ValidationLookup Hierarchy <pre><code># Search for specific lookup values\nsalt_lake_lookups = client.lookup.get_lookups(\n    filter_query=\"contains(tolower(LookupValue), 'salt lake')\",\n    orderby=\"LookupName asc, LookupValue asc\"\n)\n\n# Find lookups with standard values\nstandard_lookups = client.lookup.get_lookups(\n    filter_query=\"StandardLookupValue ne null\",\n    select=\"LookupName,LookupValue,StandardLookupValue\"\n)\n</code></pre> <pre><code># Get valid values for validation\ndef get_valid_values(client, lookup_name):\n    lookups = client.lookup.get_lookups(\n        filter_query=f\"LookupName eq '{lookup_name}'\",\n        select=\"LookupValue,StandardLookupValue\",\n        orderby=\"LookupDisplayOrder asc\"\n    )\n\n    values = []\n    for lookup in lookups.get('value', []):\n        values.append(lookup.get('LookupValue'))\n        if lookup.get('StandardLookupValue'):\n            values.append(lookup.get('StandardLookupValue'))\n\n    return sorted(list(set(values)))  # Remove duplicates and sort\n\n# Usage\nvalid_property_types = get_valid_values(client, \"PropertyType\")\nvalid_cities = get_valid_values(client, \"City\")\n</code></pre> <pre><code># Get hierarchical lookup data\ndef get_lookup_hierarchy(client):\n    all_lookups = client.lookup.get_lookups(\n        select=\"LookupName,LookupValue,StandardLookupValue,LookupDisplayOrder\",\n        orderby=\"LookupName asc, LookupDisplayOrder asc\",\n        top=2000\n    )\n\n    hierarchy = {}\n    for lookup in all_lookups.get('value', []):\n        lookup_name = lookup.get('LookupName', 'Unknown')\n        if lookup_name not in hierarchy:\n            hierarchy[lookup_name] = []\n\n        hierarchy[lookup_name].append({\n            'value': lookup.get('LookupValue'),\n            'standard_value': lookup.get('StandardLookupValue'),\n            'display_order': lookup.get('LookupDisplayOrder', 999)\n        })\n\n    return hierarchy\n\n# Usage\nlookup_hierarchy = get_lookup_hierarchy(client)\n</code></pre>"},{"location":"api/lookup/#lookup-data-structure","title":"Lookup Data Structure","text":"<p>Lookups in WFRMLS follow the RESO standard with comprehensive reference data:</p> Key Lookup Fields <p>Lookup Identification</p> <ul> <li><code>LookupKey</code> - Unique lookup identifier</li> <li><code>LookupName</code> - Category/field name this lookup applies to</li> <li><code>LookupValue</code> - The actual lookup value</li> <li><code>StandardLookupValue</code> - RESO standard equivalent value</li> <li><code>LegacyODataValue</code> - Legacy value for compatibility</li> </ul> <p>Display and Ordering</p> <ul> <li><code>LookupDisplayOrder</code> - Sort order for display</li> <li><code>LookupDisplayName</code> - Human-friendly display name</li> <li><code>LookupShortValue</code> - Abbreviated value</li> <li><code>LookupLongValue</code> - Extended description</li> </ul> <p>Metadata</p> <ul> <li><code>LookupActive</code> - Whether the lookup is active</li> <li><code>LookupDefault</code> - Whether this is a default value</li> <li><code>LookupDescription</code> - Detailed description of the lookup</li> <li><code>LookupGroup</code> - Grouping category</li> </ul> <p>System Information</p> <ul> <li><code>ModificationTimestamp</code> - Last update time</li> <li><code>OriginalEntryTimestamp</code> - Initial creation time</li> </ul>"},{"location":"api/lookup/#integration-examples","title":"Integration Examples","text":""},{"location":"api/lookup/#dynamic-form-generation","title":"Dynamic Form Generation","text":"<pre><code>def generate_property_search_form(client):\n    \"\"\"Generate dynamic search form options from lookup data.\"\"\"\n\n    form_fields = {}\n\n    # Define the lookups we need for the form\n    form_lookups = [\n        'PropertyType',\n        'PropertySubType', \n        'StandardStatus',\n        'City',\n        'StateOrProvince',\n        'ArchitecturalStyle',\n        'Heating',\n        'Cooling'\n    ]\n\n    for lookup_name in form_lookups:\n        try:\n            lookups = client.lookup.get_lookups(\n                filter_query=f\"LookupName eq '{lookup_name}' and LookupActive eq true\",\n                select=\"LookupValue,StandardLookupValue,LookupDisplayOrder,LookupDisplayName\",\n                orderby=\"LookupDisplayOrder asc, LookupValue asc\"\n            )\n\n            options = []\n            for lookup in lookups.get('value', []):\n                display_name = lookup.get('LookupDisplayName') or lookup.get('LookupValue', '')\n                value = lookup.get('StandardLookupValue') or lookup.get('LookupValue', '')\n\n                options.append({\n                    'label': display_name,\n                    'value': value,\n                    'display_order': lookup.get('LookupDisplayOrder', 999)\n                })\n\n            form_fields[lookup_name] = sorted(options, key=lambda x: x['display_order'])\n\n        except Exception as e:\n            print(f\"Warning: Could not load lookups for {lookup_name}: {e}\")\n            form_fields[lookup_name] = []\n\n    return form_fields\n\n# Usage\nsearch_form = generate_property_search_form(client)\n\nprint(\"\ud83d\udd0d Property Search Form Options:\")\nfor field_name, options in search_form.items():\n    print(f\"\\n\ud83d\udccb {field_name} ({len(options)} options):\")\n    for option in options[:10]:  # Show first 10 options\n        print(f\"   \u2022 {option['label']} ({option['value']})\")\n    if len(options) &gt; 10:\n        print(f\"   ... and {len(options) - 10} more options\")\n</code></pre>"},{"location":"api/lookup/#data-validation-system","title":"Data Validation System","text":"<pre><code>def create_lookup_validator(client):\n    \"\"\"Create a data validation system using lookup values.\"\"\"\n\n    # Cache all lookup values for validation\n    validation_cache = {}\n\n    # Get all lookups\n    all_lookups = client.lookup.get_lookups(\n        select=\"LookupName,LookupValue,StandardLookupValue,LookupActive\",\n        top=5000\n    )\n\n    for lookup in all_lookups.get('value', []):\n        lookup_name = lookup.get('LookupName')\n        if not lookup_name:\n            continue\n\n        if lookup_name not in validation_cache:\n            validation_cache[lookup_name] = set()\n\n        # Add both regular and standard values\n        if lookup.get('LookupValue'):\n            validation_cache[lookup_name].add(lookup.get('LookupValue'))\n        if lookup.get('StandardLookupValue'):\n            validation_cache[lookup_name].add(lookup.get('StandardLookupValue'))\n\n    def validate_value(field_name, value):\n        \"\"\"Validate a value against lookup data.\"\"\"\n        if field_name not in validation_cache:\n            return {'valid': None, 'message': f'No validation data for field: {field_name}'}\n\n        valid_values = validation_cache[field_name]\n        is_valid = value in valid_values\n\n        if is_valid:\n            return {'valid': True, 'message': 'Valid value'}\n        else:\n            # Find close matches\n            close_matches = [v for v in valid_values if value.lower() in v.lower() or v.lower() in value.lower()]\n\n            return {\n                'valid': False,\n                'message': f'Invalid value: {value}',\n                'suggestions': close_matches[:5]  # Top 5 suggestions\n            }\n\n    def get_valid_values(field_name):\n        \"\"\"Get all valid values for a field.\"\"\"\n        return sorted(list(validation_cache.get(field_name, [])))\n\n    return {\n        'validate': validate_value,\n        'get_valid_values': get_valid_values,\n        'cache': validation_cache\n    }\n\n# Usage\nvalidator = create_lookup_validator(client)\n\n# Test validation\ntest_values = [\n    ('PropertyType', 'Residential'),\n    ('PropertyType', 'Invalid Type'),\n    ('City', 'Salt Lake City'),\n    ('City', 'Fake City'),\n    ('StandardStatus', 'Active')\n]\n\nprint(\"\ud83d\udd0d Data Validation Results:\")\nfor field, value in test_values:\n    result = validator['validate'](field, value)\n    status = \"\u2705\" if result['valid'] else \"\u274c\" if result['valid'] is False else \"\u2753\"\n    print(f\"{status} {field}: '{value}' - {result['message']}\")\n\n    if result.get('suggestions'):\n        print(f\"   \ud83d\udca1 Suggestions: {', '.join(result['suggestions'])}\")\n</code></pre>"},{"location":"api/lookup/#lookup-change-tracking","title":"Lookup Change Tracking","text":"<pre><code>def track_lookup_changes(client, days_back=30):\n    \"\"\"Track changes to lookup values over time.\"\"\"\n\n    from datetime import datetime, timedelta\n\n    cutoff_date = (datetime.utcnow() - timedelta(days=days_back)).isoformat() + \"Z\"\n\n    # Get recently modified lookups\n    recent_lookups = client.lookup.get_lookups(\n        filter_query=f\"ModificationTimestamp ge {cutoff_date}\",\n        select=\"LookupName,LookupValue,StandardLookupValue,ModificationTimestamp,LookupActive\",\n        orderby=\"ModificationTimestamp desc\",\n        top=500\n    )\n\n    changes = {\n        'total_changes': 0,\n        'by_lookup_name': {},\n        'recent_additions': [],\n        'recent_modifications': [],\n        'deactivations': []\n    }\n\n    for lookup in recent_lookups.get('value', []):\n        changes['total_changes'] += 1\n\n        lookup_name = lookup.get('LookupName', 'Unknown')\n        if lookup_name not in changes['by_lookup_name']:\n            changes['by_lookup_name'][lookup_name] = 0\n        changes['by_lookup_name'][lookup_name] += 1\n\n        lookup_entry = {\n            'name': lookup_name,\n            'value': lookup.get('LookupValue', ''),\n            'standard_value': lookup.get('StandardLookupValue', ''),\n            'timestamp': lookup.get('ModificationTimestamp', ''),\n            'active': lookup.get('LookupActive', True)\n        }\n\n        # Categorize the change (this is simplified - would need original entry timestamp comparison)\n        mod_time = lookup.get('ModificationTimestamp', '')\n        orig_time = lookup.get('OriginalEntryTimestamp', '')\n\n        if not lookup.get('LookupActive', True):\n            changes['deactivations'].append(lookup_entry)\n        elif mod_time == orig_time:  # Likely a new addition\n            changes['recent_additions'].append(lookup_entry)\n        else:\n            changes['recent_modifications'].append(lookup_entry)\n\n    # Sort by lookup name for better organization\n    changes['by_lookup_name'] = dict(sorted(changes['by_lookup_name'].items(), key=lambda x: x[1], reverse=True))\n\n    return changes\n\n# Usage\nlookup_changes = track_lookup_changes(client, days_back=30)\nprint(f\"\ud83d\udcca Lookup Changes (Last 30 Days) - {lookup_changes['total_changes']} total changes\")\n\nprint(f\"\\n\ud83d\udccb Changes by Lookup Type:\")\nfor lookup_name, count in lookup_changes['by_lookup_name'].items():\n    print(f\"   {lookup_name}: {count} changes\")\n\nif lookup_changes['recent_additions']:\n    print(f\"\\n\u2795 Recent Additions ({len(lookup_changes['recent_additions'])}):\")\n    for addition in lookup_changes['recent_additions'][:10]:\n        print(f\"   \u2022 {addition['name']}: {addition['value']}\")\n\nif lookup_changes['deactivations']:\n    print(f\"\\n\ud83d\udeab Recent Deactivations ({len(lookup_changes['deactivations'])}):\")\n    for deactivation in lookup_changes['deactivations'][:10]:\n        print(f\"   \u2022 {deactivation['name']}: {deactivation['value']}\")\n</code></pre>"},{"location":"api/lookup/#lookup-data-export","title":"Lookup Data Export","text":"<pre><code>def export_lookup_data(client, format='json'):\n    \"\"\"Export all lookup data for external use.\"\"\"\n\n    # Get all active lookups\n    all_lookups = client.lookup.get_lookups(\n        filter_query=\"LookupActive eq true\",\n        select=\"LookupName,LookupValue,StandardLookupValue,LookupDisplayOrder,LookupDisplayName\",\n        orderby=\"LookupName asc, LookupDisplayOrder asc\",\n        top=5000\n    )\n\n    if format == 'json':\n        # Organize as nested JSON\n        export_data = {}\n        for lookup in all_lookups.get('value', []):\n            lookup_name = lookup.get('LookupName', 'Unknown')\n            if lookup_name not in export_data:\n                export_data[lookup_name] = []\n\n            export_data[lookup_name].append({\n                'value': lookup.get('LookupValue'),\n                'standard_value': lookup.get('StandardLookupValue'),\n                'display_name': lookup.get('LookupDisplayName'),\n                'display_order': lookup.get('LookupDisplayOrder')\n            })\n\n        return export_data\n\n    elif format == 'csv':\n        # Flat CSV format\n        import csv\n        import io\n\n        output = io.StringIO()\n        writer = csv.writer(output)\n\n        # Write header\n        writer.writerow(['LookupName', 'LookupValue', 'StandardLookupValue', 'DisplayName', 'DisplayOrder'])\n\n        # Write data\n        for lookup in all_lookups.get('value', []):\n            writer.writerow([\n                lookup.get('LookupName', ''),\n                lookup.get('LookupValue', ''),\n                lookup.get('StandardLookupValue', ''),\n                lookup.get('LookupDisplayName', ''),\n                lookup.get('LookupDisplayOrder', '')\n            ])\n\n        return output.getvalue()\n\n    elif format == 'summary':\n        # Summary statistics\n        summary = {'total_lookups': 0, 'by_category': {}}\n\n        for lookup in all_lookups.get('value', []):\n            summary['total_lookups'] += 1\n\n            lookup_name = lookup.get('LookupName', 'Unknown')\n            if lookup_name not in summary['by_category']:\n                summary['by_category'][lookup_name] = 0\n            summary['by_category'][lookup_name] += 1\n\n        summary['by_category'] = dict(sorted(summary['by_category'].items(), key=lambda x: x[1], reverse=True))\n        return summary\n\n# Usage examples\nprint(\"\ud83d\udce4 Exporting Lookup Data...\")\n\n# Get summary\nsummary = export_lookup_data(client, format='summary')\nprint(f\"\ud83d\udcca Lookup Summary: {summary['total_lookups']} total lookup values\")\nprint(f\"\ud83c\udff7\ufe0f Top Categories:\")\nfor category, count in list(summary['by_category'].items())[:10]:\n    print(f\"   {category}: {count} values\")\n\n# Export as JSON (example of first few categories)\njson_data = export_lookup_data(client, format='json')\nprint(f\"\\n\ud83d\udcbe JSON Export Sample:\")\nfor category in list(json_data.keys())[:3]:\n    print(f\"   {category}: {len(json_data[category])} values\")\n    for value in json_data[category][:3]:\n        print(f\"     \u2022 {value['display_name'] or value['value']}\")\n</code></pre>"},{"location":"api/lookup/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError\n\ntry:\n    # Try to get lookup values\n    property_types = client.lookup.get_property_type_lookups()\n\nexcept NotFoundError:\n    print(\"\u274c Lookup data not found\")\n\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid lookup request: {e}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Unexpected error: {e}\")\n</code></pre>"},{"location":"api/lookup/#performance-tips","title":"Performance Tips","text":"<p>Optimization Strategies</p> <p>Efficient Queries</p> <ul> <li>Lookup data changes infrequently - cache results for extended periods</li> <li>Use <code>filter_query</code> to get only active lookups: <code>LookupActive eq true</code></li> <li>Use <code>select</code> to limit fields when you only need values for validation</li> </ul> <p>Common Patterns</p> <pre><code># Get lookup values for dropdown lists\ndropdown_values = client.lookup.get_lookups(\n    filter_query=\"LookupName eq 'PropertyType' and LookupActive eq true\",\n    select=\"LookupValue,LookupDisplayName,LookupDisplayOrder\",\n    orderby=\"LookupDisplayOrder asc\"\n)\n\n# Validate field values efficiently\nvalid_statuses = client.lookup.get_lookups(\n    filter_query=\"LookupName eq 'StandardStatus'\",\n    select=\"LookupValue,StandardLookupValue\"\n)\n</code></pre> <p>Caching Considerations</p> <ul> <li>Lookup values rarely change - safe to cache for hours or days</li> <li>Build validation caches on application startup</li> <li>Monitor <code>ModificationTimestamp</code> to detect lookup changes</li> <li>Cache by lookup category for faster access </li> </ul>"},{"location":"api/members/","title":"Members API","text":"<p>The Members API provides access to real estate agent and broker information, including contact details, office affiliations, and licensing data. Members represent the professionals in the MLS system who list and sell properties.</p> <p>Quick Start</p> <pre><code># Get active members (agents/brokers)\nmembers = client.member.get_active_members(top=50)\n\n# Get a specific member with office info\nmember_detail = client.member.get_member_with_office(\"12345\")\n\n# Search for members by name\nagents = client.member.get_members(\n    filter_query=\"contains(MemberFirstName, 'John')\",\n    top=25\n)\n</code></pre>"},{"location":"api/members/#member-client","title":"Member Client","text":""},{"location":"api/members/#wfrmls.member.MemberClient","title":"<code>wfrmls.member.MemberClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for member (real estate agent) API endpoints.</p> <p>The Member resource contains information about real estate agents, brokers, and other MLS participants. This includes contact information, license details, and office affiliations.</p>"},{"location":"api/members/#wfrmls.member.MemberClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the member client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/members/#wfrmls.member.MemberClient.get_active_members","title":"<code>get_active_members(**kwargs)</code>","text":"<p>Get members with Active status.</p> <p>Convenience method to retrieve only active members. This filters out inactive, suspended, or terminated agents/brokers.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing active member listings</p> Example <pre><code># Get all active members\nactive_members = client.member.get_active_members(top=100)\n\n# Get active members with specific fields\nactive_members = client.member.get_active_members(\n    select=[\"MemberKey\", \"MemberFirstName\", \"MemberLastName\", \"MemberPhone\"],\n    orderby=\"MemberLastName\"\n)\n</code></pre>"},{"location":"api/members/#wfrmls.member.MemberClient.get_member","title":"<code>get_member(member_key)</code>","text":"<p>Get member by member key.</p> <p>Retrieves a single member record by its unique member key. This is the most efficient way to get detailed information about a specific agent or broker.</p> <p>Parameters:</p> Name Type Description Default <code>member_key</code> <code>str</code> <p>Member key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing member data for the specified member</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the member with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific member by key\nmember = client.member.get_member(\"12345\")\n\nprint(f\"Agent: {member['MemberFirstName']} {member['MemberLastName']}\")\nprint(f\"Email: {member['MemberEmail']}\")\n</code></pre>"},{"location":"api/members/#wfrmls.member.MemberClient.get_members","title":"<code>get_members(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get members with optional OData filtering.</p> <p>This method retrieves member (agent/broker) information with full OData v4.0 query support.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing member data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of member records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get first 10 active members\nmembers = client.member.get_members(\n    top=10,\n    filter_query=\"MemberStatus eq 'Active'\"\n)\n\n# Get members with office info\nmembers = client.member.get_members(\n    expand=\"Office\",\n    top=50\n)\n\n# Get members with specific fields only\nmembers = client.member.get_members(\n    select=[\"MemberKey\", \"MemberFirstName\", \"MemberLastName\", \"MemberEmail\"],\n    top=100\n)\n</code></pre>"},{"location":"api/members/#wfrmls.member.MemberClient.get_members_by_office","title":"<code>get_members_by_office(office_key, **kwargs)</code>","text":"<p>Get members affiliated with a specific office.</p> <p>Convenience method to filter members by their office affiliation. Useful for getting all agents/brokers in a particular brokerage.</p> <p>Parameters:</p> Name Type Description Default <code>office_key</code> <code>str</code> <p>Office key to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing members affiliated with the specified office</p> Example <pre><code># Get all members in a specific office\noffice_members = client.member.get_members_by_office(\n    office_key=\"12345\",\n    top=100\n)\n\n# Get active members in an office\nactive_office_members = client.member.get_members_by_office(\n    office_key=\"12345\",\n    filter_query=\"MemberStatus eq 'Active'\",\n    orderby=\"MemberLastName\"\n)\n</code></pre>"},{"location":"api/members/#wfrmls.member.MemberClient.get_members_with_office","title":"<code>get_members_with_office(**kwargs)</code>","text":"<p>Get members with their office information expanded.</p> <p>This is a convenience method that automatically expands the Office relationship to include office details in the response. More efficient than making separate requests for members and their offices.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing member data with expanded Office relationships</p> Example <pre><code># Get active members with office info\nmembers = client.member.get_members_with_office(\n    filter_query=\"MemberStatus eq 'Active'\",\n    top=25\n)\n\n# Access office info for first member\nfirst_member = members['value'][0]\nif 'Office' in first_member:\n    office_info = first_member['Office']\n    print(f\"Member works at: {office_info['OfficeName']}\")\n</code></pre>"},{"location":"api/members/#wfrmls.member.MemberClient.get_modified_members","title":"<code>get_modified_members(since, **kwargs)</code>","text":"<p>Get members modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only member records that have been updated since the last sync. Essential for maintaining up-to-date agent/broker information.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date]</code> <p>ISO format datetime string or date object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing members modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get members modified in last 15 minutes (recommended sync interval)\ncutoff_time = datetime.utcnow() - timedelta(minutes=15)\nupdates = client.member.get_modified_members(\n    since=cutoff_time.isoformat() + \"Z\"\n)\n\n# Get members modified since yesterday\nyesterday = datetime.utcnow() - timedelta(days=1)\nupdates = client.member.get_modified_members(\n    since=yesterday.isoformat() + \"Z\"\n)\n</code></pre>"},{"location":"api/members/#wfrmls.member.MemberClient.search_members_by_name","title":"<code>search_members_by_name(first_name=None, last_name=None, **kwargs)</code>","text":"<p>Search members by first name and/or last name.</p> <p>Convenience method to find agents/brokers by name using partial matching. Uses OData string functions for flexible name searching.</p> <p>Parameters:</p> Name Type Description Default <code>first_name</code> <code>Optional[str]</code> <p>First name to search for (partial matching)</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>Last name to search for (partial matching)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing members matching the name criteria</p> Example <pre><code># Search by last name only\nsmiths = client.member.search_members_by_name(\n    last_name=\"Smith\",\n    top=50\n)\n\n# Search by first and last name\njohns = client.member.search_members_by_name(\n    first_name=\"John\",\n    last_name=\"Smith\"\n)\n</code></pre>"},{"location":"api/members/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/members/#basic-member-retrieval","title":"Basic Member Retrieval","text":"Active MembersMember DetailsMember Search <pre><code># Get all active members\nactive_members = client.member.get_active_members(top=100)\n\n# Get active members ordered by last name\nmembers_by_name = client.member.get_active_members(\n    orderby=\"MemberLastName asc\",\n    top=50\n)\n</code></pre> <pre><code># Get a specific member by key\nmember = client.member.get_member(\"12345\")\n\n# Get member with office information\nmember_with_office = client.member.get_member_with_office(\"12345\")\n\n# Get member with full expansion\nmember_expanded = client.member.get_member_with_expansion(\n    member_key=\"12345\",\n    expand=\"Office,Property\"\n)\n</code></pre> <pre><code># Search by name\njohns = client.member.get_members(\n    filter_query=\"contains(MemberFirstName, 'John')\",\n    top=25\n)\n\n# Search by last name\nsmiths = client.member.get_members(\n    filter_query=\"contains(MemberLastName, 'Smith')\",\n    orderby=\"MemberFirstName asc\"\n)\n</code></pre>"},{"location":"api/members/#advanced-filtering","title":"Advanced Filtering","text":"Office AffiliationLicense and StatusContact Information <pre><code># Members from specific office\noffice_members = client.member.get_members(\n    filter_query=\"MemberOfficeKey eq '67890'\",\n    orderby=\"MemberLastName asc\"\n)\n\n# Members with office information\nmembers_with_offices = client.member.get_members_with_office(\n    filter_query=\"MemberStatus eq 'Active'\",\n    top=100\n)\n</code></pre> <pre><code># Active licensed agents\nlicensed_agents = client.member.get_members(\n    filter_query=\"MemberStatus eq 'Active' and MemberStateLicense ne null\",\n    select=\"MemberKey,MemberFirstName,MemberLastName,MemberStateLicense,MemberType\"\n)\n\n# Brokers only\nbrokers = client.member.get_members(\n    filter_query=\"MemberType eq 'Broker'\",\n    orderby=\"MemberLastName asc\"\n)\n</code></pre> <pre><code># Members with email addresses\nmembers_with_email = client.member.get_members(\n    filter_query=\"MemberEmail ne null\",\n    select=\"MemberKey,MemberFirstName,MemberLastName,MemberEmail\"\n)\n\n# Members with direct phone numbers\nmembers_with_phone = client.member.get_members(\n    filter_query=\"MemberDirectPhone ne null\",\n    select=\"MemberKey,MemberFirstName,MemberLastName,MemberDirectPhone\"\n)\n</code></pre>"},{"location":"api/members/#member-data-structure","title":"Member Data Structure","text":"<p>Members in WFRMLS follow the RESO standard with comprehensive professional information:</p> Key Member Fields <p>Identification</p> <ul> <li><code>MemberKey</code> - Unique member identifier</li> <li><code>MemberMlsId</code> - MLS-specific member ID</li> <li><code>MemberNationalAssociationId</code> - National association ID</li> <li><code>MemberStateLicense</code> - State license number</li> </ul> <p>Personal Information</p> <ul> <li><code>MemberFirstName</code>, <code>MemberLastName</code> - Agent's name</li> <li><code>MemberFullName</code> - Complete name</li> <li><code>MemberNickname</code> - Preferred name</li> <li><code>MemberPreferredFirstName</code> - Preferred first name</li> </ul> <p>Contact Details</p> <ul> <li><code>MemberEmail</code> - Primary email address</li> <li><code>MemberDirectPhone</code> - Direct phone number</li> <li><code>MemberMobilePhone</code> - Mobile phone number</li> <li><code>MemberOfficePhone</code> - Office phone number</li> <li><code>MemberFax</code> - Fax number</li> </ul> <p>Professional Information</p> <ul> <li><code>MemberType</code> - Agent, Broker, Assistant, etc.</li> <li><code>MemberStatus</code> - Active, Inactive, Suspended, etc.</li> <li><code>MemberDesignation</code> - Professional designations (CRS, GRI, etc.)</li> <li><code>MemberOfficeKey</code> - Associated office identifier</li> </ul> <p>System Information</p> <ul> <li><code>ModificationTimestamp</code> - Last update time</li> <li><code>MemberLoginId</code> - Login identifier</li> <li><code>OriginalEntryTimestamp</code> - Initial creation time</li> </ul>"},{"location":"api/members/#integration-examples","title":"Integration Examples","text":""},{"location":"api/members/#agent-directory","title":"Agent Directory","text":"<pre><code>def create_agent_directory(client, office_key=None):\n    \"\"\"Create a directory of active agents.\"\"\"\n\n    # Build filter for active agents\n    filters = [\"MemberStatus eq 'Active'\", \"MemberType eq 'Agent'\"]\n\n    if office_key:\n        filters.append(f\"MemberOfficeKey eq '{office_key}'\")\n\n    filter_query = \" and \".join(filters)\n\n    # Get agents with office information\n    agents = client.member.get_members_with_office(\n        filter_query=filter_query,\n        select=\"MemberKey,MemberFirstName,MemberLastName,MemberEmail,MemberDirectPhone,OfficeKey,OfficeName\",\n        orderby=\"MemberLastName asc, MemberFirstName asc\",\n        top=500\n    )\n\n    # Organize by office\n    directory = {}\n    for agent in agents.get('value', []):\n        office_name = agent.get('OfficeName', 'Unknown Office')\n        if office_name not in directory:\n            directory[office_name] = []\n\n        directory[office_name].append({\n            'name': f\"{agent.get('MemberFirstName', '')} {agent.get('MemberLastName', '')}\".strip(),\n            'email': agent.get('MemberEmail'),\n            'phone': agent.get('MemberDirectPhone'),\n            'member_key': agent.get('MemberKey')\n        })\n\n    return directory\n\n# Usage\nagent_directory = create_agent_directory(client)\nfor office, agents in agent_directory.items():\n    print(f\"\\n\ud83c\udfe2 {office} ({len(agents)} agents)\")\n    for agent in agents[:5]:  # Show first 5 agents\n        print(f\"   \ud83d\udc64 {agent['name']} - {agent['email']}\")\n</code></pre>"},{"location":"api/members/#top-producers-report","title":"Top Producers Report","text":"<pre><code>def get_top_producers(client, days_back=30):\n    \"\"\"Get top producing agents based on recent listings.\"\"\"\n\n    from datetime import datetime, timedelta\n    cutoff_date = (datetime.utcnow() - timedelta(days=days_back)).strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\n    # Get recent listings with agent info\n    recent_listings = client.property.get_properties(\n        filter_query=f\"ListingContractDate ge {cutoff_date}\",\n        select=\"ListingId,ListAgentKey,ListPrice,ListingContractDate\",\n        top=1000\n    )\n\n    # Count listings per agent\n    agent_stats = {}\n    for listing in recent_listings.get('value', []):\n        agent_key = listing.get('ListAgentKey')\n        if agent_key:\n            if agent_key not in agent_stats:\n                agent_stats[agent_key] = {\n                    'listing_count': 0,\n                    'total_volume': 0,\n                    'avg_price': 0\n                }\n\n            agent_stats[agent_key]['listing_count'] += 1\n            list_price = listing.get('ListPrice', 0)\n            agent_stats[agent_key]['total_volume'] += list_price\n\n    # Calculate averages and get agent details\n    top_producers = []\n    for agent_key, stats in agent_stats.items():\n        if stats['listing_count'] &gt;= 2:  # Minimum 2 listings\n            stats['avg_price'] = stats['total_volume'] / stats['listing_count']\n\n            # Get agent details\n            try:\n                agent_detail = client.member.get_member_with_office(agent_key)\n                if agent_detail:\n                    top_producers.append({\n                        'agent_key': agent_key,\n                        'name': f\"{agent_detail.get('MemberFirstName', '')} {agent_detail.get('MemberLastName', '')}\".strip(),\n                        'office': agent_detail.get('OfficeName', 'Unknown'),\n                        'listings': stats['listing_count'],\n                        'volume': stats['total_volume'],\n                        'avg_price': stats['avg_price']\n                    })\n            except:\n                continue\n\n    # Sort by listing count\n    top_producers.sort(key=lambda x: x['listings'], reverse=True)\n    return top_producers[:20]  # Top 20\n\n# Usage\ntop_agents = get_top_producers(client, days_back=30)\nprint(\"\ud83c\udfc6 Top Producers (Last 30 Days)\")\nfor i, agent in enumerate(top_agents, 1):\n    print(f\"{i:2d}. {agent['name']} ({agent['office']})\")\n    print(f\"    \ud83d\udccb {agent['listings']} listings | \ud83d\udcb0 ${agent['volume']:,.0f} volume | \ud83d\udcca ${agent['avg_price']:,.0f} avg\")\n</code></pre>"},{"location":"api/members/#member-contact-validation","title":"Member Contact Validation","text":"<pre><code>def validate_member_contacts(client, office_key=None):\n    \"\"\"Validate member contact information completeness.\"\"\"\n\n    # Get members with contact fields\n    filter_query = \"MemberStatus eq 'Active'\"\n    if office_key:\n        filter_query += f\" and MemberOfficeKey eq '{office_key}'\"\n\n    members = client.member.get_members(\n        filter_query=filter_query,\n        select=\"MemberKey,MemberFirstName,MemberLastName,MemberEmail,MemberDirectPhone,MemberMobilePhone\",\n        top=500\n    )\n\n    validation_report = {\n        'total_members': 0,\n        'missing_email': [],\n        'missing_phone': [],\n        'complete_profiles': 0\n    }\n\n    for member in members.get('value', []):\n        validation_report['total_members'] += 1\n\n        name = f\"{member.get('MemberFirstName', '')} {member.get('MemberLastName', '')}\".strip()\n        email = member.get('MemberEmail')\n        direct_phone = member.get('MemberDirectPhone')\n        mobile_phone = member.get('MemberMobilePhone')\n\n        missing_info = []\n\n        if not email:\n            missing_info.append('email')\n            validation_report['missing_email'].append(name)\n\n        if not direct_phone and not mobile_phone:\n            missing_info.append('phone')\n            validation_report['missing_phone'].append(name)\n\n        if not missing_info:\n            validation_report['complete_profiles'] += 1\n\n    return validation_report\n\n# Usage\ncontact_report = validate_member_contacts(client)\nprint(f\"\ud83d\udcca Contact Validation Report\")\nprint(f\"   Total Active Members: {contact_report['total_members']}\")\nprint(f\"   Complete Profiles: {contact_report['complete_profiles']} ({contact_report['complete_profiles']/contact_report['total_members']*100:.1f}%)\")\nprint(f\"   Missing Email: {len(contact_report['missing_email'])} members\")\nprint(f\"   Missing Phone: {len(contact_report['missing_phone'])} members\")\n</code></pre>"},{"location":"api/members/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError\n\ntry:\n    # Try to get a member\n    member = client.member.get_member(\"12345\")\n\nexcept NotFoundError:\n    print(\"\u274c Member not found - the member key may be incorrect or the member may be inactive\")\n\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid search parameters: {e}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Unexpected error: {e}\")\n</code></pre>"},{"location":"api/members/#performance-tips","title":"Performance Tips","text":"<p>Optimization Strategies</p> <p>Efficient Queries</p> <ul> <li>Filter by <code>MemberStatus eq 'Active'</code> to get only current members</li> <li>Use <code>select</code> to limit fields when you don't need full member details</li> <li>Order by <code>MemberLastName</code> for alphabetical sorting</li> </ul> <p>Common Patterns</p> <pre><code># Get essential member info only\nbasic_members = client.member.get_members(\n    filter_query=\"MemberStatus eq 'Active'\",\n    select=\"MemberKey,MemberFirstName,MemberLastName,MemberEmail\",\n    orderby=\"MemberLastName asc\"\n)\n\n# Search members efficiently\nmember_search = client.member.get_members(\n    filter_query=\"contains(tolower(MemberLastName), 'smith')\",\n    select=\"MemberKey,MemberFirstName,MemberLastName,MemberOfficeKey\"\n)\n</code></pre> <p>Caching Considerations</p> <ul> <li>Member data changes less frequently than property data</li> <li>Cache member details for frequently accessed agents</li> <li>Use <code>ModificationTimestamp</code> to detect member profile changes </li> </ul>"},{"location":"api/offices/","title":"Offices API","text":"<p>The Offices API provides access to real estate office and brokerage information, including contact details, addresses, and licensing information. Offices represent the companies and brokerages that members (agents/brokers) work for.</p> <p>Quick Start</p> <pre><code># Get active offices\noffices = client.office.get_active_offices(top=50)\n\n# Get a specific office with member info\noffice_detail = client.office.get_office_with_members(\"67890\")\n\n# Search for offices by name\noffices = client.office.get_offices(\n    filter_query=\"contains(OfficeName, 'Realty')\",\n    top=25\n)\n</code></pre>"},{"location":"api/offices/#office-client","title":"Office Client","text":""},{"location":"api/offices/#wfrmls.office.OfficeClient","title":"<code>wfrmls.office.OfficeClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for office (real estate brokerage) API endpoints.</p> <p>The Office resource contains information about real estate brokerages, including contact information, addresses, and licensing details.</p>"},{"location":"api/offices/#wfrmls.office.OfficeClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the office client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_active_offices","title":"<code>get_active_offices(**kwargs)</code>","text":"<p>Get offices with Active status.</p> <p>Convenience method to retrieve only active offices. This filters out inactive, suspended, or terminated brokerages.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing active office listings</p> Example <pre><code># Get all active offices\nactive_offices = client.office.get_active_offices(top=100)\n\n# Get active offices with specific fields\nactive_offices = client.office.get_active_offices(\n    select=[\"OfficeKey\", \"OfficeName\", \"OfficePhone\", \"OfficeCity\"],\n    orderby=\"OfficeName\"\n)\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_modified_offices","title":"<code>get_modified_offices(since, **kwargs)</code>","text":"<p>Get offices modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only office records that have been updated since the last sync. Essential for maintaining up-to-date brokerage information.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date]</code> <p>ISO format datetime string or date object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing offices modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get offices modified in last 15 minutes (recommended sync interval)\ncutoff_time = datetime.utcnow() - timedelta(minutes=15)\nupdates = client.office.get_modified_offices(\n    since=cutoff_time.isoformat() + \"Z\"\n)\n\n# Get offices modified since yesterday\nyesterday = datetime.utcnow() - timedelta(days=1)\nupdates = client.office.get_modified_offices(\n    since=yesterday.isoformat() + \"Z\"\n)\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_office","title":"<code>get_office(office_key)</code>","text":"<p>Get office by office key.</p> <p>Retrieves a single office record by its unique office key. This is the most efficient way to get detailed information about a specific brokerage.</p> <p>Parameters:</p> Name Type Description Default <code>office_key</code> <code>str</code> <p>Office key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing office data for the specified office</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the office with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific office by key\noffice = client.office.get_office(\"12345\")\n\nprint(f\"Office: {office['OfficeName']}\")\nprint(f\"Phone: {office['OfficePhone']}\")\nprint(f\"Address: {office['OfficeAddress']}\")\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_offices","title":"<code>get_offices(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get offices with optional OData filtering.</p> <p>This method retrieves office (brokerage) information with full OData v4.0 query support.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing office data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of office records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get first 10 active offices\noffices = client.office.get_offices(\n    top=10,\n    filter_query=\"OfficeStatus eq 'Active'\"\n)\n\n# Get offices with member info\noffices = client.office.get_offices(\n    expand=\"Member\",\n    top=50\n)\n\n# Get offices with specific fields only\noffices = client.office.get_offices(\n    select=[\"OfficeKey\", \"OfficeName\", \"OfficePhone\", \"OfficeEmail\"],\n    top=100\n)\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_offices_by_city","title":"<code>get_offices_by_city(city, **kwargs)</code>","text":"<p>Get offices in a specific city.</p> <p>Convenience method to filter offices by city name. Useful for location-specific brokerage searches.</p> <p>Parameters:</p> Name Type Description Default <code>city</code> <code>str</code> <p>City name to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing offices in the specified city</p> Example <pre><code># Get offices in Salt Lake City\noffices = client.office.get_offices_by_city(\n    city=\"Salt Lake City\",\n    top=100\n)\n\n# Get active offices in Provo\noffices = client.office.get_offices_by_city(\n    city=\"Provo\",\n    filter_query=\"OfficeStatus eq 'Active'\",\n    orderby=\"OfficeName\"\n)\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_offices_by_zipcode","title":"<code>get_offices_by_zipcode(zipcode, **kwargs)</code>","text":"<p>Get offices in a specific ZIP code.</p> <p>Convenience method to filter offices by postal code. Useful for geographic-based brokerage searches.</p> <p>Parameters:</p> Name Type Description Default <code>zipcode</code> <code>str</code> <p>ZIP/postal code to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing offices in the specified ZIP code</p> Example <pre><code># Get offices in ZIP code 84101 (downtown Salt Lake City)\noffices = client.office.get_offices_by_zipcode(\n    zipcode=\"84101\",\n    top=50\n)\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.get_offices_with_members","title":"<code>get_offices_with_members(**kwargs)</code>","text":"<p>Get offices with their member information expanded.</p> <p>This is a convenience method that automatically expands the Member relationship to include agent/broker details in the response. More efficient than making separate requests for offices and their members.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing office data with expanded Member relationships</p> Example <pre><code># Get active offices with member info\noffices = client.office.get_offices_with_members(\n    filter_query=\"OfficeStatus eq 'Active'\",\n    top=25\n)\n\n# Access members for first office\nfirst_office = offices['value'][0]\nif 'Member' in first_office:\n    members = first_office['Member']\n    print(f\"Office has {len(members)} members\")\n</code></pre>"},{"location":"api/offices/#wfrmls.office.OfficeClient.search_offices_by_name","title":"<code>search_offices_by_name(name, **kwargs)</code>","text":"<p>Search offices by name using partial matching.</p> <p>Convenience method to find brokerages by name using partial matching. Uses OData string functions for flexible name searching.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Office name to search for (partial matching)</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing offices matching the name criteria</p> Example <pre><code># Search for offices with \"Realty\" in the name\nrealty_offices = client.office.search_offices_by_name(\n    name=\"Realty\",\n    top=50\n)\n\n# Search for Coldwell Banker offices\ncb_offices = client.office.search_offices_by_name(\n    name=\"Coldwell Banker\"\n)\n</code></pre>"},{"location":"api/offices/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/offices/#basic-office-retrieval","title":"Basic Office Retrieval","text":"Active OfficesOffice DetailsOffice Search <pre><code># Get all active offices\nactive_offices = client.office.get_active_offices(top=100)\n\n# Get active offices ordered by name\noffices_by_name = client.office.get_active_offices(\n    orderby=\"OfficeName asc\",\n    top=50\n)\n</code></pre> <pre><code># Get a specific office by key\noffice = client.office.get_office(\"67890\")\n\n# Get office with member information\noffice_with_members = client.office.get_office_with_members(\"67890\")\n\n# Get office with full expansion\noffice_expanded = client.office.get_office_with_expansion(\n    office_key=\"67890\",\n    expand=\"Member,Property\"\n)\n</code></pre> <pre><code># Search by office name\nrealty_offices = client.office.get_offices(\n    filter_query=\"contains(OfficeName, 'Realty')\",\n    orderby=\"OfficeName asc\"\n)\n\n# Search by city\nslc_offices = client.office.get_offices(\n    filter_query=\"contains(OfficeCity, 'Salt Lake')\",\n    orderby=\"OfficeName asc\"\n)\n</code></pre>"},{"location":"api/offices/#advanced-filtering","title":"Advanced Filtering","text":"Location-BasedContact InformationOffice Status and Type <pre><code># Offices in specific city\npark_city_offices = client.office.get_offices(\n    filter_query=\"OfficeCity eq 'Park City'\",\n    orderby=\"OfficeName asc\"\n)\n\n# Offices by state/province\nutah_offices = client.office.get_offices(\n    filter_query=\"OfficeStateOrProvince eq 'UT'\",\n    select=\"OfficeKey,OfficeName,OfficeCity,OfficePhone\"\n)\n\n# Offices by postal code\ndowntown_offices = client.office.get_offices(\n    filter_query=\"startswith(OfficePostalCode, '84101')\",\n    top=25\n)\n</code></pre> <pre><code># Offices with email addresses\noffices_with_email = client.office.get_offices(\n    filter_query=\"OfficeEmail ne null\",\n    select=\"OfficeKey,OfficeName,OfficeEmail,OfficePhone\"\n)\n\n# Offices with websites\noffices_with_web = client.office.get_offices(\n    filter_query=\"OfficeURL ne null\",\n    select=\"OfficeKey,OfficeName,OfficeURL\"\n)\n</code></pre> <pre><code># Active offices only\nactive_offices = client.office.get_offices(\n    filter_query=\"OfficeStatus eq 'Active'\",\n    orderby=\"OfficeName asc\"\n)\n\n# Offices by type (if available)\nfranchise_offices = client.office.get_offices(\n    filter_query=\"contains(OfficeName, 'Realty') or contains(OfficeName, 'Century')\",\n    top=50\n)\n</code></pre>"},{"location":"api/offices/#office-data-structure","title":"Office Data Structure","text":"<p>Offices in WFRMLS follow the RESO standard with comprehensive business information:</p> Key Office Fields <p>Identification</p> <ul> <li><code>OfficeKey</code> - Unique office identifier</li> <li><code>OfficeMlsId</code> - MLS-specific office ID</li> <li><code>OfficeNationalAssociationId</code> - National association ID</li> <li><code>OfficeBrokerLicense</code> - Broker license number</li> </ul> <p>Business Information</p> <ul> <li><code>OfficeName</code> - Office/brokerage name</li> <li><code>OfficeStatus</code> - Active, Inactive, etc.</li> <li><code>OfficeType</code> - Office classification</li> <li><code>FranchiseAffiliation</code> - Franchise information</li> </ul> <p>Contact Details</p> <ul> <li><code>OfficePhone</code> - Main phone number</li> <li><code>OfficeFax</code> - Fax number</li> <li><code>OfficeEmail</code> - Primary email address</li> <li><code>OfficeURL</code> - Website URL</li> </ul> <p>Address Information</p> <ul> <li><code>OfficeAddress1</code>, <code>OfficeAddress2</code> - Street address</li> <li><code>OfficeCity</code> - City name</li> <li><code>OfficeStateOrProvince</code> - State/province</li> <li><code>OfficePostalCode</code> - Postal/ZIP code</li> <li><code>OfficeCountry</code> - Country code</li> </ul> <p>System Information</p> <ul> <li><code>ModificationTimestamp</code> - Last update time</li> <li><code>OriginalEntryTimestamp</code> - Initial creation time</li> </ul>"},{"location":"api/offices/#integration-examples","title":"Integration Examples","text":""},{"location":"api/offices/#office-directory-with-agent-counts","title":"Office Directory with Agent Counts","text":"<pre><code>def create_office_directory(client):\n    \"\"\"Create a comprehensive office directory with agent counts.\"\"\"\n\n    # Get active offices\n    offices = client.office.get_active_offices(\n        select=\"OfficeKey,OfficeName,OfficePhone,OfficeEmail,OfficeCity,OfficeStateOrProvince\",\n        orderby=\"OfficeName asc\",\n        top=500\n    )\n\n    # Get member counts per office\n    members = client.member.get_active_members(\n        select=\"MemberKey,MemberOfficeKey\",\n        top=2000\n    )\n\n    # Count members per office\n    member_counts = {}\n    for member in members.get('value', []):\n        office_key = member.get('MemberOfficeKey')\n        if office_key:\n            member_counts[office_key] = member_counts.get(office_key, 0) + 1\n\n    # Build directory\n    directory = []\n    for office in offices.get('value', []):\n        office_key = office.get('OfficeKey')\n        agent_count = member_counts.get(office_key, 0)\n\n        directory.append({\n            'office_key': office_key,\n            'name': office.get('OfficeName', 'Unknown'),\n            'phone': office.get('OfficePhone'),\n            'email': office.get('OfficeEmail'),\n            'city': office.get('OfficeCity'),\n            'state': office.get('OfficeStateOrProvince'),\n            'agent_count': agent_count\n        })\n\n    # Sort by agent count (largest first)\n    directory.sort(key=lambda x: x['agent_count'], reverse=True)\n    return directory\n\n# Usage\noffice_directory = create_office_directory(client)\nprint(\"\ud83c\udfe2 Office Directory (by agent count)\")\nfor i, office in enumerate(office_directory[:20], 1):\n    print(f\"{i:2d}. {office['name']} ({office['city']}, {office['state']})\")\n    print(f\"    \ud83d\udc65 {office['agent_count']} agents | \ud83d\udcde {office['phone']} | \ud83d\udce7 {office['email']}\")\n</code></pre>"},{"location":"api/offices/#market-coverage-analysis","title":"Market Coverage Analysis","text":"<pre><code>def analyze_market_coverage(client):\n    \"\"\"Analyze office coverage across different markets.\"\"\"\n\n    # Get all active offices with location info\n    offices = client.office.get_active_offices(\n        select=\"OfficeKey,OfficeName,OfficeCity,OfficeStateOrProvince,OfficePostalCode\",\n        top=1000\n    )\n\n    # Analyze by city\n    city_coverage = {}\n    zip_coverage = {}\n\n    for office in offices.get('value', []):\n        city = office.get('OfficeCity', 'Unknown')\n        zip_code = office.get('OfficePostalCode', 'Unknown')[:5]  # First 5 digits\n\n        # Count by city\n        if city not in city_coverage:\n            city_coverage[city] = {'office_count': 0, 'offices': []}\n        city_coverage[city]['office_count'] += 1\n        city_coverage[city]['offices'].append(office.get('OfficeName', 'Unknown'))\n\n        # Count by ZIP code\n        if zip_code not in zip_coverage:\n            zip_coverage[zip_code] = {'office_count': 0, 'city': city}\n        zip_coverage[zip_code]['office_count'] += 1\n\n    # Sort results\n    top_cities = sorted(city_coverage.items(), key=lambda x: x[1]['office_count'], reverse=True)\n    top_zips = sorted(zip_coverage.items(), key=lambda x: x[1]['office_count'], reverse=True)\n\n    return {\n        'cities': top_cities[:15],\n        'zip_codes': top_zips[:15],\n        'total_offices': len(offices.get('value', []))\n    }\n\n# Usage\nmarket_analysis = analyze_market_coverage(client)\nprint(f\"\ud83d\udcca Market Coverage Analysis ({market_analysis['total_offices']} offices)\")\n\nprint(\"\\n\ud83c\udfd9\ufe0f Top Cities by Office Count:\")\nfor city, data in market_analysis['cities']:\n    print(f\"   {city}: {data['office_count']} offices\")\n\nprint(\"\\n\ud83d\udcee Top ZIP Codes by Office Count:\")\nfor zip_code, data in market_analysis['zip_codes']:\n    print(f\"   {zip_code} ({data['city']}): {data['office_count']} offices\")\n</code></pre>"},{"location":"api/offices/#office-contact-audit","title":"Office Contact Audit","text":"<pre><code>def audit_office_contacts(client):\n    \"\"\"Audit office contact information completeness.\"\"\"\n\n    # Get all active offices with contact fields\n    offices = client.office.get_active_offices(\n        select=\"OfficeKey,OfficeName,OfficePhone,OfficeEmail,OfficeURL,OfficeCity\",\n        top=500\n    )\n\n    audit_results = {\n        'total_offices': 0,\n        'complete_contacts': 0,\n        'missing_phone': [],\n        'missing_email': [],\n        'missing_website': [],\n        'no_contact_info': []\n    }\n\n    for office in offices.get('value', []):\n        audit_results['total_offices'] += 1\n\n        name = office.get('OfficeName', 'Unknown')\n        city = office.get('OfficeCity', 'Unknown')\n        office_display = f\"{name} ({city})\"\n\n        phone = office.get('OfficePhone')\n        email = office.get('OfficeEmail')\n        website = office.get('OfficeURL')\n\n        missing_contacts = []\n\n        if not phone:\n            missing_contacts.append('phone')\n            audit_results['missing_phone'].append(office_display)\n\n        if not email:\n            missing_contacts.append('email')\n            audit_results['missing_email'].append(office_display)\n\n        if not website:\n            missing_contacts.append('website')\n            audit_results['missing_website'].append(office_display)\n\n        if len(missing_contacts) == 3:  # Missing all contact info\n            audit_results['no_contact_info'].append(office_display)\n        elif len(missing_contacts) == 0:  # Has all contact info\n            audit_results['complete_contacts'] += 1\n\n    return audit_results\n\n# Usage\ncontact_audit = audit_office_contacts(client)\nprint(\"\ud83d\udccb Office Contact Information Audit\")\nprint(f\"   Total Offices: {contact_audit['total_offices']}\")\nprint(f\"   Complete Contact Info: {contact_audit['complete_contacts']} ({contact_audit['complete_contacts']/contact_audit['total_offices']*100:.1f}%)\")\nprint(f\"   Missing Phone: {len(contact_audit['missing_phone'])} offices\")\nprint(f\"   Missing Email: {len(contact_audit['missing_email'])} offices\")\nprint(f\"   Missing Website: {len(contact_audit['missing_website'])} offices\")\nprint(f\"   No Contact Info: {len(contact_audit['no_contact_info'])} offices\")\n\nif contact_audit['no_contact_info']:\n    print(f\"\\n\u26a0\ufe0f  Offices with no contact information:\")\n    for office in contact_audit['no_contact_info'][:10]:\n        print(f\"   - {office}\")\n</code></pre>"},{"location":"api/offices/#office-performance-metrics","title":"Office Performance Metrics","text":"<pre><code>def calculate_office_metrics(client, days_back=30):\n    \"\"\"Calculate performance metrics for offices based on listings.\"\"\"\n\n    from datetime import datetime, timedelta\n    cutoff_date = (datetime.utcnow() - timedelta(days=days_back)).strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\n    # Get recent listings\n    recent_listings = client.property.get_properties(\n        filter_query=f\"ListingContractDate ge {cutoff_date}\",\n        select=\"ListingId,ListOfficeKey,ListPrice,PropertySubType\",\n        top=2000\n    )\n\n    # Calculate metrics per office\n    office_metrics = {}\n    for listing in recent_listings.get('value', []):\n        office_key = listing.get('ListOfficeKey')\n        if office_key:\n            if office_key not in office_metrics:\n                office_metrics[office_key] = {\n                    'listing_count': 0,\n                    'total_volume': 0,\n                    'property_types': {}\n                }\n\n            office_metrics[office_key]['listing_count'] += 1\n\n            list_price = listing.get('ListPrice', 0)\n            office_metrics[office_key]['total_volume'] += list_price\n\n            prop_type = listing.get('PropertySubType', 'Unknown')\n            office_metrics[office_key]['property_types'][prop_type] = office_metrics[office_key]['property_types'].get(prop_type, 0) + 1\n\n    # Get office details and combine with metrics\n    office_performance = []\n    for office_key, metrics in office_metrics.items():\n        if metrics['listing_count'] &gt;= 3:  # Minimum 3 listings\n            try:\n                office_detail = client.office.get_office(office_key)\n                if office_detail:\n                    avg_price = metrics['total_volume'] / metrics['listing_count']\n\n                    office_performance.append({\n                        'office_key': office_key,\n                        'name': office_detail.get('OfficeName', 'Unknown'),\n                        'city': office_detail.get('OfficeCity', 'Unknown'),\n                        'listings': metrics['listing_count'],\n                        'volume': metrics['total_volume'],\n                        'avg_price': avg_price,\n                        'property_types': metrics['property_types']\n                    })\n            except:\n                continue\n\n    # Sort by listing volume\n    office_performance.sort(key=lambda x: x['volume'], reverse=True)\n    return office_performance[:25]  # Top 25\n\n# Usage\noffice_metrics = calculate_office_metrics(client, days_back=30)\nprint(\"\ud83d\udcc8 Top Performing Offices (Last 30 Days)\")\nfor i, office in enumerate(office_metrics, 1):\n    print(f\"{i:2d}. {office['name']} ({office['city']})\")\n    print(f\"    \ud83d\udccb {office['listings']} listings | \ud83d\udcb0 ${office['volume']:,.0f} volume | \ud83d\udcca ${office['avg_price']:,.0f} avg\")\n\n    # Show top property types\n    top_types = sorted(office['property_types'].items(), key=lambda x: x[1], reverse=True)[:3]\n    type_summary = \", \".join([f\"{ptype} ({count})\" for ptype, count in top_types])\n    print(f\"    \ud83c\udfe0 Top types: {type_summary}\")\n</code></pre>"},{"location":"api/offices/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError\n\ntry:\n    # Try to get an office\n    office = client.office.get_office(\"67890\")\n\nexcept NotFoundError:\n    print(\"\u274c Office not found - the office key may be incorrect or the office may be inactive\")\n\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid search parameters: {e}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Unexpected error: {e}\")\n</code></pre>"},{"location":"api/offices/#performance-tips","title":"Performance Tips","text":"<p>Optimization Strategies</p> <p>Efficient Queries</p> <ul> <li>Filter by <code>OfficeStatus eq 'Active'</code> to get only current offices</li> <li>Use <code>select</code> to limit fields when you don't need full office details</li> <li>Order by <code>OfficeName</code> for alphabetical sorting</li> </ul> <p>Common Patterns</p> <pre><code># Get essential office info only\nbasic_offices = client.office.get_offices(\n    filter_query=\"OfficeStatus eq 'Active'\",\n    select=\"OfficeKey,OfficeName,OfficeCity,OfficePhone\",\n    orderby=\"OfficeName asc\"\n)\n\n# Search offices efficiently\noffice_search = client.office.get_offices(\n    filter_query=\"contains(tolower(OfficeName), 'realty')\",\n    select=\"OfficeKey,OfficeName,OfficeCity,OfficeStateOrProvince\"\n)\n</code></pre> <p>Caching Considerations</p> <ul> <li>Office data changes infrequently</li> <li>Cache office directories for extended periods</li> <li>Use <code>ModificationTimestamp</code> to detect office information changes </li> </ul>"},{"location":"api/openhouse/","title":"Open Houses API","text":"<p>The Open Houses API provides access to open house schedules, events, and showing information. This is essential for finding upcoming open houses, managing showing schedules, and tracking property viewing events.</p> <p>Quick Start</p> <pre><code># Get upcoming open houses\nopen_houses = client.openhouse.get_upcoming_open_houses(days_ahead=7)\n\n# Get open houses for a specific property\nproperty_opens = client.openhouse.get_open_houses_for_property(\"1611952\")\n\n# Get open houses by agent\nagent_opens = client.openhouse.get_open_houses_by_agent(\"96422\")\n</code></pre>"},{"location":"api/openhouse/#open-house-client","title":"Open House Client","text":""},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient","title":"<code>wfrmls.openhouse.OpenHouseClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for open house schedule API endpoints.</p> <p>The OpenHouse resource contains information about scheduled open house events, including dates, times, showing agents, and related property information. All timestamps are in UTC format.</p>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the open house client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_active_open_houses","title":"<code>get_active_open_houses(**kwargs)</code>","text":"<p>Get open houses with Active status.</p> <p>Convenience method to retrieve only active open houses. Filters out ended, cancelled, or expired open house events.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing active open house listings</p> Example <pre><code># Get all active open houses\nactive_opens = client.openhouse.get_active_open_houses(\n    orderby=\"OpenHouseStartTime asc\",\n    top=100\n)\n\n# Get active open houses with property details\nactive_with_props = client.openhouse.get_active_open_houses(\n    expand=\"Property\",\n    select=[\"OpenHouseKey\", \"ListingKey\", \"OpenHouseStartTime\", \"OpenHouseStatus\"],\n    top=50\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_modified_open_houses","title":"<code>get_modified_open_houses(since, **kwargs)</code>","text":"<p>Get open houses modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only open house records that have been updated since the last sync. Essential for maintaining up-to-date scheduling information.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date, datetime]</code> <p>ISO format datetime string, date object, or datetime object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open houses modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get open houses modified in last 15 minutes (recommended sync interval)\ncutoff_time = datetime.utcnow() - timedelta(minutes=15)\nupdates = client.openhouse.get_modified_open_houses(\n    since=cutoff_time\n)\n\n# Get open houses modified since yesterday\nyesterday = datetime.utcnow() - timedelta(days=1)\nupdates = client.openhouse.get_modified_open_houses(\n    since=yesterday,\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_open_house","title":"<code>get_open_house(open_house_key)</code>","text":"<p>Get open house by open house key.</p> <p>Retrieves a single open house record by its unique open house key. This is the most efficient way to get detailed information about a specific open house event.</p> <p>Parameters:</p> Name Type Description Default <code>open_house_key</code> <code>str</code> <p>Open house key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open house data for the specified event</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the open house with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific open house by key\nopen_house = client.openhouse.get_open_house(\"306227\")\n\nprint(f\"Open House: {open_house['OpenHouseStartTime']} - {open_house['OpenHouseEndTime']}\")\nprint(f\"Property: {open_house['ListingKey']}\")\nprint(f\"Agent: {open_house['ShowingAgentFirstName']} {open_house['ShowingAgentLastName']}\")\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_open_houses","title":"<code>get_open_houses(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get open houses with optional OData filtering.</p> <p>This method retrieves open house schedule information with full OData v4.0 query support. All timestamps are returned in UTC format.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open house data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of open house records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get upcoming open houses\nopen_houses = client.openhouse.get_open_houses(\n    filter_query=\"OpenHouseStartTime gt '2023-12-01T00:00:00Z'\",\n    orderby=\"OpenHouseStartTime asc\",\n    top=50\n)\n\n# Get open houses with property info\nopen_houses = client.openhouse.get_open_houses(\n    expand=\"Property\",\n    top=25\n)\n\n# Get open houses with specific fields only\nopen_houses = client.openhouse.get_open_houses(\n    select=[\"OpenHouseKey\", \"ListingKey\", \"OpenHouseStartTime\", \"OpenHouseEndTime\"],\n    top=100\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_open_houses_by_agent","title":"<code>get_open_houses_by_agent(agent_key, **kwargs)</code>","text":"<p>Get open houses by showing agent.</p> <p>Convenience method to filter open houses by the agent conducting them. Useful for finding all open houses managed by a specific agent.</p> <p>Parameters:</p> Name Type Description Default <code>agent_key</code> <code>str</code> <p>Showing agent key to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open houses for the specified agent</p> Example <pre><code># Get all open houses for an agent\nagent_opens = client.openhouse.get_open_houses_by_agent(\n    agent_key=\"96422\",\n    orderby=\"OpenHouseStartTime asc\",\n    top=100\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_open_houses_by_date_range","title":"<code>get_open_houses_by_date_range(start_date, end_date, **kwargs)</code>","text":"<p>Get open houses within a specific date range.</p> <p>Convenience method to retrieve open houses scheduled between two dates.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>Union[str, date, datetime]</code> <p>Start date for the range (ISO format string, date, or datetime object)</p> required <code>end_date</code> <code>Union[str, date, datetime]</code> <p>End date for the range (ISO format string, date, or datetime object)</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open houses within the specified date range</p> Example <pre><code>from datetime import date\n\n# Get open houses for January 2024\nstart_date = date(2024, 1, 1)\nend_date = date(2024, 1, 31)\nopens = client.openhouse.get_open_houses_by_date_range(\n    start_date=start_date,\n    end_date=end_date\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_open_houses_for_property","title":"<code>get_open_houses_for_property(listing_key, **kwargs)</code>","text":"<p>Get open houses for a specific property.</p> <p>Convenience method to filter open houses by property listing key. Useful for finding all scheduled showings for a particular property.</p> <p>Parameters:</p> Name Type Description Default <code>listing_key</code> <code>str</code> <p>Property listing key to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open houses for the specified property</p> Example <pre><code># Get all open houses for a property\nproperty_opens = client.openhouse.get_open_houses_for_property(\n    listing_key=\"1625740\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n\n# Get upcoming open houses for property\nupcoming_opens = client.openhouse.get_open_houses_for_property(\n    listing_key=\"1625740\",\n    filter_query=\"OpenHouseStartTime gt '2023-12-01T00:00:00Z'\"\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_open_houses_with_property","title":"<code>get_open_houses_with_property(**kwargs)</code>","text":"<p>Get open houses with their property information expanded.</p> <p>This is a convenience method that automatically expands the Property relationship to include property details in the response. More efficient than making separate requests for open houses and their properties.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing open house data with expanded Property relationships</p> Example <pre><code># Get upcoming open houses with property info\nopens_with_props = client.openhouse.get_open_houses_with_property(\n    filter_query=\"OpenHouseStartTime gt '2023-12-01T00:00:00Z'\",\n    orderby=\"OpenHouseStartTime asc\",\n    top=25\n)\n\n# Access property info for first open house\nfirst_open = opens_with_props['value'][0]\nif 'Property' in first_open:\n    property_info = first_open['Property']\n    print(f\"Open house for: {property_info['UnparsedAddress']}\")\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_upcoming_open_houses","title":"<code>get_upcoming_open_houses(days_ahead=7, **kwargs)</code>","text":"<p>Get upcoming open houses.</p> <p>Convenience method to retrieve open houses scheduled for the near future.</p> <p>Parameters:</p> Name Type Description Default <code>days_ahead</code> <code>Optional[int]</code> <p>Number of days ahead to search (default: 7)</p> <code>7</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing upcoming open house listings</p> Example <pre><code># Get open houses for next 3 days\nupcoming = client.openhouse.get_upcoming_open_houses(\n    days_ahead=3,\n    orderby=\"OpenHouseStartTime asc\",\n    top=50\n)\n\n# Get this week's open houses\nweekend_opens = client.openhouse.get_upcoming_open_houses(\n    days_ahead=7,\n    expand=\"Property\",\n    select=[\"OpenHouseKey\", \"ListingKey\", \"OpenHouseStartTime\", \"OpenHouseEndTime\"]\n)\n</code></pre>"},{"location":"api/openhouse/#wfrmls.openhouse.OpenHouseClient.get_weekend_open_houses","title":"<code>get_weekend_open_houses(weeks_ahead=2, **kwargs)</code>","text":"<p>Get weekend open houses.</p> <p>Convenience method to retrieve open houses scheduled for weekends.</p> <p>Parameters:</p> Name Type Description Default <code>weeks_ahead</code> <code>Optional[int]</code> <p>Number of weeks ahead to search (default: 2)</p> <code>2</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing weekend open house listings</p> Example <pre><code># Get open houses for next 2 weekends\nweekend_opens = client.openhouse.get_weekend_open_houses(\n    weeks_ahead=2,\n    orderby=\"OpenHouseStartTime asc\"\n)\n</code></pre>"},{"location":"api/openhouse/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/openhouse/#basic-open-house-retrieval","title":"Basic Open House Retrieval","text":"Upcoming EventsProperty-SpecificAgent-Specific <pre><code># Get open houses for the next 7 days\nupcoming = client.openhouse.get_upcoming_open_houses(days_ahead=7)\n\n# Get this weekend's open houses\nweekend = client.openhouse.get_upcoming_open_houses(\n    days_ahead=7,\n    orderby=\"OpenHouseStartTime asc\"\n)\n\n# Get today's open houses\ntoday = client.openhouse.get_todays_open_houses()\n</code></pre> <pre><code># Get all open houses for a property\nproperty_opens = client.openhouse.get_open_houses_for_property(\"1611952\")\n\n# Get future open houses for a property\nfuture_opens = client.openhouse.get_open_houses(\n    filter_query=f\"ListingId eq '1611952' and OpenHouseStartTime ge {datetime.utcnow().isoformat()}Z\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n</code></pre> <pre><code># Get open houses by agent\nagent_opens = client.openhouse.get_open_houses_by_agent(\"96422\")\n\n# Get agent's upcoming open houses\nagent_upcoming = client.openhouse.get_open_houses(\n    filter_query=\"ListAgentKey eq '96422' and OpenHouseStartTime ge now()\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n</code></pre>"},{"location":"api/openhouse/#advanced-filtering","title":"Advanced Filtering","text":"Date and Time FiltersLocation-BasedProperty Type Filters <pre><code>from datetime import datetime, timedelta\n\n# Open houses this weekend (Saturday-Sunday)\nsaturday = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)\nwhile saturday.weekday() != 5:  # Find next Saturday\n    saturday += timedelta(days=1)\nsunday = saturday + timedelta(days=1)\n\nweekend_opens = client.openhouse.get_open_houses(\n    filter_query=f\"OpenHouseStartTime ge {saturday.isoformat()}Z and OpenHouseStartTime le {sunday.isoformat()}Z\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n\n# Morning open houses (before noon)\nmorning_opens = client.openhouse.get_open_houses(\n    filter_query=\"hour(OpenHouseStartTime) lt 12\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n</code></pre> <pre><code># Open houses in specific city\nslc_opens = client.openhouse.get_open_houses_with_property(\n    filter_query=\"City eq 'Salt Lake City'\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n\n# Open houses in price range\nluxury_opens = client.openhouse.get_open_houses_with_property(\n    filter_query=\"ListPrice ge 1000000\",\n    orderby=\"ListPrice desc\"\n)\n</code></pre> <pre><code># Single family home open houses\nsfh_opens = client.openhouse.get_open_houses_with_property(\n    filter_query=\"PropertySubType eq 'Single Family Residence'\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n\n# Condo open houses\ncondo_opens = client.openhouse.get_open_houses_with_property(\n    filter_query=\"PropertySubType eq 'Condominium'\",\n    orderby=\"ListPrice asc\"\n)\n</code></pre>"},{"location":"api/openhouse/#open-house-data-structure","title":"Open House Data Structure","text":"<p>Open Houses in WFRMLS follow the RESO standard with comprehensive event information:</p> Key Open House Fields <p>Event Information</p> <ul> <li><code>OpenHouseKey</code> - Unique open house identifier</li> <li><code>OpenHouseStartTime</code> - Start date and time</li> <li><code>OpenHouseEndTime</code> - End date and time</li> <li><code>OpenHouseDate</code> - Date of the open house</li> <li><code>OpenHouseStartDateTime</code> - Combined start date/time</li> <li><code>OpenHouseEndDateTime</code> - Combined end date/time</li> </ul> <p>Property Association</p> <ul> <li><code>ListingId</code> - Associated property listing ID</li> <li><code>ListingKey</code> - Associated property key</li> <li><code>PropertyKey</code> - Property identifier</li> </ul> <p>Agent/Office Information</p> <ul> <li><code>ListAgentKey</code> - Listing agent identifier</li> <li><code>ListOfficeKey</code> - Listing office identifier</li> <li><code>ShowingAgentKey</code> - Showing agent (if different)</li> <li><code>ShowingOfficeKey</code> - Showing office (if different)</li> </ul> <p>Event Details</p> <ul> <li><code>OpenHouseType</code> - Type of open house event</li> <li><code>OpenHouseRemarks</code> - Special instructions or notes</li> <li><code>ShowingContactType</code> - Contact method for showing</li> <li><code>ShowingInstructions</code> - Instructions for attendees</li> </ul> <p>System Information</p> <ul> <li><code>ModificationTimestamp</code> - Last update time</li> <li><code>OriginalEntryTimestamp</code> - Initial creation time</li> </ul>"},{"location":"api/openhouse/#integration-examples","title":"Integration Examples","text":""},{"location":"api/openhouse/#weekend-open-house-schedule","title":"Weekend Open House Schedule","text":"<pre><code>def get_weekend_open_house_schedule(client):\n    \"\"\"Generate a weekend open house schedule organized by time and location.\"\"\"\n\n    from datetime import datetime, timedelta\n\n    # Find next Saturday and Sunday\n    today = datetime.now()\n    saturday = today.replace(hour=0, minute=0, second=0, microsecond=0)\n    while saturday.weekday() != 5:  # Find next Saturday\n        saturday += timedelta(days=1)\n    sunday = saturday + timedelta(days=1)\n    monday = sunday + timedelta(days=1)\n\n    # Get weekend open houses with property info\n    weekend_opens = client.openhouse.get_open_houses_with_property(\n        filter_query=f\"OpenHouseStartTime ge {saturday.isoformat()}Z and OpenHouseStartTime lt {monday.isoformat()}Z\",\n        select=\"OpenHouseKey,OpenHouseStartTime,OpenHouseEndTime,ListingId,Address,City,ListPrice,BedroomsTotal,BathroomsTotalInteger,PropertySubType\",\n        orderby=\"OpenHouseStartTime asc, City asc\"\n    )\n\n    # Organize by day and time\n    schedule = {\n        'Saturday': [],\n        'Sunday': []\n    }\n\n    for open_house in weekend_opens.get('value', []):\n        start_time = datetime.fromisoformat(open_house.get('OpenHouseStartTime', '').replace('Z', '+00:00'))\n        end_time = datetime.fromisoformat(open_house.get('OpenHouseEndTime', '').replace('Z', '+00:00'))\n\n        day = 'Saturday' if start_time.weekday() == 5 else 'Sunday'\n\n        schedule[day].append({\n            'time': f\"{start_time.strftime('%I:%M %p')} - {end_time.strftime('%I:%M %p')}\",\n            'address': open_house.get('Address', 'Unknown Address'),\n            'city': open_house.get('City', 'Unknown City'),\n            'price': open_house.get('ListPrice', 0),\n            'bedrooms': open_house.get('BedroomsTotal', 0),\n            'bathrooms': open_house.get('BathroomsTotalInteger', 0),\n            'property_type': open_house.get('PropertySubType', 'Unknown'),\n            'listing_id': open_house.get('ListingId', '')\n        })\n\n    return schedule\n\n# Usage\nweekend_schedule = get_weekend_open_house_schedule(client)\nfor day, opens in weekend_schedule.items():\n    print(f\"\\n\ud83d\udcc5 {day} Open Houses ({len(opens)} events)\")\n    for open_house in opens:\n        print(f\"\u23f0 {open_house['time']}\")\n        print(f\"   \ud83c\udfe0 {open_house['address']}, {open_house['city']}\")\n        print(f\"   \ud83d\udcb0 ${open_house['price']:,} | \ud83d\udecf\ufe0f {open_house['bedrooms']} bed | \ud83d\udec1 {open_house['bathrooms']} bath\")\n        print(f\"   \ud83d\udccb {open_house['property_type']} | ID: {open_house['listing_id']}\")\n</code></pre>"},{"location":"api/openhouse/#agent-open-house-management","title":"Agent Open House Management","text":"<pre><code>def get_agent_open_house_dashboard(client, agent_key):\n    \"\"\"Create an open house management dashboard for an agent.\"\"\"\n\n    from datetime import datetime, timedelta\n\n    # Get agent's upcoming open houses\n    upcoming_opens = client.openhouse.get_open_houses_by_agent(\n        agent_key,\n        filter_query=f\"OpenHouseStartTime ge {datetime.utcnow().isoformat()}Z\",\n        orderby=\"OpenHouseStartTime asc\"\n    )\n\n    # Get agent's past open houses (last 30 days)\n    thirty_days_ago = (datetime.utcnow() - timedelta(days=30)).isoformat() + \"Z\"\n    past_opens = client.openhouse.get_open_houses_by_agent(\n        agent_key,\n        filter_query=f\"OpenHouseStartTime ge {thirty_days_ago} and OpenHouseStartTime lt {datetime.utcnow().isoformat()}Z\",\n        orderby=\"OpenHouseStartTime desc\"\n    )\n\n    # Get agent details\n    try:\n        agent_detail = client.member.get_member(agent_key)\n        agent_name = f\"{agent_detail.get('MemberFirstName', '')} {agent_detail.get('MemberLastName', '')}\".strip()\n    except:\n        agent_name = f\"Agent {agent_key}\"\n\n    dashboard = {\n        'agent_name': agent_name,\n        'upcoming_count': len(upcoming_opens.get('value', [])),\n        'past_count': len(past_opens.get('value', [])),\n        'upcoming_events': [],\n        'past_events': []\n    }\n\n    # Process upcoming events\n    for event in upcoming_opens.get('value', []):\n        start_time = datetime.fromisoformat(event.get('OpenHouseStartTime', '').replace('Z', '+00:00'))\n        dashboard['upcoming_events'].append({\n            'date': start_time.strftime('%A, %B %d'),\n            'time': start_time.strftime('%I:%M %p'),\n            'listing_id': event.get('ListingId', ''),\n            'days_from_now': (start_time.date() - datetime.now().date()).days\n        })\n\n    # Process past events\n    for event in past_opens.get('value', []):\n        start_time = datetime.fromisoformat(event.get('OpenHouseStartTime', '').replace('Z', '+00:00'))\n        dashboard['past_events'].append({\n            'date': start_time.strftime('%B %d'),\n            'listing_id': event.get('ListingId', ''),\n            'days_ago': (datetime.now().date() - start_time.date()).days\n        })\n\n    return dashboard\n\n# Usage\nagent_dashboard = get_agent_open_house_dashboard(client, \"96422\")\nprint(f\"\ud83c\udfe0 Open House Dashboard for {agent_dashboard['agent_name']}\")\nprint(f\"   \ud83d\udcc5 Upcoming: {agent_dashboard['upcoming_count']} events\")\nprint(f\"   \ud83d\udcc8 Past 30 days: {agent_dashboard['past_count']} events\")\n\nprint(f\"\\n\ud83d\udd2e Upcoming Open Houses:\")\nfor event in agent_dashboard['upcoming_events'][:5]:\n    urgency = \"\ud83d\udea8\" if event['days_from_now'] &lt;= 1 else \"\u23f0\"\n    print(f\"   {urgency} {event['date']} at {event['time']} - Property {event['listing_id']}\")\n</code></pre>"},{"location":"api/openhouse/#open-house-performance-analytics","title":"Open House Performance Analytics","text":"<pre><code>def analyze_open_house_patterns(client, days_back=90):\n    \"\"\"Analyze open house patterns and performance.\"\"\"\n\n    from datetime import datetime, timedelta\n    from collections import defaultdict\n\n    cutoff_date = (datetime.utcnow() - timedelta(days=days_back)).isoformat() + \"Z\"\n\n    # Get recent open houses with property info\n    recent_opens = client.openhouse.get_open_houses_with_property(\n        filter_query=f\"OpenHouseStartTime ge {cutoff_date}\",\n        select=\"OpenHouseKey,OpenHouseStartTime,ListingId,City,ListPrice,PropertySubType,ListAgentKey\",\n        top=1000\n    )\n\n    analysis = {\n        'total_events': 0,\n        'by_day_of_week': defaultdict(int),\n        'by_hour': defaultdict(int),\n        'by_city': defaultdict(int),\n        'by_price_range': defaultdict(int),\n        'by_property_type': defaultdict(int),\n        'top_agents': defaultdict(int)\n    }\n\n    price_ranges = [\n        (0, 300000, \"Under $300K\"),\n        (300000, 500000, \"$300K-$500K\"),\n        (500000, 750000, \"$500K-$750K\"),\n        (750000, 1000000, \"$750K-$1M\"),\n        (1000000, 2000000, \"$1M-$2M\"),\n        (2000000, float('inf'), \"Over $2M\")\n    ]\n\n    for event in recent_opens.get('value', []):\n        analysis['total_events'] += 1\n\n        # Parse start time\n        start_time = datetime.fromisoformat(event.get('OpenHouseStartTime', '').replace('Z', '+00:00'))\n\n        # Day of week analysis\n        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        day_name = day_names[start_time.weekday()]\n        analysis['by_day_of_week'][day_name] += 1\n\n        # Hour analysis\n        hour = start_time.hour\n        time_period = f\"{hour:02d}:00\"\n        analysis['by_hour'][time_period] += 1\n\n        # City analysis\n        city = event.get('City', 'Unknown')\n        analysis['by_city'][city] += 1\n\n        # Price range analysis\n        list_price = event.get('ListPrice', 0)\n        for min_price, max_price, range_label in price_ranges:\n            if min_price &lt;= list_price &lt; max_price:\n                analysis['by_price_range'][range_label] += 1\n                break\n\n        # Property type analysis\n        prop_type = event.get('PropertySubType', 'Unknown')\n        analysis['by_property_type'][prop_type] += 1\n\n        # Agent analysis\n        agent_key = event.get('ListAgentKey')\n        if agent_key:\n            analysis['top_agents'][agent_key] += 1\n\n    # Sort results\n    analysis['by_day_of_week'] = dict(sorted(analysis['by_day_of_week'].items(), key=lambda x: x[1], reverse=True))\n    analysis['by_hour'] = dict(sorted(analysis['by_hour'].items()))\n    analysis['by_city'] = dict(sorted(analysis['by_city'].items(), key=lambda x: x[1], reverse=True)[:10])\n    analysis['by_price_range'] = dict(sorted(analysis['by_price_range'].items(), key=lambda x: x[1], reverse=True))\n    analysis['by_property_type'] = dict(sorted(analysis['by_property_type'].items(), key=lambda x: x[1], reverse=True))\n    analysis['top_agents'] = dict(sorted(analysis['top_agents'].items(), key=lambda x: x[1], reverse=True)[:10])\n\n    return analysis\n\n# Usage\noh_analysis = analyze_open_house_patterns(client, days_back=90)\nprint(f\"\ud83d\udcca Open House Analysis (Last 90 Days) - {oh_analysis['total_events']} events\")\n\nprint(f\"\\n\ud83d\udcc5 Popular Days:\")\nfor day, count in oh_analysis['by_day_of_week'].items():\n    percentage = (count / oh_analysis['total_events']) * 100\n    print(f\"   {day}: {count} events ({percentage:.1f}%)\")\n\nprint(f\"\\n\u23f0 Popular Times:\")\nfor hour, count in list(oh_analysis['by_hour'].items())[:10]:\n    print(f\"   {hour}: {count} events\")\n\nprint(f\"\\n\ud83c\udfd9\ufe0f Top Cities:\")\nfor city, count in oh_analysis['by_city'].items():\n    print(f\"   {city}: {count} events\")\n</code></pre>"},{"location":"api/openhouse/#open-house-reminder-system","title":"Open House Reminder System","text":"<pre><code>def get_open_house_reminders(client, agent_key=None, days_ahead=3):\n    \"\"\"Get open house reminders for upcoming events.\"\"\"\n\n    from datetime import datetime, timedelta\n\n    end_date = (datetime.utcnow() + timedelta(days=days_ahead)).isoformat() + \"Z\"\n\n    # Build filter\n    filter_parts = [f\"OpenHouseStartTime ge {datetime.utcnow().isoformat()}Z\"]\n    filter_parts.append(f\"OpenHouseStartTime le {end_date}\")\n\n    if agent_key:\n        filter_parts.append(f\"ListAgentKey eq '{agent_key}'\")\n\n    filter_query = \" and \".join(filter_parts)\n\n    # Get upcoming open houses with property details\n    upcoming_opens = client.openhouse.get_open_houses_with_property(\n        filter_query=filter_query,\n        select=\"OpenHouseKey,OpenHouseStartTime,OpenHouseEndTime,ListingId,Address,City,ListAgentKey,PropertySubType\",\n        orderby=\"OpenHouseStartTime asc\"\n    )\n\n    reminders = []\n    for event in upcoming_opens.get('value', []):\n        start_time = datetime.fromisoformat(event.get('OpenHouseStartTime', '').replace('Z', '+00:00'))\n        end_time = datetime.fromisoformat(event.get('OpenHouseEndTime', '').replace('Z', '+00:00'))\n\n        hours_until = (start_time - datetime.now()).total_seconds() / 3600\n\n        # Determine urgency\n        if hours_until &lt;= 2:\n            urgency = \"\ud83d\udea8 IMMEDIATE\"\n        elif hours_until &lt;= 24:\n            urgency = \"\u26a0\ufe0f TODAY\"\n        elif hours_until &lt;= 48:\n            urgency = \"\ud83d\udcc5 TOMORROW\"\n        else:\n            urgency = \"\ud83d\udd14 UPCOMING\"\n\n        reminders.append({\n            'urgency': urgency,\n            'hours_until': hours_until,\n            'start_time': start_time.strftime('%A, %B %d at %I:%M %p'),\n            'duration': f\"{(end_time - start_time).seconds // 3600}h {((end_time - start_time).seconds % 3600) // 60}m\",\n            'address': event.get('Address', 'Unknown Address'),\n            'city': event.get('City', 'Unknown City'),\n            'listing_id': event.get('ListingId', ''),\n            'property_type': event.get('PropertySubType', 'Unknown'),\n            'agent_key': event.get('ListAgentKey', '')\n        })\n\n    return sorted(reminders, key=lambda x: x['hours_until'])\n\n# Usage\nreminders = get_open_house_reminders(client, days_ahead=3)\nprint(f\"\ud83d\udd14 Open House Reminders ({len(reminders)} upcoming events)\")\n\nfor reminder in reminders:\n    print(f\"\\n{reminder['urgency']}\")\n    print(f\"   \ud83d\udcc5 {reminder['start_time']} ({reminder['duration']})\")\n    print(f\"   \ud83c\udfe0 {reminder['address']}, {reminder['city']}\")\n    print(f\"   \ud83d\udccb {reminder['property_type']} | ID: {reminder['listing_id']}\")\n    print(f\"   \u23f1\ufe0f In {reminder['hours_until']:.1f} hours\")\n</code></pre>"},{"location":"api/openhouse/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError\n\ntry:\n    # Try to get open houses for a property\n    open_houses = client.openhouse.get_open_houses_for_property(\"1611952\")\n\nexcept NotFoundError:\n    print(\"\u274c Property not found or has no open houses scheduled\")\n\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid search parameters: {e}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Unexpected error: {e}\")\n</code></pre>"},{"location":"api/openhouse/#performance-tips","title":"Performance Tips","text":"<p>Optimization Strategies</p> <p>Efficient Queries</p> <ul> <li>Use date range filters to limit results to relevant time periods</li> <li>Filter by agent or property to get targeted results</li> <li>Use <code>select</code> to limit fields when you don't need full event details</li> </ul> <p>Common Patterns</p> <pre><code># Get essential open house info only\nbasic_opens = client.openhouse.get_open_houses(\n    filter_query=\"OpenHouseStartTime ge now()\",\n    select=\"OpenHouseKey,OpenHouseStartTime,ListingId,ListAgentKey\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n\n# Search efficiently by time range\nweekend_opens = client.openhouse.get_open_houses(\n    filter_query=\"OpenHouseStartTime ge '2024-01-20T00:00:00Z' and OpenHouseStartTime le '2024-01-21T23:59:59Z'\",\n    orderby=\"OpenHouseStartTime asc\"\n)\n</code></pre> <p>Caching Considerations</p> <ul> <li>Open house schedules change frequently</li> <li>Cache upcoming events for short periods (1-4 hours)</li> <li>Refresh data more frequently as event time approaches </li> </ul>"},{"location":"api/properties/","title":"Property API","text":"<p>The Property API provides comprehensive access to property listings, search functionality, and property details. This is the primary resource for real estate data in the WFRMLS system.</p> <p>Quick Start</p> <pre><code># Get active properties\nproperties = client.property.get_active_properties(top=50)\n\n# Search by location\nnearby = client.property.search_properties_by_radius(\n    latitude=40.7608, longitude=-111.8910, radius_miles=10\n)\n\n# Get property details\nproperty_detail = client.property.get_property(\"12345678\")\n</code></pre>"},{"location":"api/properties/#property-client","title":"Property Client","text":""},{"location":"api/properties/#wfrmls.properties.PropertyClient","title":"<code>wfrmls.properties.PropertyClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for property API endpoints.</p> <p>The Property resource is the primary resource in the WFRMLS API, containing real estate listing data including property details, pricing, and location information. This client provides access to all property-related endpoints with comprehensive OData query support.</p>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the property client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_active_properties","title":"<code>get_active_properties(**kwargs)</code>","text":"<p>Get properties with Active status.</p> <p>Convenience method to retrieve only active property listings. This is one of the most common queries for real estate applications.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing active property listings</p> Example <pre><code># Get all active properties\nactive_properties = client.property.get_active_properties(top=100)\n\n# Get active properties with specific fields\nactive_properties = client.property.get_active_properties(\n    select=[\"ListingId\", \"ListPrice\", \"UnparsedAddress\"],\n    orderby=\"ListPrice\"\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_all_properties_paginated","title":"<code>get_all_properties_paginated(page_size=200, max_pages=None, **kwargs)</code>","text":"<p>Get all properties using efficient pagination.</p> <p>This method automatically handles pagination to retrieve large datasets efficiently. Uses the recommended approach of fetching in chunks rather than using large skip values.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>Number of records per request (max 200, default 200)</p> <code>200</code> <code>max_pages</code> <code>Optional[int]</code> <p>Maximum number of pages to fetch (None for all)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing all paginated results combined: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - value: Combined list of all property records - pagination_info: Metadata about pagination</p> Example <pre><code># Get all active properties in chunks\nall_properties = client.property.get_all_properties_paginated(\n    filter_query=\"StandardStatus eq 'Active'\",\n    page_size=200,\n    max_pages=10  # Limit to first 2000 records\n)\n\nprint(f\"Retrieved {len(all_properties['value'])} properties\")\nprint(f\"Pages fetched: {all_properties['pagination_info']['pages_fetched']}\")\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_luxury_properties","title":"<code>get_luxury_properties(min_price=1000000, **kwargs)</code>","text":"<p>Get luxury properties above a price threshold.</p> <p>Convenience method for finding high-end properties with additional luxury-focused filtering options.</p> <p>Parameters:</p> Name Type Description Default <code>min_price</code> <code>float</code> <p>Minimum price for luxury properties (default: $1M)</p> <code>1000000</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing luxury property listings</p> Example <pre><code># Get luxury properties over $2M\nluxury_homes = client.property.get_luxury_properties(\n    min_price=2000000,\n    top=25,\n    orderby=\"ListPrice desc\"\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_modified_properties","title":"<code>get_modified_properties(since, **kwargs)</code>","text":"<p>Get properties modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only properties that have been updated since the last sync. Essential for maintaining up-to-date property data.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date]</code> <p>ISO format datetime string or date object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing properties modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get properties modified in last 15 minutes (recommended sync interval)\ncutoff_time = datetime.utcnow() - timedelta(minutes=15)\nupdates = client.property.get_modified_properties(\n    since=cutoff_time.isoformat() + \"Z\"\n)\n\n# Get properties modified since yesterday\nyesterday = datetime.utcnow() - timedelta(days=1)\nupdates = client.property.get_modified_properties(\n    since=yesterday.isoformat() + \"Z\"\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_new_listings","title":"<code>get_new_listings(days_back=7, **kwargs)</code>","text":"<p>Get properties listed within the last N days.</p> <p>Useful for finding fresh inventory and new market entries.</p> <p>Parameters:</p> Name Type Description Default <code>days_back</code> <code>int</code> <p>Number of days to look back (default: 7)</p> <code>7</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing recently listed properties</p> Example <pre><code># Get properties listed in last 3 days\nnew_listings = client.property.get_new_listings(\n    days_back=3,\n    filter_query=\"StandardStatus eq 'Active'\",\n    orderby=\"ListingContractDate desc\"\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_properties","title":"<code>get_properties(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get properties with optional OData filtering.</p> <p>This method retrieves property listings with full OData v4.0 query support. It's the primary method for accessing property data in the WFRMLS system.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets, prefer NextLink pagination instead</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of property records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get first 10 active properties\nproperties = client.property.get_properties(\n    top=10,\n    filter_query=\"StandardStatus eq 'Active'\"\n)\n\n# Get properties with photos and agent info\nproperties = client.property.get_properties(\n    expand=[\"Media\", \"Member\"],\n    top=50\n)\n\n# Get properties in price range with sorting\nproperties = client.property.get_properties(\n    filter_query=\"ListPrice ge 200000 and ListPrice le 500000\",\n    orderby=\"ListPrice desc\",\n    top=100\n)\n\n# Get properties with specific fields only\nproperties = client.property.get_properties(\n    select=[\"ListingId\", \"ListPrice\", \"StandardStatus\", \"City\"],\n    top=50\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_properties_by_city","title":"<code>get_properties_by_city(city, **kwargs)</code>","text":"<p>Get properties in a specific city.</p> <p>Convenience method to filter properties by city name. Useful for location-specific searches.</p> <p>Parameters:</p> Name Type Description Default <code>city</code> <code>str</code> <p>City name to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing properties in the specified city</p> Example <pre><code># Get properties in Salt Lake City\nproperties = client.property.get_properties_by_city(\n    city=\"Salt Lake City\",\n    top=100\n)\n\n# Get active properties in Provo\nproperties = client.property.get_properties_by_city(\n    city=\"Provo\",\n    filter_query=\"StandardStatus eq 'Active'\",\n    orderby=\"ListPrice\"\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_properties_by_price_range","title":"<code>get_properties_by_price_range(min_price=None, max_price=None, **kwargs)</code>","text":"<p>Get properties within a price range.</p> <p>Convenience method to filter properties by listing price range. Commonly used for buyer searches and market analysis.</p> <p>Parameters:</p> Name Type Description Default <code>min_price</code> <code>Optional[float]</code> <p>Minimum listing price (inclusive)</p> <code>None</code> <code>max_price</code> <code>Optional[float]</code> <p>Maximum listing price (inclusive)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing properties within the price range</p> Example <pre><code># Properties between $200K and $500K\nproperties = client.property.get_properties_by_price_range(\n    min_price=200000,\n    max_price=500000,\n    top=50\n)\n\n# Properties under $300K\nproperties = client.property.get_properties_by_price_range(\n    max_price=300000\n)\n\n# Properties over $1M\nproperties = client.property.get_properties_by_price_range(\n    min_price=1000000\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_properties_with_media","title":"<code>get_properties_with_media(**kwargs)</code>","text":"<p>Get properties with their associated media/photos.</p> <p>This is a convenience method that automatically expands the Media relationship to include property photos in the response. More efficient than making separate requests for properties and their media.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property data with expanded Media relationships</p> Example <pre><code># Get active properties with photos\nproperties = client.property.get_properties_with_media(\n    filter_query=\"StandardStatus eq 'Active'\",\n    top=25\n)\n\n# Access photos for first property\nfirst_property = properties['value'][0]\nif 'Media' in first_property:\n    photos = first_property['Media']\n    print(f\"Property has {len(photos)} photos\")\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.get_property","title":"<code>get_property(listing_id)</code>","text":"<p>Get property by listing ID.</p> <p>Retrieves a single property record by its unique listing ID. This is the most efficient way to get detailed information about a specific property.</p> <p>Parameters:</p> Name Type Description Default <code>listing_id</code> <code>str</code> <p>Listing ID to retrieve (ResourceRecordKey)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property data for the specified listing</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the property with the given ID is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific property by listing ID\nproperty = client.property.get_property(\"12345678\")\n\nprint(f\"Property: {property['ListPrice']}\")\nprint(f\"Address: {property['UnparsedAddress']}\")\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.search_properties_by_multiple_criteria","title":"<code>search_properties_by_multiple_criteria(criteria, **kwargs)</code>","text":"<p>Search properties using multiple criteria with intelligent filtering.</p> <p>Convenience method that builds complex OData filters from a criteria dictionary. Supports common search patterns used in real estate applications.</p> <p>Parameters:</p> Name Type Description Default <code>criteria</code> <code>Dict[str, Any]</code> <p>Dictionary of search criteria: - status: Property status (Active, Pending, etc.) - min_price: Minimum listing price - max_price: Maximum listing price - city: City name - property_type: Property type (Residential, Commercial, etc.) - min_bedrooms: Minimum number of bedrooms - max_bedrooms: Maximum number of bedrooms - min_bathrooms: Minimum number of bathrooms - max_bathrooms: Maximum number of bathrooms - min_sqft: Minimum square footage - max_sqft: Maximum square footage - zip_code: Postal code - school_district: School district name</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing filtered property results</p> Example <pre><code># Complex property search\ncriteria = {\n    'status': 'Active',\n    'min_price': 300000,\n    'max_price': 600000,\n    'city': 'Salt Lake City',\n    'property_type': 'Residential',\n    'min_bedrooms': 3,\n    'min_bathrooms': 2,\n    'min_sqft': 1500\n}\n\nproperties = client.property.search_properties_by_multiple_criteria(\n    criteria=criteria,\n    top=50,\n    orderby='ListPrice'\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.search_properties_by_polygon","title":"<code>search_properties_by_polygon(polygon_coordinates, additional_filters=None, **kwargs)</code>","text":"<p>Search properties within a polygon area.</p> <p>Uses geospatial polygon intersection to find properties within a defined boundary. Useful for searching within specific neighborhoods, districts, or custom geographic areas.</p> <p>Parameters:</p> Name Type Description Default <code>polygon_coordinates</code> <code>List[Dict[str, float]]</code> <p>List of coordinate dicts with 'lat' and 'lng' keys. Must have at least 3 points and should be closed (first == last).</p> required <code>additional_filters</code> <code>Optional[str]</code> <p>Additional OData filter query to combine with geo filter</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property data within the polygon</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If polygon coordinates are invalid</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Define polygon around downtown area\npolygon = [\n    {\"lat\": 40.7608, \"lng\": -111.8910},\n    {\"lat\": 40.7708, \"lng\": -111.8810},\n    {\"lat\": 40.7508, \"lng\": -111.8710},\n    {\"lat\": 40.7608, \"lng\": -111.8910}  # Close polygon\n]\n\nproperties = client.property.search_properties_by_polygon(\n    polygon_coordinates=polygon,\n    additional_filters=\"PropertyType eq 'Residential'\",\n    top=100\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.search_properties_by_radius","title":"<code>search_properties_by_radius(latitude, longitude, radius_miles, additional_filters=None, **kwargs)</code>","text":"<p>Search properties within a radius of given coordinates.</p> <p>Uses geospatial queries to find properties within a specified distance from a center point. This is ideal for location-based property searches.</p> <p>Parameters:</p> Name Type Description Default <code>latitude</code> <code>float</code> <p>Latitude coordinate for center point</p> required <code>longitude</code> <code>float</code> <p>Longitude coordinate for center point</p> required <code>radius_miles</code> <code>float</code> <p>Search radius in miles</p> required <code>additional_filters</code> <code>Optional[str]</code> <p>Additional OData filter query to combine with geo filter</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, select, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property data within the specified radius</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If coordinates are invalid</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Find properties within 10 miles of Salt Lake City\nproperties = client.property.search_properties_by_radius(\n    latitude=40.7608,\n    longitude=-111.8910,\n    radius_miles=10,\n    additional_filters=\"StandardStatus eq 'Active'\",\n    top=50\n)\n\n# Find expensive properties near downtown\nproperties = client.property.search_properties_by_radius(\n    latitude=40.7608,\n    longitude=-111.8910,\n    radius_miles=5,\n    additional_filters=\"ListPrice ge 500000 and StandardStatus eq 'Active'\",\n    orderby=\"ListPrice desc\"\n)\n</code></pre>"},{"location":"api/properties/#wfrmls.properties.PropertyClient.search_properties_near_address","title":"<code>search_properties_near_address(address, radius_miles=5.0, **kwargs)</code>","text":"<p>Search properties near a specific address.</p> <p>This method would typically geocode the address to coordinates and then search within a radius. For now, it provides a framework for address-based searching that can be enhanced with geocoding services.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>Street address to search near</p> required <code>radius_miles</code> <code>float</code> <p>Search radius in miles (default: 5.0)</p> <code>5.0</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing properties near the address</p> Note <p>This is a framework method. In production, you would integrate with a geocoding service to convert the address to coordinates first.</p> Example <pre><code># Search near a specific address\nproperties = client.property.search_properties_near_address(\n    address=\"123 Main St, Salt Lake City, UT\",\n    radius_miles=2.0,\n    additional_filters=\"StandardStatus eq 'Active'\"\n)\n</code></pre>"},{"location":"api/properties/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/properties/#basic-property-retrieval","title":"Basic Property Retrieval","text":"Active PropertiesProperty DetailsProperty History <pre><code># Get the first 50 active properties\nproperties = client.property.get_active_properties(top=50)\n\n# Get active properties ordered by list price\nexpensive_properties = client.property.get_active_properties(\n    orderby=\"ListPrice desc\",\n    top=25\n)\n</code></pre> <pre><code># Get a specific property by ID\nproperty_detail = client.property.get_property(\"12345678\")\n\n# Get property with expanded related data\nproperty_expanded = client.property.get_property_with_expansion(\n    listing_id=\"12345678\",\n    expand=\"Media,OpenHouse\"\n)\n</code></pre> <pre><code># Get properties modified in the last 24 hours\nfrom datetime import datetime, timedelta\nyesterday = datetime.utcnow() - timedelta(days=1)\n\nrecent_changes = client.property.get_properties(\n    filter_query=f\"ModificationTimestamp ge {yesterday.isoformat()}Z\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/properties/#advanced-search-and-filtering","title":"Advanced Search and Filtering","text":"Geographic SearchPrice and Size FiltersStatus and Date Filters <pre><code># Search within radius (Salt Lake City downtown)\ndowntown_properties = client.property.search_properties_by_radius(\n    latitude=40.7608,\n    longitude=-111.8910, \n    radius_miles=5,\n    top=100\n)\n\n# Search by city\npark_city_properties = client.property.get_properties(\n    filter_query=\"City eq 'Park City'\",\n    orderby=\"ListPrice desc\"\n)\n</code></pre> <pre><code># Luxury properties ($1M+, 3000+ sqft)\nluxury_properties = client.property.get_properties(\n    filter_query=\"ListPrice ge 1000000 and LivingArea ge 3000\",\n    orderby=\"ListPrice desc\",\n    top=50\n)\n\n# Properties with specific bedroom/bathroom count\nfamily_homes = client.property.get_properties(\n    filter_query=\"BedroomsTotal ge 4 and BathroomsTotalInteger ge 3\",\n    orderby=\"ListPrice asc\"\n)\n</code></pre> <pre><code># Recently listed properties (last 7 days)\nfrom datetime import datetime, timedelta\nweek_ago = (datetime.utcnow() - timedelta(days=7)).strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\nnew_listings = client.property.get_properties(\n    filter_query=f\"ListingContractDate ge {week_ago}\",\n    orderby=\"ListingContractDate desc\"\n)\n\n# Properties with specific status\nactive_properties = client.property.get_properties(\n    filter_query=\"StandardStatus eq 'Active'\",\n    top=100\n)\n</code></pre>"},{"location":"api/properties/#specialized-searches","title":"Specialized Searches","text":"Property Type FilteringAmenities and FeaturesAgent and Office Filters <pre><code># Single family homes only\nsingle_family = client.property.get_properties(\n    filter_query=\"PropertyType eq 'Residential' and PropertySubType eq 'Single Family Residence'\",\n    top=50\n)\n\n# Condos and townhomes\ncondos_townhomes = client.property.get_properties(\n    filter_query=\"PropertySubType in ('Condominium', 'Townhouse')\",\n    top=50\n)\n</code></pre> <pre><code># Properties with pools\npool_properties = client.property.get_properties(\n    filter_query=\"PoolPrivateYN eq true\",\n    top=25\n)\n\n# Properties with garages\ngarage_properties = client.property.get_properties(\n    filter_query=\"GarageSpaces ge 2\",\n    orderby=\"GarageSpaces desc\"\n)\n</code></pre> <pre><code># Properties by specific agent\nagent_listings = client.property.get_properties(\n    filter_query=\"ListAgentKey eq '12345'\",\n    orderby=\"ListingContractDate desc\"\n)\n\n# Properties by office\noffice_listings = client.property.get_properties(\n    filter_query=\"ListOfficeKey eq '67890'\",\n    top=100\n)\n</code></pre>"},{"location":"api/properties/#property-data-structure","title":"Property Data Structure","text":"<p>Properties in WFRMLS follow the RESO standard with extensive field coverage:</p> Key Property Fields <p>Identification &amp; Status</p> <ul> <li><code>ListingId</code> - Unique listing identifier</li> <li><code>StandardStatus</code> - Current listing status (Active, Pending, Sold, etc.)</li> <li><code>MlsStatus</code> - MLS-specific status information</li> <li><code>ListingContractDate</code> - Date property was listed</li> <li><code>ModificationTimestamp</code> - Last modification date</li> </ul> <p>Location &amp; Address</p> <ul> <li><code>UnparsedAddress</code> - Full property address</li> <li><code>StreetNumber</code>, <code>StreetName</code>, <code>StreetSuffix</code> - Address components</li> <li><code>City</code>, <code>StateOrProvince</code>, <code>PostalCode</code> - Geographic location</li> <li><code>Latitude</code>, <code>Longitude</code> - Geographic coordinates</li> <li><code>CountyOrParish</code> - County information</li> </ul> <p>Property Details</p> <ul> <li><code>PropertyType</code> - Residential, Commercial, Land, etc.</li> <li><code>PropertySubType</code> - Single Family, Condo, Townhouse, etc.</li> <li><code>BedroomsTotal</code> - Number of bedrooms</li> <li><code>BathroomsTotalInteger</code> - Number of bathrooms</li> <li><code>LivingArea</code> - Square footage of living space</li> <li><code>LotSizeAcres</code> - Lot size in acres</li> </ul> <p>Financial Information</p> <ul> <li><code>ListPrice</code> - Current listing price</li> <li><code>OriginalListPrice</code> - Initial listing price</li> <li><code>SoldPrice</code> - Sale price (if sold)</li> <li><code>ClosePrice</code> - Final closing price</li> <li><code>TaxAssessedValue</code> - Assessed value for taxes</li> </ul>"},{"location":"api/properties/#pagination-and-performance","title":"Pagination and Performance","text":""},{"location":"api/properties/#efficient-data-retrieval","title":"Efficient Data Retrieval","text":"<pre><code># Use top parameter to limit results\nproperties = client.property.get_properties(top=50)\n\n# Implement pagination for large datasets\ndef get_all_properties_paginated(client, page_size=100):\n    skip = 0\n    all_properties = []\n\n    while True:\n        page = client.property.get_properties(\n            top=page_size,\n            skip=skip,\n            count=True\n        )\n\n        properties = page.get('value', [])\n        if not properties:\n            break\n\n        all_properties.extend(properties)\n        skip += page_size\n\n        # Check if we've got all records\n        total_count = page.get('@odata.count')\n        if total_count and len(all_properties) &gt;= total_count:\n            break\n\n    return all_properties\n</code></pre>"},{"location":"api/properties/#performance-best-practices","title":"Performance Best Practices","text":"<p>Optimization Tips</p> <p>Efficient Queries</p> <ul> <li>Use specific filters to reduce result set size</li> <li>Order by indexed fields when possible (ListPrice, ModificationTimestamp)</li> <li>Limit results with <code>top</code> parameter</li> </ul> <p>Field Selection</p> <pre><code># Select only needed fields\nproperties = client.property.get_properties(\n    select=\"ListingId,ListPrice,Address,City,BedroomsTotal,BathroomsTotalInteger\",\n    top=100\n)\n</code></pre> <p>Caching Considerations</p> <ul> <li>Cache property details for frequently accessed listings</li> <li>Use modification timestamps to detect changes</li> <li>Implement local storage for large datasets</li> </ul>"},{"location":"api/properties/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError, RateLimitError\n\ntry:\n    # Try to get a property\n    property_detail = client.property.get_property(\"12345678\")\n\nexcept NotFoundError:\n    print(\"\u274c Property not found - it may have been deleted or the ID is incorrect\")\n\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid search parameters: {e}\")\n\nexcept RateLimitError:\n    print(\"\u23f1\ufe0f Rate limit exceeded - please wait before making more requests\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Unexpected error: {e}\")\n</code></pre>"},{"location":"api/properties/#integration-examples","title":"Integration Examples","text":""},{"location":"api/properties/#real-estate-dashboard","title":"Real Estate Dashboard","text":"<pre><code>def create_market_summary(client, city=\"Salt Lake City\"):\n    \"\"\"Create a market summary for a specific city.\"\"\"\n\n    # Get active properties\n    active_properties = client.property.get_properties(\n        filter_query=f\"City eq '{city}' and StandardStatus eq 'Active'\",\n        select=\"ListingId,ListPrice,BedroomsTotal,LivingArea,PropertySubType\",\n        top=1000\n    )\n\n    properties = active_properties.get('value', [])\n\n    if not properties:\n        return {\"error\": f\"No active properties found in {city}\"}\n\n    # Calculate statistics\n    prices = [p.get('ListPrice', 0) for p in properties if p.get('ListPrice')]\n\n    summary = {\n        \"city\": city,\n        \"total_active\": len(properties),\n        \"avg_price\": sum(prices) / len(prices) if prices else 0,\n        \"min_price\": min(prices) if prices else 0,\n        \"max_price\": max(prices) if prices else 0,\n        \"property_types\": {}\n    }\n\n    # Count by property type\n    for prop in properties:\n        prop_type = prop.get('PropertySubType', 'Unknown')\n        summary[\"property_types\"][prop_type] = summary[\"property_types\"].get(prop_type, 0) + 1\n\n    return summary\n\n# Usage\nmarket_data = create_market_summary(client, \"Park City\")\nprint(f\"\ud83d\udcca Market Summary for {market_data['city']}:\")\nprint(f\"   Active Listings: {market_data['total_active']}\")\nprint(f\"   Average Price: ${market_data['avg_price']:,.0f}\")\n</code></pre>"},{"location":"api/properties/#property-matching-system","title":"Property Matching System","text":"<pre><code>def find_matching_properties(client, criteria):\n    \"\"\"Find properties matching specific buyer criteria.\"\"\"\n\n    filters = []\n\n    # Price range\n    if criteria.get('min_price'):\n        filters.append(f\"ListPrice ge {criteria['min_price']}\")\n    if criteria.get('max_price'):\n        filters.append(f\"ListPrice le {criteria['max_price']}\")\n\n    # Bedrooms/bathrooms\n    if criteria.get('min_bedrooms'):\n        filters.append(f\"BedroomsTotal ge {criteria['min_bedrooms']}\")\n    if criteria.get('min_bathrooms'):\n        filters.append(f\"BathroomsTotalInteger ge {criteria['min_bathrooms']}\")\n\n    # Location\n    if criteria.get('cities'):\n        city_filter = \" or \".join([f\"City eq '{city}'\" for city in criteria['cities']])\n        filters.append(f\"({city_filter})\")\n\n    # Property type\n    if criteria.get('property_types'):\n        type_filter = \" or \".join([f\"PropertySubType eq '{ptype}'\" for ptype in criteria['property_types']])\n        filters.append(f\"({type_filter})\")\n\n    # Combine filters\n    filter_query = \" and \".join(filters) if filters else None\n\n    # Search\n    results = client.property.get_properties(\n        filter_query=filter_query,\n        orderby=\"ListPrice asc\",\n        top=50\n    )\n\n    return results.get('value', [])\n\n# Usage\nbuyer_criteria = {\n    'min_price': 400000,\n    'max_price': 800000, \n    'min_bedrooms': 3,\n    'min_bathrooms': 2,\n    'cities': ['Salt Lake City', 'West Valley City'],\n    'property_types': ['Single Family Residence', 'Townhouse']\n}\n\nmatches = find_matching_properties(client, buyer_criteria)\nprint(f\"\ud83c\udfaf Found {len(matches)} matching properties\")\n</code></pre>"},{"location":"api/specialized/","title":"Specialized APIs","text":"<p>This section covers the specialized WFRMLS APIs that provide access to specific data types and system functionality: ADU (Accessory Dwelling Units), Deleted Records, Property Unit Types, and Resource metadata.</p> <ul> <li> <p> ADU API</p> <p>Accessory Dwelling Unit data and classifications</p> <p> ADU Documentation</p> </li> <li> <p> Deleted Records</p> <p>Deleted record tracking for data synchronization</p> <p> Deleted Records</p> </li> <li> <p> Property Unit Types</p> <p>Property unit classifications and types</p> <p> Unit Types</p> </li> <li> <p> Resource Metadata</p> <p>API resource definitions and metadata</p> <p> Resource API</p> </li> </ul>"},{"location":"api/specialized/#adu-api","title":"ADU API","text":"<p>The ADU (Accessory Dwelling Unit) API provides access to information about secondary housing units on properties, including types, statuses, and property relationships.</p> <p>Quick Start</p> <pre><code># Get all ADUs\nadus = client.adu.get_adus()\n\n# Get existing ADUs\nexisting_adus = client.adu.get_existing_adus()\n\n# Get ADUs for a specific property\nproperty_adus = client.adu.get_adus_for_property(\"1611952\")\n</code></pre>"},{"location":"api/specialized/#adu-client","title":"ADU Client","text":""},{"location":"api/specialized/#wfrmls.adu.AduClient","title":"<code>wfrmls.adu.AduClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for Accessory Dwelling Unit (ADU) API endpoints.</p> <p>The Adu resource contains information about accessory dwelling units associated with properties. ADUs are secondary housing units on single-family residential lots and are important for housing density and rental income potential.</p>"},{"location":"api/specialized/#wfrmls.adu.AduClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the ADU client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_adu","title":"<code>get_adu(adu_key)</code>","text":"<p>Get ADU by ADU key.</p> <p>Retrieves a single ADU record by its unique key. This is the most efficient way to get detailed information about a specific accessory dwelling unit.</p> <p>Parameters:</p> Name Type Description Default <code>adu_key</code> <code>str</code> <p>ADU key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADU data for the specified record</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the ADU with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific ADU by key\nadu = client.adu.get_adu(\"ADU123456\")\n\nprint(f\"ADU Type: {adu['AduType']}\")\nprint(f\"Status: {adu['AduStatus']}\")\nprint(f\"Square Feet: {adu.get('SquareFeet', 'Unknown')}\")\nprint(f\"Bedrooms: {adu.get('Bedrooms', 'Unknown')}\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_adus","title":"<code>get_adus(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get ADU data with optional OData filtering.</p> <p>This method retrieves ADU information with full OData v4.0 query support. Provides information about accessory dwelling units and their characteristics.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADU data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of ADU records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get all ADUs\nadus = client.adu.get_adus()\n\n# Get ADUs for existing units\nadus = client.adu.get_adus(\n    filter_query=\"AduStatus eq 'Existing'\",\n    orderby=\"CreatedDate desc\"\n)\n\n# Get ADUs with property information\nadus = client.adu.get_adus(\n    expand=\"Property\",\n    select=[\"AduKey\", \"ListingKey\", \"AduType\", \"AduStatus\"],\n    top=50\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_adus_by_status","title":"<code>get_adus_by_status(adu_status, **kwargs)</code>","text":"<p>Get ADUs by status.</p> <p>Convenience method to filter ADUs by status. Useful for finding ADUs in specific development stages.</p> <p>Parameters:</p> Name Type Description Default <code>adu_status</code> <code>str</code> <p>ADU status to filter by (e.g., \"Existing\", \"Permitted\")</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADUs with the specified status</p> Example <pre><code># Get existing ADUs\nexisting_adus = client.adu.get_adus_by_status(\n    adu_status=\"Existing\",\n    orderby=\"CreatedDate desc\"\n)\n\n# Get planned ADUs\nplanned_adus = client.adu.get_adus_by_status(\"Planned\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_adus_by_type","title":"<code>get_adus_by_type(adu_type, **kwargs)</code>","text":"<p>Get ADUs by type.</p> <p>Convenience method to filter ADUs by type. Useful for finding specific types of accessory dwelling units.</p> <p>Parameters:</p> Name Type Description Default <code>adu_type</code> <code>str</code> <p>ADU type to filter by (e.g., \"Detached\", \"Attached\")</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADUs of the specified type</p> Example <pre><code># Get all detached ADUs\ndetached_adus = client.adu.get_adus_by_type(\n    adu_type=\"Detached\",\n    expand=\"Property\"\n)\n\n# Get garage conversion ADUs\ngarage_adus = client.adu.get_adus_by_type(\"Garage Conversion\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_adus_for_property","title":"<code>get_adus_for_property(listing_key, **kwargs)</code>","text":"<p>Get ADUs for a specific property.</p> <p>Convenience method to retrieve all ADUs associated with a property. Useful for understanding accessory dwelling unit potential for a property.</p> <p>Parameters:</p> Name Type Description Default <code>listing_key</code> <code>str</code> <p>Property listing key to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADUs for the specified property</p> Example <pre><code># Get ADUs for a property\nproperty_adus = client.adu.get_adus_for_property(\n    listing_key=\"1611952\",\n    orderby=\"AduType asc\"\n)\n\n# Get existing ADUs for a property\nexisting_adus = client.adu.get_adus_for_property(\n    listing_key=\"1611952\",\n    filter_query=\"AduStatus eq 'Existing'\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_adus_with_property","title":"<code>get_adus_with_property(**kwargs)</code>","text":"<p>Get ADUs with their property information expanded.</p> <p>This is a convenience method that automatically expands property relationships to include property details in the response. More efficient than making separate requests for ADUs and properties.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADU data with expanded property relationships</p> Example <pre><code># Get ADUs with property information\nadus_with_props = client.adu.get_adus_with_property(\n    top=25\n)\n\n# Access property info for first ADU\nfirst_adu = adus_with_props['value'][0]\nif 'Property' in first_adu:\n    property_info = first_adu['Property']\n    print(f\"ADU on property: {property_info['UnparsedAddress']}\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_existing_adus","title":"<code>get_existing_adus(**kwargs)</code>","text":"<p>Get existing ADUs.</p> <p>Convenience method to retrieve only existing/built ADUs. Excludes planned, permitted, or under-construction units.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing existing ADUs</p> Example <pre><code># Get all existing ADUs\nexisting_adus = client.adu.get_existing_adus(\n    expand=\"Property\",\n    orderby=\"CreatedDate desc\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_modified_adus","title":"<code>get_modified_adus(since, **kwargs)</code>","text":"<p>Get ADUs modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only ADU records that have been updated since the last sync. Useful for maintaining up-to-date accessory dwelling unit information.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date, datetime]</code> <p>ISO format datetime string, date object, or datetime object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing ADUs modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get ADUs modified in last week\ncutoff_time = datetime.utcnow() - timedelta(days=7)\nupdates = client.adu.get_modified_adus(\n    since=cutoff_time\n)\n\n# Get ADUs modified since a specific date\nupdates = client.adu.get_modified_adus(\n    since=\"2023-01-01T00:00:00Z\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.adu.AduClient.get_permitted_adus","title":"<code>get_permitted_adus(**kwargs)</code>","text":"<p>Get permitted ADUs.</p> <p>Convenience method to retrieve ADUs that have permits but may not be built yet. Useful for understanding development pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing permitted ADUs</p> Example <pre><code># Get all permitted ADUs\npermitted_adus = client.adu.get_permitted_adus()\n</code></pre>"},{"location":"api/specialized/#common-adu-usage-patterns","title":"Common ADU Usage Patterns","text":"Basic ADU RetrievalProperty-Specific ADUsADU Analytics <pre><code># Get all ADUs\nall_adus = client.adu.get_adus(top=100)\n\n# Get existing/completed ADUs\nexisting_adus = client.adu.get_existing_adus(top=50)\n\n# Get ADUs with specific status\npermitted_adus = client.adu.get_adus(\n    filter_query=\"AduStatus eq 'Permitted'\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre> <pre><code># Get ADUs for a specific property\nproperty_adus = client.adu.get_adus_for_property(\"1611952\")\n\n# Get ADUs with property information\nadus_with_property = client.adu.get_adus_with_property(\n    filter_query=\"AduType eq 'Detached'\",\n    top=25\n)\n</code></pre> <pre><code># Get ADU distribution by type\ndef get_adu_analytics(client):\n    adus = client.adu.get_adus(\n        select=\"AduType,AduStatus,AduSquareFootage,PropertyKey\",\n        top=1000\n    )\n\n    analytics = {\n        'total_adus': 0,\n        'by_type': {},\n        'by_status': {},\n        'avg_sq_ft': 0\n    }\n\n    sq_ft_values = []\n    for adu in adus.get('value', []):\n        analytics['total_adus'] += 1\n\n        adu_type = adu.get('AduType', 'Unknown')\n        analytics['by_type'][adu_type] = analytics['by_type'].get(adu_type, 0) + 1\n\n        status = adu.get('AduStatus', 'Unknown')\n        analytics['by_status'][status] = analytics['by_status'].get(status, 0) + 1\n\n        sq_ft = adu.get('AduSquareFootage')\n        if sq_ft:\n            sq_ft_values.append(sq_ft)\n\n    if sq_ft_values:\n        analytics['avg_sq_ft'] = sum(sq_ft_values) / len(sq_ft_values)\n\n    return analytics\n</code></pre>"},{"location":"api/specialized/#deleted-records-api","title":"Deleted Records API","text":"<p>The Deleted Records API provides access to deleted record tracking, essential for maintaining data integrity when replicating MLS data.</p> <p>Quick Start</p> <pre><code># Get recent deletions\ndeleted = client.deleted.get_deleted(top=50)\n\n# Get deleted properties since yesterday\nfrom datetime import datetime, timedelta\nyesterday = datetime.utcnow() - timedelta(days=1)\ndeleted_properties = client.deleted.get_deleted_since(\n    since=yesterday.isoformat() + \"Z\",\n    resource_name=\"Property\"\n)\n\n# Get deleted property records\ndeleted_props = client.deleted.get_deleted_property_records()\n</code></pre>"},{"location":"api/specialized/#deleted-records-client","title":"Deleted Records Client","text":""},{"location":"api/specialized/#wfrmls.deleted.DeletedClient","title":"<code>wfrmls.deleted.DeletedClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for deleted records API endpoints.</p> <p>The Deleted resource tracks records that have been removed from the MLS system. This is essential for data synchronization to ensure local databases properly handle deletions and maintain data integrity.</p>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the deleted records client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_all_deleted_for_sync","title":"<code>get_all_deleted_for_sync(since, resource_types=None, **kwargs)</code>","text":"<p>Get all deleted records for comprehensive data synchronization.</p> <p>Retrieves deleted records across multiple resource types for a complete sync operation. Essential for maintaining data integrity in replicated systems.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date]</code> <p>ISO format datetime string or date object for cutoff time</p> required <code>resource_types</code> <code>Optional[List[Union[ResourceName, str]]]</code> <p>List of resource types to include (all if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing comprehensive deleted record data organized by resource type</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get all deletions in last hour for comprehensive sync\ncutoff = datetime.utcnow() - timedelta(hours=1)\nall_deletions = client.deleted.get_all_deleted_for_sync(\n    since=cutoff.isoformat() + \"Z\",\n    resource_types=[ResourceName.PROPERTY, ResourceName.MEMBER, ResourceName.MEDIA]\n)\n\n# Process by resource type\nfor resource_type in all_deletions['by_resource']:\n    records = all_deletions['by_resource'][resource_type]\n    print(f\"Found {len(records)} deleted {resource_type} records\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted","title":"<code>get_deleted(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get deleted records with optional OData filtering.</p> <p>This method retrieves records that have been deleted from the MLS system. Essential for maintaining data synchronization and integrity in applications that replicate MLS data.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deleted record data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of deleted record entries</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get all deleted records\ndeleted = client.deleted.get_deleted(top=50)\n\n# Get deleted Property records only\ndeleted_properties = client.deleted.get_deleted(\n    filter_query=\"ResourceName eq 'Property'\"\n)\n\n# Get recent deletions (last 24 hours)\nfrom datetime import datetime, timedelta\ncutoff = datetime.utcnow() - timedelta(days=1)\nrecent_deletions = client.deleted.get_deleted(\n    filter_query=f\"DeletedDateTime gt {cutoff.isoformat()}Z\",\n    orderby=\"DeletedDateTime desc\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted_by_resource","title":"<code>get_deleted_by_resource(resource_name, **kwargs)</code>","text":"<p>Get deleted records for a specific resource type.</p> <p>Convenience method to filter deleted records by resource type. Useful for synchronizing specific types of data.</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>Union[ResourceName, str]</code> <p>Resource type to filter by (Property, Member, etc.)</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters (top, orderby, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deleted records for the specified resource</p> Example <pre><code># Get deleted properties\ndeleted_properties = client.deleted.get_deleted_by_resource(\n    resource_name=ResourceName.PROPERTY,\n    top=100\n)\n\n# Get deleted members with ordering\ndeleted_members = client.deleted.get_deleted_by_resource(\n    resource_name=\"Member\",\n    orderby=\"DeletedDateTime desc\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted_media_records","title":"<code>get_deleted_media_records(**kwargs)</code>","text":"<p>Get deleted Media records.</p> <p>Convenience method specifically for deleted media/photo records. Useful for cleaning up orphaned media references.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deleted media records</p> Example <pre><code># Get recently deleted media\ndeleted_media = client.deleted.get_deleted_media_records(\n    orderby=\"DeletedDateTime desc\",\n    top=100\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted_member_records","title":"<code>get_deleted_member_records(**kwargs)</code>","text":"<p>Get deleted Member records.</p> <p>Convenience method specifically for deleted member (agent/broker) records.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deleted member records</p> Example <pre><code># Get deleted members\ndeleted_members = client.deleted.get_deleted_member_records(top=25)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted_office_records","title":"<code>get_deleted_office_records(**kwargs)</code>","text":"<p>Get deleted Office records.</p> <p>Convenience method specifically for deleted office/brokerage records.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deleted office records</p> Example <pre><code># Get deleted offices\ndeleted_offices = client.deleted.get_deleted_office_records(top=25)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted_property_records","title":"<code>get_deleted_property_records(**kwargs)</code>","text":"<p>Get deleted Property records.</p> <p>Convenience method specifically for deleted property records. Most commonly used deletion tracking for real estate applications.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deleted property records</p> Example <pre><code># Get recent deleted properties\ndeleted_properties = client.deleted.get_deleted_property_records(\n    orderby=\"DeletedDateTime desc\",\n    top=50\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deleted_since","title":"<code>get_deleted_since(since, resource_name=None, **kwargs)</code>","text":"<p>Get records deleted since a specific date/time.</p> <p>Used for incremental data synchronization to identify records that have been deleted since the last sync. Essential for maintaining data integrity in replicated systems.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date]</code> <p>ISO format datetime string or date object for cutoff time</p> required <code>resource_name</code> <code>Optional[Union[ResourceName, str]]</code> <p>Optional resource type to filter by</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing records deleted since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get records deleted in last 15 minutes (recommended sync interval)\ncutoff_time = datetime.utcnow() - timedelta(minutes=15)\nrecent_deletions = client.deleted.get_deleted_since(\n    since=cutoff_time.isoformat() + \"Z\"\n)\n\n# Get properties deleted since yesterday\nyesterday = datetime.utcnow() - timedelta(days=1)\ndeleted_properties = client.deleted.get_deleted_since(\n    since=yesterday.isoformat() + \"Z\",\n    resource_name=ResourceName.PROPERTY\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.get_deletion_summary","title":"<code>get_deletion_summary(since, **kwargs)</code>","text":"<p>Get a summary of deletion activity by resource type.</p> <p>Provides overview statistics for deletion monitoring and reporting. Useful for understanding deletion patterns and data management needs.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date]</code> <p>ISO format datetime string or date object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing deletion summary statistics</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get deletion summary for last 24 hours\nyesterday = datetime.utcnow() - timedelta(days=1)\nsummary = client.deleted.get_deletion_summary(\n    since=yesterday.isoformat() + \"Z\"\n)\n\nprint(f\"Total deletions: {summary['summary']['total_deletions']}\")\nfor resource, count in summary['summary']['by_resource_count'].items():\n    print(f\"  {resource}: {count} deletions\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.deleted.DeletedClient.monitor_deletion_activity","title":"<code>monitor_deletion_activity(hours_back=24, alert_threshold=100, **kwargs)</code>","text":"<p>Monitor deletion activity and identify unusual patterns.</p> <p>Analyzes recent deletion activity to identify potential issues or unusual deletion patterns that might require attention.</p> <p>Parameters:</p> Name Type Description Default <code>hours_back</code> <code>int</code> <p>Number of hours to analyze (default: 24)</p> <code>24</code> <code>alert_threshold</code> <code>int</code> <p>Number of deletions that triggers alerts (default: 100)</p> <code>100</code> <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing monitoring results and alerts</p> Example <pre><code># Monitor for unusual deletion activity\nmonitoring = client.deleted.monitor_deletion_activity(\n    hours_back=6,\n    alert_threshold=50\n)\n\nif monitoring['alerts']:\n    print(\"ALERTS DETECTED:\")\n    for alert in monitoring['alerts']:\n        print(f\"  - {alert}\")\n</code></pre>"},{"location":"api/specialized/#common-deleted-records-patterns","title":"Common Deleted Records Patterns","text":"Basic Deletion TrackingSynchronization SupportDeletion Analytics <pre><code># Get all recent deletions\nrecent_deletions = client.deleted.get_deleted(\n    orderby=\"DeletedDateTime desc\",\n    top=100\n)\n\n# Get deletions for specific resource\ndeleted_properties = client.deleted.get_deleted_property_records(\n    orderby=\"DeletedDateTime desc\",\n    top=50\n)\n\n# Get deletions within date range\nfrom datetime import datetime, timedelta\nweek_ago = (datetime.utcnow() - timedelta(days=7)).isoformat() + \"Z\"\n\nweekly_deletions = client.deleted.get_deleted(\n    filter_query=f\"DeletedDateTime ge {week_ago}\",\n    orderby=\"DeletedDateTime desc\"\n)\n</code></pre> <pre><code># Sync deleted records since last update\ndef sync_deletions(client, last_sync_time):\n    \"\"\"Sync deletions since last synchronization.\"\"\"\n\n    deleted_records = client.deleted.get_deleted_since(\n        since=last_sync_time,\n        orderby=\"DeletedDateTime asc\"\n    )\n\n    sync_report = {\n        'total_deletions': 0,\n        'by_resource': {},\n        'sync_timestamp': datetime.utcnow().isoformat() + \"Z\"\n    }\n\n    for record in deleted_records.get('value', []):\n        sync_report['total_deletions'] += 1\n\n        resource_name = record.get('ResourceName', 'Unknown')\n        if resource_name not in sync_report['by_resource']:\n            sync_report['by_resource'][resource_name] = []\n\n        sync_report['by_resource'][resource_name].append({\n            'key': record.get('ResourceRecordKey'),\n            'deleted_at': record.get('DeletedDateTime')\n        })\n\n    return sync_report\n\n# Usage\nlast_sync = \"2024-01-01T00:00:00Z\"\nsync_results = sync_deletions(client, last_sync)\n</code></pre> <pre><code># Analyze deletion patterns\ndef analyze_deletion_patterns(client, days_back=30):\n    from datetime import datetime, timedelta\n    from collections import defaultdict\n\n    cutoff_date = (datetime.utcnow() - timedelta(days=days_back)).isoformat() + \"Z\"\n\n    deletions = client.deleted.get_deleted(\n        filter_query=f\"DeletedDateTime ge {cutoff_date}\",\n        select=\"ResourceName,ResourceRecordKey,DeletedDateTime\",\n        top=1000\n    )\n\n    analysis = {\n        'total_deletions': 0,\n        'by_resource': defaultdict(int),\n        'by_day': defaultdict(int),\n        'deletion_rate': {}\n    }\n\n    for deletion in deletions.get('value', []):\n        analysis['total_deletions'] += 1\n\n        resource = deletion.get('ResourceName', 'Unknown')\n        analysis['by_resource'][resource] += 1\n\n        # Parse date for daily analysis\n        deleted_at = deletion.get('DeletedDateTime', '')\n        if deleted_at:\n            try:\n                date = datetime.fromisoformat(deleted_at.replace('Z', '+00:00')).date()\n                analysis['by_day'][str(date)] += 1\n            except:\n                pass\n\n    # Calculate daily averages\n    for resource, count in analysis['by_resource'].items():\n        analysis['deletion_rate'][resource] = count / days_back\n\n    return analysis\n</code></pre>"},{"location":"api/specialized/#property-unit-types-api","title":"Property Unit Types API","text":"<p>The Property Unit Types API provides access to property unit classifications and type information.</p> <p>Quick Start</p> <pre><code># Get all unit types\nunit_types = client.property_unit_types.get_property_unit_types()\n\n# Get residential unit types\nresidential = client.property_unit_types.get_residential_unit_types()\n\n# Get commercial unit types\ncommercial = client.property_unit_types.get_commercial_unit_types()\n</code></pre>"},{"location":"api/specialized/#property-unit-types-client","title":"Property Unit Types Client","text":""},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient","title":"<code>wfrmls.property_unit_types.PropertyUnitTypesClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for property unit types API endpoints.</p> <p>The PropertyUnitTypes resource contains information about different types of property units such as condos, townhomes, apartments, etc. This is useful for understanding property classification and unit-specific details.</p>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the property unit types client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_modified_unit_types","title":"<code>get_modified_unit_types(since, **kwargs)</code>","text":"<p>Get unit types modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only unit type records that have been updated since the last sync. Useful for maintaining up-to-date unit type information.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date, datetime]</code> <p>ISO format datetime string, date object, or datetime object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing unit types modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get unit types modified in last week\ncutoff_time = datetime.utcnow() - timedelta(days=7)\nupdates = client.property_unit_types.get_modified_unit_types(\n    since=cutoff_time\n)\n\n# Get unit types modified since a specific date\nupdates = client.property_unit_types.get_modified_unit_types(\n    since=\"2023-01-01T00:00:00Z\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_property_unit_type","title":"<code>get_property_unit_type(unit_type_key)</code>","text":"<p>Get property unit type by unit type key.</p> <p>Retrieves a single property unit type record by its unique key. This is the most efficient way to get detailed information about a specific unit type.</p> <p>Parameters:</p> Name Type Description Default <code>unit_type_key</code> <code>str</code> <p>Unit type key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing unit type data for the specified record</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the unit type with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific unit type by key\nunit_type = client.property_unit_types.get_property_unit_type(\"CONDO\")\n\nprint(f\"Unit Type: {unit_type['UnitType']}\")\nprint(f\"Description: {unit_type.get('Description', 'No description')}\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_property_unit_types","title":"<code>get_property_unit_types(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get property unit types with optional OData filtering.</p> <p>This method retrieves property unit type information with full OData v4.0 query support. Provides information about different unit types and their characteristics.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing property unit type data with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of property unit type records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get all unit types\nunit_types = client.property_unit_types.get_property_unit_types()\n\n# Get specific unit types\nunit_types = client.property_unit_types.get_property_unit_types(\n    filter_query=\"UnitType eq 'Condo'\",\n    select=[\"UnitTypeKey\", \"UnitType\", \"Description\"]\n)\n\n# Get unit types with property relationships\nunit_types = client.property_unit_types.get_property_unit_types(\n    expand=\"Properties\",\n    top=10\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_residential_unit_types","title":"<code>get_residential_unit_types(**kwargs)</code>","text":"<p>Get residential unit types.</p> <p>Convenience method to filter for common residential unit types. Excludes commercial and other non-residential unit types.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing residential unit types</p> Example <pre><code># Get all residential unit types\nresidential_units = client.property_unit_types.get_residential_unit_types()\n\nfor unit in residential_units.get('value', []):\n    print(f\"Residential Unit: {unit['UnitType']}\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_unit_types_by_type","title":"<code>get_unit_types_by_type(unit_type, **kwargs)</code>","text":"<p>Get properties by unit type.</p> <p>Convenience method to filter unit types by type name. Useful for finding all instances of a specific unit type.</p> <p>Parameters:</p> Name Type Description Default <code>unit_type</code> <code>str</code> <p>Unit type to filter by (e.g., \"Condo\", \"Townhome\")</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing unit types matching the specified type</p> Example <pre><code># Get all condo unit types\ncondos = client.property_unit_types.get_unit_types_by_type(\n    unit_type=\"Condo\",\n    expand=\"Properties\"\n)\n\n# Get all townhome unit types\ntownhomes = client.property_unit_types.get_unit_types_by_type(\"Townhome\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_unit_types_for_property","title":"<code>get_unit_types_for_property(listing_key, **kwargs)</code>","text":"<p>Get unit types for a specific property.</p> <p>Convenience method to retrieve unit type information for a property. Useful for understanding what types of units a property contains.</p> <p>Parameters:</p> Name Type Description Default <code>listing_key</code> <code>str</code> <p>Property listing key to filter by</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing unit types for the specified property</p> Example <pre><code># Get unit types for a property\nproperty_units = client.property_unit_types.get_unit_types_for_property(\n    listing_key=\"1611952\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.property_unit_types.PropertyUnitTypesClient.get_unit_types_with_properties","title":"<code>get_unit_types_with_properties(**kwargs)</code>","text":"<p>Get unit types with their property information expanded.</p> <p>This is a convenience method that automatically expands property relationships to include property details in the response. More efficient than making separate requests for unit types and properties.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing unit type data with expanded property relationships</p> Example <pre><code># Get unit types with property information\nunits_with_props = client.property_unit_types.get_unit_types_with_properties(\n    top=10\n)\n\n# Access property info for first unit type\nfirst_unit = units_with_props['value'][0]\nif 'Properties' in first_unit:\n    properties = first_unit['Properties']\n    print(f\"Unit type {first_unit['UnitType']} has {len(properties)} properties\")\n</code></pre>"},{"location":"api/specialized/#common-unit-types-patterns","title":"Common Unit Types Patterns","text":"Basic Unit Type RetrievalUnit Type Analysis <pre><code># Get all property unit types\nall_types = client.property_unit_types.get_property_unit_types(top=100)\n\n# Get residential unit types\nresidential_types = client.property_unit_types.get_residential_unit_types()\n\n# Get commercial unit types  \ncommercial_types = client.property_unit_types.get_commercial_unit_types()\n\n# Get unit types with specific classification\ncondo_types = client.property_unit_types.get_property_unit_types(\n    filter_query=\"contains(tolower(PropertyUnitTypeName), 'condo')\"\n)\n</code></pre> <pre><code># Analyze unit type distribution\ndef analyze_unit_types(client):\n    unit_types = client.property_unit_types.get_property_unit_types(\n        select=\"PropertyUnitTypeKey,PropertyUnitTypeName,PropertyUnitTypeCategory\",\n        top=200\n    )\n\n    analysis = {\n        'total_types': 0,\n        'by_category': {},\n        'categories': []\n    }\n\n    for unit_type in unit_types.get('value', []):\n        analysis['total_types'] += 1\n\n        category = unit_type.get('PropertyUnitTypeCategory', 'Unknown')\n        if category not in analysis['by_category']:\n            analysis['by_category'][category] = []\n\n        analysis['by_category'][category].append({\n            'key': unit_type.get('PropertyUnitTypeKey'),\n            'name': unit_type.get('PropertyUnitTypeName', 'Unknown')\n        })\n\n    analysis['categories'] = list(analysis['by_category'].keys())\n    return analysis\n</code></pre>"},{"location":"api/specialized/#resource-api","title":"Resource API","text":"<p>The Resource API provides access to API resource metadata, including field definitions, data types, and resource relationships.</p> <p>Quick Start</p> <pre><code># Get all resources\nresources = client.resource.get_resources()\n\n# Get Property resource metadata\nproperty_resource = client.resource.get_resource_by_name(\"Property\")\n\n# Get specific resource by key\nresource_detail = client.resource.get_resource(\"PropertyResourceKey\")\n</code></pre>"},{"location":"api/specialized/#resource-client","title":"Resource Client","text":""},{"location":"api/specialized/#wfrmls.resource.ResourceClient","title":"<code>wfrmls.resource.ResourceClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client for resource metadata API endpoints.</p> <p>The Resource endpoint provides metadata about API resources, including field definitions, data types, and relationships. This is essential for understanding the structure and capabilities of each resource.</p>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.__init__","title":"<code>__init__(bearer_token=None, base_url=None)</code>","text":"<p>Initialize the resource client.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>Optional[str]</code> <p>Bearer token for authentication</p> <code>None</code> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the API</p> <code>None</code>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.get_modified_resources","title":"<code>get_modified_resources(since, **kwargs)</code>","text":"<p>Get resources modified since a specific date/time.</p> <p>Used for incremental data synchronization to get only resource records that have been updated since the last sync. Useful for monitoring schema changes and updates to resource definitions.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>Union[str, date, datetime]</code> <p>ISO format datetime string, date object, or datetime object for cutoff time</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing resources modified since the specified time</p> Example <pre><code>from datetime import datetime, timedelta\n\n# Get resources modified in last month\ncutoff_time = datetime.utcnow() - timedelta(days=30)\nupdates = client.resource.get_modified_resources(\n    since=cutoff_time\n)\n\n# Get resources modified since a specific date\nupdates = client.resource.get_modified_resources(\n    since=\"2023-01-01T00:00:00Z\",\n    orderby=\"ModificationTimestamp desc\"\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.get_resource","title":"<code>get_resource(resource_key)</code>","text":"<p>Get resource by resource key.</p> <p>Retrieves a single resource record by its unique key. This is the most efficient way to get detailed information about a specific API resource and its metadata.</p> <p>Parameters:</p> Name Type Description Default <code>resource_key</code> <code>str</code> <p>Resource key to retrieve (unique identifier)</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing resource data for the specified record</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>If the resource with the given key is not found</p> <code>WFRMLSError</code> <p>If the API request fails</p> Example <pre><code># Get specific resource by key\nresource = client.resource.get_resource(\"Property\")\n\nprint(f\"Resource Name: {resource['ResourceName']}\")\nprint(f\"Standard Name: {resource.get('StandardName', 'Unknown')}\")\nprint(f\"Description: {resource.get('Description', 'No description')}\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.get_resource_by_name","title":"<code>get_resource_by_name(resource_name, **kwargs)</code>","text":"<p>Get resource by resource name.</p> <p>Convenience method to filter resources by name. Useful for finding information about a specific resource type.</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>Resource name to filter by (e.g., \"Property\", \"Member\")</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing resources matching the specified name</p> Example <pre><code># Get Property resource information\nproperty_resource = client.resource.get_resource_by_name(\n    resource_name=\"Property\",\n    expand=\"Fields\"\n)\n\n# Get Member resource information\nmember_resource = client.resource.get_resource_by_name(\"Member\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.get_resources","title":"<code>get_resources(top=None, skip=None, filter_query=None, select=None, orderby=None, expand=None, count=None)</code>","text":"<p>Get resource metadata with optional OData filtering.</p> <p>This method retrieves resource metadata with full OData v4.0 query support. Provides detailed information about API resources, fields, and capabilities.</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>Optional[int]</code> <p>Number of results to return (OData $top, max 200 per API limit)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (OData $skip) - use with caution for large datasets</p> <code>None</code> <code>filter_query</code> <code>Optional[str]</code> <p>OData filter query string for complex filtering</p> <code>None</code> <code>select</code> <code>Optional[Union[List[str], str]]</code> <p>Fields to select (OData $select) - can be list or comma-separated string</p> <code>None</code> <code>orderby</code> <code>Optional[str]</code> <p>Order by clause (OData $orderby) for result sorting</p> <code>None</code> <code>expand</code> <code>Optional[Union[List[str], str]]</code> <p>Related resources to include (OData $expand) - can be list or comma-separated string</p> <code>None</code> <code>count</code> <code>Optional[bool]</code> <p>Include total count in results (OData $count)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing resource metadata with structure: - @odata.context: Metadata URL - @odata.count: Total count (if requested) - @odata.nextLink: Next page URL (if more results available) - value: List of resource records</p> <p>Raises:</p> Type Description <code>WFRMLSError</code> <p>If the API request fails</p> <code>ValidationError</code> <p>If OData query parameters are invalid</p> <code>RateLimitError</code> <p>If the rate limit is exceeded</p> Example <pre><code># Get all resource metadata\nresources = client.resource.get_resources()\n\n# Get specific resource information\nresources = client.resource.get_resources(\n    filter_query=\"ResourceName eq 'Property'\",\n    select=[\"ResourceName\", \"StandardName\", \"Description\"]\n)\n\n# Get resources with field information\nresources = client.resource.get_resources(\n    expand=\"Fields\",\n    top=10\n)\n</code></pre>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.get_resources_with_fields","title":"<code>get_resources_with_fields(**kwargs)</code>","text":"<p>Get resources with their field information expanded.</p> <p>This is a convenience method that automatically expands field relationships to include detailed field metadata in the response. More efficient than making separate requests for resources and fields.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>OData parameters (top, filter_query, select, etc.)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing resource data with expanded field relationships</p> Example <pre><code># Get all resources with field information\nresources_with_fields = client.resource.get_resources_with_fields(top=10)\n\n# Access field info for first resource\nfirst_resource = resources_with_fields['value'][0]\nif 'Fields' in first_resource:\n    fields = first_resource['Fields']\n    print(f\"Resource {first_resource['ResourceName']} has {len(fields)} fields\")\n</code></pre>"},{"location":"api/specialized/#wfrmls.resource.ResourceClient.get_standard_resources","title":"<code>get_standard_resources(**kwargs)</code>","text":"<p>Get standard RESO resources.</p> <p>Convenience method to filter for standard RESO-defined resources. These are the core resources defined by the RESO standard.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional OData parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing standard RESO resources</p> Example <pre><code># Get all standard resources\nstandard_resources = client.resource.get_standard_resources()\n\nfor resource in standard_resources.get('value', []):\n    print(f\"Standard Resource: {resource['StandardName']}\")\n</code></pre>"},{"location":"api/specialized/#common-resource-patterns","title":"Common Resource Patterns","text":"Resource DiscoveryField Analysis <pre><code># Get all available resources\nall_resources = client.resource.get_resources(top=50)\n\n# Get resources with field information\nresources_with_fields = client.resource.get_resources_with_fields()\n\n# Get specific resource metadata\nproperty_resource = client.resource.get_resource_by_name(\"Property\")\n\n# Discover resource capabilities\ndef discover_resources(client):\n    resources = client.resource.get_resources(\n        select=\"ResourceName,ResourceDescription,ResourcePath\"\n    )\n\n    discovery = {\n        'available_resources': [],\n        'total_count': 0\n    }\n\n    for resource in resources.get('value', []):\n        discovery['total_count'] += 1\n        discovery['available_resources'].append({\n            'name': resource.get('ResourceName', 'Unknown'),\n            'description': resource.get('ResourceDescription', ''),\n            'path': resource.get('ResourcePath', '')\n        })\n\n    return discovery\n</code></pre> <pre><code># Analyze resource fields\ndef analyze_resource_fields(client, resource_name=\"Property\"):\n    try:\n        resource = client.resource.get_resource_by_name(resource_name)\n        fields_info = client.resource.get_resource_fields(resource_name)\n\n        analysis = {\n            'resource_name': resource_name,\n            'total_fields': 0,\n            'field_types': {},\n            'required_fields': [],\n            'optional_fields': []\n        }\n\n        for field in fields_info.get('value', []):\n            analysis['total_fields'] += 1\n\n            field_type = field.get('FieldType', 'Unknown')\n            analysis['field_types'][field_type] = analysis['field_types'].get(field_type, 0) + 1\n\n            field_name = field.get('FieldName', '')\n            is_required = field.get('IsRequired', False)\n\n            if is_required:\n                analysis['required_fields'].append(field_name)\n            else:\n                analysis['optional_fields'].append(field_name)\n\n        return analysis\n\n    except Exception as e:\n        return {'error': f'Could not analyze fields for {resource_name}: {e}'}\n</code></pre>"},{"location":"api/specialized/#integration-examples","title":"Integration Examples","text":""},{"location":"api/specialized/#data-synchronization-system","title":"Data Synchronization System","text":"<pre><code>def create_sync_system(client):\n    \"\"\"Create a comprehensive data synchronization system.\"\"\"\n\n    sync_manager = {\n        'last_sync_times': {},\n        'deletion_log': [],\n        'resource_metadata': {}\n    }\n\n    def initialize_sync():\n        # Get available resources\n        resources = client.resource.get_resources()\n        for resource in resources.get('value', []):\n            resource_name = resource.get('ResourceName', '')\n            if resource_name:\n                sync_manager['last_sync_times'][resource_name] = datetime.utcnow().isoformat() + \"Z\"\n                sync_manager['resource_metadata'][resource_name] = resource\n\n        return f\"Initialized sync for {len(sync_manager['last_sync_times'])} resources\"\n\n    def sync_deletions(resource_name=None):\n        if resource_name and resource_name in sync_manager['last_sync_times']:\n            last_sync = sync_manager['last_sync_times'][resource_name]\n\n            deletions = client.deleted.get_deleted_since(\n                since=last_sync,\n                resource_name=resource_name\n            )\n\n            for deletion in deletions.get('value', []):\n                sync_manager['deletion_log'].append({\n                    'resource': resource_name,\n                    'record_key': deletion.get('ResourceRecordKey'),\n                    'deleted_at': deletion.get('DeletedDateTime'),\n                    'synced_at': datetime.utcnow().isoformat() + \"Z\"\n                })\n\n            # Update last sync time\n            sync_manager['last_sync_times'][resource_name] = datetime.utcnow().isoformat() + \"Z\"\n\n            return f\"Synced {len(deletions.get('value', []))} deletions for {resource_name}\"\n        else:\n            return \"Resource not found or not initialized\"\n\n    def get_sync_status():\n        return {\n            'resources_tracked': len(sync_manager['last_sync_times']),\n            'total_deletions_synced': len(sync_manager['deletion_log']),\n            'last_sync_times': sync_manager['last_sync_times']\n        }\n\n    return {\n        'initialize': initialize_sync,\n        'sync_deletions': sync_deletions,\n        'get_status': get_sync_status,\n        'manager': sync_manager\n    }\n\n# Usage\nsync_system = create_sync_system(client)\nprint(sync_system['initialize']())\nprint(sync_system['sync_deletions']('Property'))\nprint(sync_system['get_status']())\n</code></pre>"},{"location":"api/specialized/#comprehensive-system-health-check","title":"Comprehensive System Health Check","text":"<pre><code>def perform_comprehensive_health_check(client):\n    \"\"\"Perform health check across all specialized APIs.\"\"\"\n\n    health_report = {\n        'timestamp': datetime.utcnow().isoformat() + \"Z\",\n        'overall_status': 'HEALTHY',\n        'api_status': {},\n        'issues': []\n    }\n\n    # Test ADU API\n    try:\n        adus = client.adu.get_adus(top=5)\n        health_report['api_status']['ADU'] = {\n            'status': 'OK',\n            'record_count': len(adus.get('value', [])),\n            'response_time': 'N/A'  # Would need timing logic\n        }\n    except Exception as e:\n        health_report['api_status']['ADU'] = {'status': 'ERROR', 'error': str(e)}\n        health_report['issues'].append(f'ADU API: {str(e)}')\n\n    # Test Deleted Records API\n    try:\n        deleted = client.deleted.get_deleted(top=5)\n        health_report['api_status']['Deleted'] = {\n            'status': 'OK',\n            'record_count': len(deleted.get('value', [])),\n            'response_time': 'N/A'\n        }\n    except Exception as e:\n        health_report['api_status']['Deleted'] = {'status': 'ERROR', 'error': str(e)}\n        health_report['issues'].append(f'Deleted Records API: {str(e)}')\n\n    # Test Property Unit Types API\n    try:\n        unit_types = client.property_unit_types.get_property_unit_types(top=5)\n        health_report['api_status']['PropertyUnitTypes'] = {\n            'status': 'OK',\n            'record_count': len(unit_types.get('value', [])),\n            'response_time': 'N/A'\n        }\n    except Exception as e:\n        health_report['api_status']['PropertyUnitTypes'] = {'status': 'ERROR', 'error': str(e)}\n        health_report['issues'].append(f'Property Unit Types API: {str(e)}')\n\n    # Test Resource API\n    try:\n        resources = client.resource.get_resources(top=5)\n        health_report['api_status']['Resource'] = {\n            'status': 'OK',\n            'record_count': len(resources.get('value', [])),\n            'response_time': 'N/A'\n        }\n    except Exception as e:\n        health_report['api_status']['Resource'] = {'status': 'ERROR', 'error': str(e)}\n        health_report['issues'].append(f'Resource API: {str(e)}')\n\n    # Determine overall status\n    error_count = sum(1 for api in health_report['api_status'].values() if api['status'] == 'ERROR')\n    if error_count &gt; 0:\n        health_report['overall_status'] = 'ERROR' if error_count &gt;= 2 else 'WARNING'\n\n    return health_report\n\n# Usage\nhealth_check = perform_comprehensive_health_check(client)\nstatus_icon = {'HEALTHY': '\u2705', 'WARNING': '\u26a0\ufe0f', 'ERROR': '\u274c'}.get(health_check['overall_status'], '\u2753')\n\nprint(f\"\ud83c\udfe5 Specialized APIs Health Check: {status_icon} {health_check['overall_status']}\")\nfor api_name, status in health_check['api_status'].items():\n    api_icon = \"\u2705\" if status['status'] == 'OK' else \"\u274c\"\n    print(f\"   {api_icon} {api_name}: {status['status']}\")\n    if status['status'] == 'OK':\n        print(f\"      Records: {status['record_count']}\")\n\nif health_check['issues']:\n    print(f\"\\n\u26a0\ufe0f Issues Detected:\")\n    for issue in health_check['issues']:\n        print(f\"   - {issue}\")\n</code></pre>"},{"location":"api/specialized/#error-handling","title":"Error Handling","text":"<pre><code>from wfrmls.exceptions import NotFoundError, ValidationError\n\n# ADU API error handling\ntry:\n    adus = client.adu.get_adus_for_property(\"invalid_property_id\")\nexcept NotFoundError:\n    print(\"\u274c Property not found or has no ADUs\")\nexcept Exception as e:\n    print(f\"\ud83d\udea8 ADU API error: {e}\")\n\n# Deleted Records API error handling\ntry:\n    deleted = client.deleted.get_deleted_since(\"invalid_date\")\nexcept ValidationError as e:\n    print(f\"\ud83d\udcdd Invalid date format: {e}\")\nexcept Exception as e:\n    print(f\"\ud83d\udea8 Deleted Records API error: {e}\")\n</code></pre>"},{"location":"api/specialized/#performance-tips","title":"Performance Tips","text":"<p>Specialized APIs Optimization</p> <p>Caching Strategies</p> <ul> <li>ADU data changes infrequently - cache for hours</li> <li>Property Unit Types rarely change - cache for days</li> <li>Resource metadata is static - cache for extended periods</li> <li>Deleted records need frequent updates for sync accuracy</li> </ul> <p>Efficient Queries</p> <p>```python</p>"},{"location":"api/specialized/#efficient-adu-queries","title":"Efficient ADU queries","text":"<p>recent_adus = client.adu.get_adus(     filter_query=\"ModificationTimestamp ge '2024-01-01T00:00:00Z'\",     select=\"AduKey,AduType,AduStatus,PropertyKey\",     top=100 )</p>"},{"location":"api/specialized/#efficient-deletion-tracking","title":"Efficient deletion tracking","text":"<p>recent_deletions = client.deleted.get_deleted(     filter_query=\"DeletedDateTime ge '2024-01-15T00:00:00Z'\",     select=\"ResourceName,ResourceRecordKey,DeletedDateTime\",     orderby=\"DeletedDateTime desc\" )</p>"},{"location":"development/","title":"Development","text":"<p>Welcome to the WFRMLS development documentation! This section contains everything you need to contribute to the project, set up development environments, and understand the codebase.</p>"},{"location":"development/#developer-resources","title":"\ud83d\udee0\ufe0f Developer Resources","text":"<ul> <li> <p> Contributing</p> <p>Guidelines for contributing code, documentation, and reporting issues</p> <p> Contributing Guide</p> </li> <li> <p> Development Setup</p> <p>Set up your local development environment</p> <p> Development Setup</p> </li> <li> <p> Testing</p> <p>Running tests, writing test cases, and ensuring code quality</p> <p> Testing Guide</p> </li> <li> <p> Deployment</p> <p>Deployment processes, CI/CD, and release management</p> <p> Deployment</p> </li> <li> <p> Style Guide</p> <p>Code style conventions and formatting standards</p> <p> Style Guide</p> </li> </ul>"},{"location":"development/#quick-start-for-contributors","title":"Quick Start for Contributors","text":""},{"location":"development/#1-fork-and-clone","title":"1. Fork and Clone","text":"<pre><code># Fork the repository on GitHub\ngit clone https://github.com/YOUR_USERNAME/wfrmls.git\ncd wfrmls\n</code></pre>"},{"location":"development/#2-set-up-environment","title":"2. Set Up Environment","text":"<pre><code># Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"development/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=wfrmls --cov-report=html\n</code></pre>"},{"location":"development/#4-make-changes","title":"4. Make Changes","text":"<pre><code># Create feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes...\n# Run tests and linting\npytest\nblack wfrmls/ tests/\nflake8 wfrmls/ tests/\n\n# Commit and push\ngit commit -m \"Add: your feature description\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"development/#5-submit-pull-request","title":"5. Submit Pull Request","text":"<p>Open a pull request on GitHub with a clear description of your changes.</p>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#standard-process","title":"\ud83d\udd04 Standard Process","text":"<ol> <li>Issue First: Create or find an issue to work on</li> <li>Branch: Create a feature branch from <code>main</code></li> <li>Develop: Write code following our style guide</li> <li>Test: Ensure all tests pass and add new tests</li> <li>Document: Update documentation as needed</li> <li>Review: Submit PR for code review</li> <li>Merge: Maintainer merges after approval</li> </ol>"},{"location":"development/#commit-conventions","title":"\ud83d\udcdd Commit Conventions","text":"<p>We follow conventional commits:</p> <ul> <li><code>feat:</code> New features</li> <li><code>fix:</code> Bug fixes</li> <li><code>docs:</code> Documentation changes</li> <li><code>style:</code> Code style changes</li> <li><code>refactor:</code> Code refactoring</li> <li><code>test:</code> Test additions/changes</li> <li><code>chore:</code> Maintenance tasks</li> </ul> <p>Example: <code>feat: add property search by radius functionality</code></p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>wfrmls/\n\u251c\u2500\u2500 wfrmls/              # Main package\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 client.py        # Main client class\n\u2502   \u251c\u2500\u2500 properties.py    # Property API client\n\u2502   \u251c\u2500\u2500 members.py       # Member API client\n\u2502   \u251c\u2500\u2500 exceptions.py    # Custom exceptions\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tests/               # Test suite\n\u2502   \u251c\u2500\u2500 unit/           # Unit tests\n\u2502   \u251c\u2500\u2500 integration/    # Integration tests\n\u2502   \u2514\u2500\u2500 fixtures/       # Test data\n\u251c\u2500\u2500 docs/               # Documentation\n\u251c\u2500\u2500 examples/           # Example scripts\n\u251c\u2500\u2500 pyproject.toml      # Project configuration\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"development/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"development/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Test Coverage: Maintain 100% test coverage</li> <li>Type Hints: Use comprehensive type annotations</li> <li>Docstrings: Google-style docstrings for all public APIs</li> <li>Linting: Pass flake8, black, and mypy checks</li> <li>Performance: No performance regressions</li> </ul>"},{"location":"development/#tools-we-use","title":"\ud83d\udd27 Tools We Use","text":"<ul> <li>Testing: pytest, pytest-cov</li> <li>Formatting: black, isort</li> <li>Linting: flake8, mypy</li> <li>Documentation: mkdocs, mkdocstrings</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"development/#getting-help","title":"Getting Help","text":""},{"location":"development/#communication-channels","title":"\ud83d\udcac Communication Channels","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Questions and community chat</li> <li>Pull Requests: Code review and collaboration</li> </ul>"},{"location":"development/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Python Best Practices</li> <li>RESO Standards</li> <li>OData v4 Specification</li> </ul>"},{"location":"development/#recognition","title":"Recognition","text":""},{"location":"development/#contributors","title":"\ud83c\udfc6 Contributors","text":"<p>We appreciate all contributors! Contributors are recognized in: - README.md contributors section - Release notes - GitHub contributor graphs</p>"},{"location":"development/#areas-needing-help","title":"\ud83c\udfaf Areas Needing Help","text":"<p>We especially welcome contributions in: - Documentation improvements - Example applications - Performance optimizations - API endpoint coverage - Error handling enhancements</p>"},{"location":"development/#release-process","title":"Release Process","text":""},{"location":"development/#release-checklist","title":"\ud83d\udccb Release Checklist","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code></li> <li>Create release branch</li> <li>Run full test suite</li> <li>Build and test package</li> <li>Create GitHub release</li> <li>Publish to PyPI</li> </ol>"},{"location":"development/#versioning","title":"\ud83c\udff7\ufe0f Versioning","text":"<p>We follow Semantic Versioning: - <code>MAJOR.MINOR.PATCH</code> - Breaking changes increment MAJOR - New features increment MINOR - Bug fixes increment PATCH</p> <p>Ready to contribute? Start with our Contributing Guide or check out good first issues on GitHub! </p>"},{"location":"development/contributing/","title":"Contributing to WFRMLS Python API Wrapper","text":"<p>Thank you for your interest in contributing to the WFRMLS Python API wrapper! This guide will help you get started with development and ensure your contributions follow our standards.</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>Development Environment</li> <li>Code Standards</li> <li>Documentation Requirements</li> <li>Testing Guidelines</li> <li>Submitting Changes</li> <li>Release Process</li> </ol>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>Access to WFRMLS API (for testing)</li> </ul>"},{"location":"development/contributing/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally:    <code>bash git clone https://github.com/YOUR_USERNAME/wfrmls.git cd wfrmls</code></p> </li> <li> <p>Add the upstream remote:    <pre><code>git remote add upstream https://github.com/theperrygroup/wfrmls.git\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-environment","title":"Development Environment","text":""},{"location":"development/contributing/#1-set-up-virtual-environment","title":"1. Set Up Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate it\n# Linux/macOS:\nsource venv/bin/activate\n# Windows:\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"development/contributing/#2-install-development-dependencies","title":"2. Install Development Dependencies","text":"<pre><code># Install in development mode with all dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"development/contributing/#3-set-up-environment-variables","title":"3. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code>WFRMLS_BEARER_TOKEN=your_test_api_key_here\n</code></pre>"},{"location":"development/contributing/#4-verify-setup","title":"4. Verify Setup","text":"<pre><code># Run tests to verify everything works\npytest\n\n# Check code formatting\nblack --check .\nisort --check-only .\n\n# Run type checking\nmypy wfrmls/\n\n# Run linting\nflake8 wfrmls/\n</code></pre>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":"<p>We follow strict code quality standards to ensure consistency and maintainability.</p>"},{"location":"development/contributing/#code-formatting","title":"Code Formatting","text":"<p>We use Black with isort for code formatting:</p> <pre><code># Format code\nblack .\nisort .\n\n# Check formatting\nblack --check .\nisort --check-only .\n</code></pre>"},{"location":"development/contributing/#type-hints","title":"Type Hints","text":"<p>All code must include comprehensive type hints:</p> <pre><code>from typing import Dict, List, Optional, Any\nfrom datetime import date\n\ndef search_properties(\n    self,\n    city: Optional[str] = None,\n    max_price: Optional[int] = None,\n    date_from: Optional[date] = None,\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"Search properties with type hints for all parameters.\"\"\"\n    # Implementation\n</code></pre>"},{"location":"development/contributing/#docstring-standards","title":"Docstring Standards","text":"<p>Use Google-style docstrings for all public methods:</p> <pre><code>def get_property(self, property_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get detailed information for a specific property.\n\n    Args:\n        property_id: The unique identifier for the property\n\n    Returns:\n        Dictionary containing detailed property information including:\n        - ListingKey: Property identifier\n        - UnparsedAddress: Full address\n        - ListPrice: Current listing price\n        - PropertyType: Type of property\n\n    Raises:\n        WFRMLSError: If the API request fails\n        AuthenticationError: If authentication is invalid\n        ValidationError: If property_id format is invalid\n\n    Example:\n        ```python\n        client = WFRMLSClient()\n        property_data = client.properties.get_property(\"123456\")\n        print(f\"Address: {property_data['UnparsedAddress']}\")\n        ```\n    \"\"\"\n</code></pre>"},{"location":"development/contributing/#error-handling","title":"Error Handling","text":"<p>Use our custom exception hierarchy:</p> <pre><code>from wfrmls.exceptions import WFRMLSError, AuthenticationError, ValidationError\n\ndef example_method(self, param: str) -&gt; Dict[str, Any]:\n    \"\"\"Example method with proper error handling.\"\"\"\n    if not param:\n        raise ValidationError(\"Parameter 'param' is required\")\n\n    try:\n        response = self.get(f\"/endpoint/{param}\")\n        return response\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 401:\n            raise AuthenticationError(\"Invalid API key\")\n        elif e.response.status_code == 404:\n            raise WFRMLSError(f\"Resource not found: {param}\")\n        else:\n            raise WFRMLSError(f\"API error: {e}\")\n</code></pre>"},{"location":"development/contributing/#documentation-requirements","title":"Documentation Requirements","text":""},{"location":"development/contributing/#automatic-documentation-updates","title":"Automatic Documentation Updates","text":"<p>CRITICAL: When making any code changes, you MUST update documentation following our Documentation Maintenance Rules.</p>"},{"location":"development/contributing/#documentation-checklist","title":"Documentation Checklist","text":"<p>For every change: - [ ] Updated docstrings with new parameters/behavior - [ ] Updated examples in <code>docs/examples.md</code> if applicable - [ ] Updated <code>docs/api-reference.md</code> for new/changed endpoints - [ ] Added entries to <code>docs/changelog.md</code> for user-facing changes - [ ] Verified all examples still work - [ ] Updated type hints throughout</p>"},{"location":"development/contributing/#documentation-testing","title":"Documentation Testing","text":"<p>Test your documentation changes:</p> <pre><code># Test code examples in documentation\npython -m doctest docs/examples.md\n\n# Verify all examples are runnable\npython scripts/test_examples.py  # If such script exists\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<p>We maintain 100% test coverage. Tests are organized by module:</p> <pre><code>tests/\n\u251c\u2500\u2500 test_properties.py      # Properties client tests\n\u251c\u2500\u2500 test_member.py          # Member client tests\n\u251c\u2500\u2500 test_office.py          # Office client tests\n\u251c\u2500\u2500 test_media.py           # Media client tests\n\u251c\u2500\u2500 test_analytics.py       # Analytics client tests\n\u251c\u2500\u2500 test_exceptions.py      # Exception handling tests\n\u2514\u2500\u2500 test_base_client.py     # Base client functionality\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/contributing/#test-class-structure","title":"Test Class Structure","text":"<pre><code>\"\"\"Tests for the properties client.\"\"\"\n\nimport pytest\nimport responses\nfrom datetime import date\n\nfrom wfrmls.properties import PropertiesClient\nfrom wfrmls.exceptions import WFRMLSError, ValidationError\n\n\nclass TestPropertiesClientInit:\n    \"\"\"Test PropertiesClient initialization.\"\"\"\n\n    def test_init_with_api_key(self) -&gt; None:\n        \"\"\"Test initialization with provided API key.\"\"\"\n        client = PropertiesClient(api_key=\"test_key\")\n        assert client.api_key == \"test_key\"\n\n    def test_init_without_api_key_raises_error(self) -&gt; None:\n        \"\"\"Test initialization without API key raises AuthenticationError.\"\"\"\n        with pytest.raises(AuthenticationError):\n            PropertiesClient()\n\n\nclass TestPropertiesClientMethods:\n    \"\"\"Test PropertiesClient methods.\"\"\"\n\n    def setup_method(self) -&gt; None:\n        \"\"\"Set up test client for each test method.\"\"\"\n        self.client = PropertiesClient(api_key=\"test_key\")\n\n    @responses.activate\n    def test_search_properties_success(self) -&gt; None:\n        \"\"\"Test successful property search.\"\"\"\n        # Mock API response\n        responses.add(\n            responses.GET,\n            \"https://api.wfrmls.com/reso/odata/Property\",\n            json=[\n                {\n                    \"ListingKey\": \"123456\",\n                    \"UnparsedAddress\": \"123 Main St, Salt Lake City, UT\",\n                    \"ListPrice\": 450000\n                }\n            ],\n            status=200\n        )\n\n        # Test method\n        properties = self.client.search_properties(city=\"Salt Lake City\")\n\n        # Assertions\n        assert len(properties) == 1\n        assert properties[0][\"ListingKey\"] == \"123456\"\n        assert properties[0][\"ListPrice\"] == 450000\n\n    @responses.activate\n    def test_search_properties_with_filters(self) -&gt; None:\n        \"\"\"Test property search with multiple filters.\"\"\"\n        responses.add(\n            responses.GET,\n            \"https://api.wfrmls.com/reso/odata/Property\",\n            json=[],\n            status=200\n        )\n\n        properties = self.client.search_properties(\n            city=\"Salt Lake City\",\n            min_list_price=200000,\n            max_list_price=500000,\n            property_type=\"Residential\"\n        )\n\n        assert isinstance(properties, list)\n\n    def test_search_properties_invalid_parameters(self) -&gt; None:\n        \"\"\"Test search with invalid parameters raises ValidationError.\"\"\"\n        with pytest.raises(ValidationError):\n            self.client.search_properties(min_list_price=-1000)\n</code></pre>"},{"location":"development/contributing/#integration-tests","title":"Integration Tests","text":"<p>For testing against real API endpoints:</p> <pre><code>import os\nimport pytest\n\n@pytest.mark.integration\nclass TestPropertiesIntegration:\n    \"\"\"Integration tests for properties client.\"\"\"\n\n    @pytest.fixture(scope=\"class\")\n    def client(self):\n        \"\"\"Create client for integration tests.\"\"\"\n        api_key = os.getenv(\"WFRMLS_BEARER_TOKEN\")\n        if not api_key:\n            pytest.skip(\"Integration tests require WFRMLS_BEARER_TOKEN\")\n        return PropertiesClient(api_key=api_key)\n\n    def test_search_properties_real_api(self, client):\n        \"\"\"Test search against real API.\"\"\"\n        properties = client.search_properties(\n            city=\"Salt Lake City\",\n            page_size=5  # Small number for testing\n        )\n        assert isinstance(properties, list)\n        if properties:  # Only check if results exist\n            assert \"ListingKey\" in properties[0]\n</code></pre>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests with coverage\npytest --cov=wfrmls --cov-report=html\n\n# Run specific test file\npytest tests/test_properties.py\n\n# Run with specific markers\npytest -m \"not integration\"  # Skip integration tests\npytest -m \"integration\"      # Run only integration tests\n\n# Run specific test method\npytest tests/test_properties.py::TestPropertiesClient::test_search_properties_success\n</code></pre>"},{"location":"development/contributing/#test-coverage","title":"Test Coverage","text":"<p>Maintain 100% test coverage:</p> <pre><code># Generate coverage report\npytest --cov=wfrmls --cov-report=term-missing\n\n# Generate HTML coverage report\npytest --cov=wfrmls --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"development/contributing/#branch-workflow","title":"Branch Workflow","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/description-of-change\n</code></pre></p> </li> <li> <p>Make your changes following all guidelines above</p> </li> <li> <p>Add tests for new functionality</p> </li> <li> <p>Update documentation (following our documentation rules)</p> </li> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"feat: add property search filtering\n\n- Add support for price range filtering\n- Add city and property type filters\n- Update documentation with examples\n- Add comprehensive tests\n\nFixes #123\"\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#commit-message-format","title":"Commit Message Format","text":"<p>Use conventional commits:</p> <ul> <li><code>feat:</code> New features</li> <li><code>fix:</code> Bug fixes</li> <li><code>docs:</code> Documentation changes</li> <li><code>test:</code> Test additions/changes</li> <li><code>refactor:</code> Code refactoring</li> <li><code>chore:</code> Maintenance tasks</li> </ul>"},{"location":"development/contributing/#pre-commit-checks","title":"Pre-commit Checks","text":"<p>Before submitting, ensure all checks pass:</p> <pre><code># Format code\nblack .\nisort .\n\n# Run all tests\npytest --cov=wfrmls\n\n# Type checking\nmypy wfrmls/\n\n# Linting\nflake8 wfrmls/\n\n# Check documentation\n# Verify examples work and are up to date\n</code></pre>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Push your branch to your fork:    <pre><code>git push origin feature/description-of-change\n</code></pre></p> </li> <li> <p>Create a pull request on GitHub</p> </li> <li> <p>Fill out the pull request template completely</p> </li> <li> <p>Ensure all CI checks pass</p> </li> <li> <p>Address any review feedback</p> </li> </ol>"},{"location":"development/contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of the changes made.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] Tests pass locally\n- [ ] Added tests for new functionality\n- [ ] Updated documentation\n- [ ] Verified examples work\n\n## Documentation\n- [ ] Updated docstrings\n- [ ] Updated API reference if needed\n- [ ] Updated examples if needed\n- [ ] Updated changelog for user-facing changes\n\n## Checklist\n- [ ] My code follows the style guidelines\n- [ ] I have performed a self-review of my code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n</code></pre>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#version-bumping","title":"Version Bumping","text":"<p>When preparing a release:</p> <ol> <li> <p>Update version in <code>pyproject.toml</code>:    <pre><code>version = \"1.1.0\"\n</code></pre></p> </li> <li> <p>Update version in <code>wfrmls/__init__.py</code>:    <pre><code>__version__ = \"1.1.0\"\n</code></pre></p> </li> <li> <p>Update <code>docs/changelog.md</code> with release notes</p> </li> <li> <p>Create release commit:    <pre><code>git commit -m \"chore: bump version to 1.1.0\"\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ul> <li> All tests pass</li> <li> Documentation is up to date</li> <li> Changelog is updated</li> <li> Version numbers are consistent</li> <li> Examples work with new version</li> <li> Breaking changes are documented</li> </ul>"},{"location":"development/contributing/#publishing","title":"Publishing","text":"<ol> <li> <p>Tag the release:    <pre><code>git tag v1.1.0\ngit push origin v1.1.0\n</code></pre></p> </li> <li> <p>Build and test package:    <pre><code>python -m build\npython -m twine check dist/*\n</code></pre></p> </li> <li> <p>Publish to PyPI:    <pre><code>python -m twine upload dist/*\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#development-questions","title":"Development Questions","text":"<ul> <li>Check existing GitHub Issues</li> <li>Review the Style Guide</li> <li>Look at existing code patterns in the codebase</li> </ul>"},{"location":"development/contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ul> <li>Ensure Python 3.8+ is installed</li> <li>Use virtual environments</li> <li>Install development dependencies</li> <li>Set up API key for testing</li> </ul>"},{"location":"development/contributing/#common-issues","title":"Common Issues","text":"<p>Import errors: Ensure you installed in development mode with <code>pip install -e \".[dev]\"</code></p> <p>Test failures: Check that your API key is set and valid</p> <p>Type errors: Ensure all public methods have complete type hints</p> <p>Coverage issues: Add tests for all new code paths</p> <p>Remember: Quality contributions include code, tests, and documentation updates. Follow our documentation maintenance rules to ensure your changes are properly documented! </p>"},{"location":"development/deployment/","title":"Deployment Guide","text":"<p>This guide covers deploying and using the WFRMLS Python API wrapper in production environments.</p>"},{"location":"development/deployment/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Production Environment Setup</li> <li>Configuration Management</li> <li>Performance Optimization</li> <li>Monitoring and Logging</li> <li>Security Best Practices</li> <li>CI/CD Pipeline</li> <li>Production Troubleshooting</li> </ol>"},{"location":"development/deployment/#production-environment-setup","title":"Production Environment Setup","text":""},{"location":"development/deployment/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Memory: Minimum 512MB RAM (recommended 2GB+ for high-volume applications)</li> <li>Network: Stable internet connection with access to <code>api.wfrmls.com</code></li> <li>Storage: Sufficient space for logs and temporary files</li> </ul>"},{"location":"development/deployment/#installation-in-production","title":"Installation in Production","text":"<pre><code># Create production virtual environment\npython -m venv /opt/wfrmls-env\nsource /opt/wfrmls-env/bin/activate\n\n# Install from PyPI\npip install wfrmls\n\n# Verify installation\npython -c \"import wfrmls; print(f'WFRMLS version: {wfrmls.__version__}')\"\n</code></pre>"},{"location":"development/deployment/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies if needed\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Set environment variables\nENV PYTHONPATH=/app\nENV PYTHONUNBUFFERED=1\n\n# Run application\nCMD [\"python\", \"your_app.py\"]\n</code></pre> <pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  wfrmls-app:\n    build: .\n    environment:\n      - WFRMLS_BEARER_TOKEN=${WFRMLS_BEARER_TOKEN}\n      - LOG_LEVEL=INFO\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n</code></pre>"},{"location":"development/deployment/#configuration-management","title":"Configuration Management","text":""},{"location":"development/deployment/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables in production:</p> <pre><code># Required\nexport WFRMLS_BEARER_TOKEN=\"your_production_api_key\"\n\n# Optional - Performance tuning\nexport WFRMLS_TIMEOUT=30\nexport WFRMLS_RETRY_ATTEMPTS=3\nexport WFRMLS_RATE_LIMIT_DELAY=0.1\n\n# Optional - Logging\nexport LOG_LEVEL=INFO\nexport LOG_FILE=\"/var/log/wfrmls/app.log\"\n</code></pre>"},{"location":"development/deployment/#configuration-file-pattern","title":"Configuration File Pattern","text":"<pre><code># config.py\nimport os\nfrom typing import Optional\n\nclass WFRMLSConfig:\n    \"\"\"Configuration for WFRMLS client in production.\"\"\"\n\n    # API Configuration\n    API_KEY: str = os.getenv(\"WFRMLS_BEARER_TOKEN\", \"\")\n    BASE_URL: str = os.getenv(\"WFRMLS_BASE_URL\", \"https://api.wfrmls.com\")\n    TIMEOUT: int = int(os.getenv(\"WFRMLS_TIMEOUT\", \"30\"))\n\n    # Rate Limiting\n    RATE_LIMIT_DELAY: float = float(os.getenv(\"WFRMLS_RATE_LIMIT_DELAY\", \"0.1\"))\n    MAX_RETRIES: int = int(os.getenv(\"WFRMLS_MAX_RETRIES\", \"3\"))\n\n    # Logging\n    LOG_LEVEL: str = os.getenv(\"LOG_LEVEL\", \"INFO\")\n    LOG_FILE: Optional[str] = os.getenv(\"LOG_FILE\")\n\n    # Cache settings (if using cache)\n    CACHE_TTL: int = int(os.getenv(\"CACHE_TTL\", \"300\"))  # 5 minutes\n\n    @classmethod\n    def validate(cls) -&gt; None:\n        \"\"\"Validate configuration.\"\"\"\n        if not cls.API_KEY:\n            raise ValueError(\"WFRMLS_BEARER_TOKEN is required\")\n\n        if cls.TIMEOUT &lt;= 0:\n            raise ValueError(\"WFRMLS_TIMEOUT must be positive\")\n\n# Usage\nconfig = WFRMLSConfig()\nconfig.validate()\n</code></pre>"},{"location":"development/deployment/#production-client-setup","title":"Production Client Setup","text":"<pre><code># production_client.py\nimport logging\nimport time\nfrom typing import Dict, Any, Optional\nfrom wfrmls import WFRMLSClient\nfrom wfrmls.exceptions import WFRMLSError, AuthenticationError\n\nclass ProductionWFRMLSClient:\n    \"\"\"Production wrapper for WFRMLS client with error handling and monitoring.\"\"\"\n\n    def __init__(self, config: WFRMLSConfig):\n        self.config = config\n        self.client = WFRMLSClient(api_key=config.API_KEY)\n        self.logger = self._setup_logging()\n\n    def _setup_logging(self) -&gt; logging.Logger:\n        \"\"\"Set up production logging.\"\"\"\n        logger = logging.getLogger(\"wfrmls_production\")\n        logger.setLevel(getattr(logging, self.config.LOG_LEVEL))\n\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        )\n\n        # Console handler\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        logger.addHandler(console_handler)\n\n        # File handler if configured\n        if self.config.LOG_FILE:\n            file_handler = logging.FileHandler(self.config.LOG_FILE)\n            file_handler.setFormatter(formatter)\n            logger.addHandler(file_handler)\n\n        return logger\n\n    def safe_api_call(self, operation_name: str, func, *args, **kwargs) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Execute API call with production error handling.\"\"\"\n        start_time = time.time()\n\n        for attempt in range(self.config.MAX_RETRIES):\n            try:\n                self.logger.info(f\"Executing {operation_name} (attempt {attempt + 1})\")\n                result = func(*args, **kwargs)\n\n                duration = time.time() - start_time\n                self.logger.info(\n                    f\"{operation_name} completed successfully in {duration:.2f}s\"\n                )\n                return result\n\n            except AuthenticationError as e:\n                self.logger.error(f\"{operation_name} authentication failed: {e}\")\n                raise  # Don't retry auth errors\n\n            except WFRMLSError as e:\n                self.logger.warning(\n                    f\"{operation_name} failed (attempt {attempt + 1}): {e}\"\n                )\n\n                if attempt &lt; self.config.MAX_RETRIES - 1:\n                    delay = self.config.RATE_LIMIT_DELAY * (2 ** attempt)\n                    self.logger.info(f\"Retrying in {delay}s...\")\n                    time.sleep(delay)\n                else:\n                    self.logger.error(f\"{operation_name} failed after all retries\")\n                    raise\n\n            except Exception as e:\n                self.logger.error(f\"Unexpected error in {operation_name}: {e}\")\n                if attempt == self.config.MAX_RETRIES - 1:\n                    raise\n\n        return None\n</code></pre>"},{"location":"development/deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/deployment/#connection-pooling","title":"Connection Pooling","text":"<pre><code>import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\nclass OptimizedWFRMLSClient(WFRMLSClient):\n    \"\"\"WFRMLS client optimized for production use.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._setup_session()\n\n    def _setup_session(self):\n        \"\"\"Configure session with connection pooling and retries.\"\"\"\n        # Connection pooling\n        adapter = HTTPAdapter(\n            pool_connections=10,\n            pool_maxsize=20,\n            pool_block=False\n        )\n\n        # Retry strategy\n        retry_strategy = Retry(\n            total=3,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504],\n        )\n\n        adapter.max_retries = retry_strategy\n\n        self.session.mount(\"https://\", adapter)\n        self.session.mount(\"http://\", adapter)\n</code></pre>"},{"location":"development/deployment/#caching-strategy","title":"Caching Strategy","text":"<pre><code>import functools\nimport time\nfrom typing import Dict, Any, Optional\n\nclass CachedWFRMLSClient:\n    \"\"\"WFRMLS client with intelligent caching.\"\"\"\n\n    def __init__(self, client: WFRMLSClient, cache_ttl: int = 300):\n        self.client = client\n        self.cache_ttl = cache_ttl\n        self._cache: Dict[str, Dict[str, Any]] = {}\n\n    def _cache_key(self, method: str, **kwargs) -&gt; str:\n        \"\"\"Generate cache key from method and parameters.\"\"\"\n        key_parts = [method]\n        for k, v in sorted(kwargs.items()):\n            key_parts.append(f\"{k}={v}\")\n        return \"|\".join(key_parts)\n\n    def _is_cache_valid(self, cache_entry: Dict[str, Any]) -&gt; bool:\n        \"\"\"Check if cache entry is still valid.\"\"\"\n        return time.time() - cache_entry[\"timestamp\"] &lt; self.cache_ttl\n\n    def cached_lookup_values(self, lookup_type: str) -&gt; list:\n        \"\"\"Get lookup values with caching (lookup data changes rarely).\"\"\"\n        cache_key = self._cache_key(\"lookup_values\", lookup_type=lookup_type)\n\n        if cache_key in self._cache and self._is_cache_valid(self._cache[cache_key]):\n            return self._cache[cache_key][\"data\"]\n\n        # Fetch from API\n        data = self.client.lookup.get_lookup_values(lookup_type)\n\n        # Cache result\n        self._cache[cache_key] = {\n            \"data\": data,\n            \"timestamp\": time.time()\n        }\n\n        return data\n</code></pre>"},{"location":"development/deployment/#batch-processing","title":"Batch Processing","text":"<pre><code>class BatchProcessor:\n    \"\"\"Efficiently process multiple WFRMLS requests.\"\"\"\n\n    def __init__(self, client: WFRMLSClient, batch_size: int = 50, delay: float = 0.1):\n        self.client = client\n        self.batch_size = batch_size\n        self.delay = delay\n        self.logger = logging.getLogger(__name__)\n\n    def process_properties_batch(self, property_ids: list) -&gt; list:\n        \"\"\"Process multiple property IDs efficiently.\"\"\"\n        results = []\n        failed = []\n\n        for i in range(0, len(property_ids), self.batch_size):\n            batch = property_ids[i:i + self.batch_size]\n\n            self.logger.info(f\"Processing batch {i//self.batch_size + 1}\")\n\n            for property_id in batch:\n                try:\n                    property_data = self.client.properties.get_property(property_id)\n                    results.append(property_data)\n\n                except WFRMLSError as e:\n                    self.logger.warning(f\"Failed to get property {property_id}: {e}\")\n                    failed.append(property_id)\n\n                # Rate limiting\n                time.sleep(self.delay)\n\n        self.logger.info(f\"Processed {len(results)} properties, {len(failed)} failed\")\n        return results\n</code></pre>"},{"location":"development/deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"development/deployment/#application-metrics","title":"Application Metrics","text":"<pre><code>import time\nfrom typing import Dict\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass APIMetrics:\n    \"\"\"Track API usage metrics.\"\"\"\n    total_requests: int = 0\n    successful_requests: int = 0\n    failed_requests: int = 0\n    total_response_time: float = 0.0\n    error_counts: Dict[str, int] = field(default_factory=dict)\n\n    @property\n    def success_rate(self) -&gt; float:\n        if self.total_requests == 0:\n            return 0.0\n        return self.successful_requests / self.total_requests\n\n    @property\n    def average_response_time(self) -&gt; float:\n        if self.successful_requests == 0:\n            return 0.0\n        return self.total_response_time / self.successful_requests\n\nclass MonitoredWFRMLSClient:\n    \"\"\"WFRMLS client with monitoring capabilities.\"\"\"\n\n    def __init__(self, client: WFRMLSClient):\n        self.client = client\n        self.metrics = APIMetrics()\n        self.logger = logging.getLogger(__name__)\n\n    def monitored_request(self, method_name: str, func, *args, **kwargs):\n        \"\"\"Execute request with monitoring.\"\"\"\n        start_time = time.time()\n        self.metrics.total_requests += 1\n\n        try:\n            result = func(*args, **kwargs)\n\n            # Record success\n            response_time = time.time() - start_time\n            self.metrics.successful_requests += 1\n            self.metrics.total_response_time += response_time\n\n            self.logger.info(\n                f\"{method_name} completed in {response_time:.2f}s \"\n                f\"(success rate: {self.metrics.success_rate:.2%})\"\n            )\n\n            return result\n\n        except Exception as e:\n            # Record failure\n            self.metrics.failed_requests += 1\n            error_type = type(e).__name__\n            self.metrics.error_counts[error_type] = self.metrics.error_counts.get(error_type, 0) + 1\n\n            self.logger.error(f\"{method_name} failed: {e}\")\n            raise\n\n    def get_metrics_summary(self) -&gt; Dict[str, Any]:\n        \"\"\"Get current metrics summary.\"\"\"\n        return {\n            \"total_requests\": self.metrics.total_requests,\n            \"success_rate\": f\"{self.metrics.success_rate:.2%}\",\n            \"average_response_time\": f\"{self.metrics.average_response_time:.2f}s\",\n            \"error_counts\": self.metrics.error_counts\n        }\n</code></pre>"},{"location":"development/deployment/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code>from flask import Flask, jsonify\nimport os\n\napp = Flask(__name__)\n\n@app.route('/health')\ndef health_check():\n    \"\"\"Health check endpoint for monitoring systems.\"\"\"\n    try:\n        # Test WFRMLS API connectivity\n        client = WFRMLSClient()\n        resources = client.resource.get_resources()\n\n        return jsonify({\n            \"status\": \"healthy\",\n            \"wfrmls_api\": \"connected\",\n            \"version\": os.getenv(\"APP_VERSION\", \"unknown\"),\n            \"timestamp\": time.time()\n        }), 200\n\n    except Exception as e:\n        return jsonify({\n            \"status\": \"unhealthy\",\n            \"error\": str(e),\n            \"timestamp\": time.time()\n        }), 500\n\n@app.route('/metrics')\ndef metrics():\n    \"\"\"Expose metrics for monitoring.\"\"\"\n    # Return your application metrics\n    return jsonify(monitored_client.get_metrics_summary())\n</code></pre>"},{"location":"development/deployment/#security-best-practices","title":"Security Best Practices","text":""},{"location":"development/deployment/#api-key-management","title":"API Key Management","text":"<pre><code>import os\nfrom cryptography.fernet import Fernet\n\nclass SecureConfig:\n    \"\"\"Secure configuration management.\"\"\"\n\n    @staticmethod\n    def get_api_key() -&gt; str:\n        \"\"\"Get API key from secure source.\"\"\"\n\n        # Option 1: Environment variable (recommended for containers)\n        api_key = os.getenv(\"WFRMLS_BEARER_TOKEN\")\n        if api_key:\n            return api_key\n\n        # Option 2: Encrypted file\n        encrypted_file = os.getenv(\"WFRMLS_KEY_FILE\")\n        if encrypted_file and os.path.exists(encrypted_file):\n            return SecureConfig._decrypt_key_file(encrypted_file)\n\n        # Option 3: Key management service (AWS KMS, HashiCorp Vault, etc.)\n        # Implementation depends on your infrastructure\n\n        raise ValueError(\"No API key found in secure sources\")\n\n    @staticmethod\n    def _decrypt_key_file(file_path: str) -&gt; str:\n        \"\"\"Decrypt API key from file.\"\"\"\n        encryption_key = os.getenv(\"ENCRYPTION_KEY\")\n        if not encryption_key:\n            raise ValueError(\"Encryption key not found\")\n\n        cipher = Fernet(encryption_key.encode())\n\n        with open(file_path, 'rb') as f:\n            encrypted_data = f.read()\n\n        return cipher.decrypt(encrypted_data).decode()\n</code></pre>"},{"location":"development/deployment/#network-security","title":"Network Security","text":"<pre><code>import ssl\nimport certifi\n\n# Configure SSL context for secure connections\ndef create_secure_session():\n    \"\"\"Create session with strict SSL verification.\"\"\"\n    session = requests.Session()\n\n    # Use system certificates\n    session.verify = certifi.where()\n\n    # Configure SSL context\n    context = ssl.create_default_context()\n    context.check_hostname = True\n    context.verify_mode = ssl.CERT_REQUIRED\n\n    return session\n</code></pre>"},{"location":"development/deployment/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"development/deployment/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          pip install -e \".[dev]\"\n\n      - name: Run tests\n        run: |\n          pytest --cov=wfrmls --cov-report=xml\n        env:\n          WFRMLS_BEARER_TOKEN: ${{ secrets.WFRMLS_TEST_TOKEN }}\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Deploy to production\n        run: |\n          # Your deployment commands here\n          echo \"Deploying to production...\"\n        env:\n          WFRMLS_BEARER_TOKEN: ${{ secrets.WFRMLS_PROD_TOKEN }}\n</code></pre>"},{"location":"development/deployment/#deployment-checklist","title":"Deployment Checklist","text":"<p>Before each production deployment:</p> <ul> <li> All tests pass</li> <li> Code coverage remains at target level</li> <li> Documentation is updated</li> <li> API keys are properly configured</li> <li> Monitoring is in place</li> <li> Rollback plan is ready</li> <li> Performance benchmarks are acceptable</li> </ul>"},{"location":"development/deployment/#production-troubleshooting","title":"Production Troubleshooting","text":""},{"location":"development/deployment/#common-production-issues","title":"Common Production Issues","text":"<p>1. Rate Limiting <pre><code># Monitor rate limit headers\ndef check_rate_limits(response):\n    if 'X-RateLimit-Remaining' in response.headers:\n        remaining = int(response.headers['X-RateLimit-Remaining'])\n        if remaining &lt; 10:\n            logger.warning(f\"Rate limit warning: {remaining} requests remaining\")\n</code></pre></p> <p>2. Memory Management <pre><code># Monitor memory usage\nimport psutil\n\ndef check_memory_usage():\n    memory = psutil.virtual_memory()\n    if memory.percent &gt; 80:\n        logger.warning(f\"High memory usage: {memory.percent}%\")\n</code></pre></p> <p>3. Error Recovery <pre><code>def graceful_degradation(func):\n    \"\"\"Decorator for graceful degradation of functionality.\"\"\"\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except WFRMLSError as e:\n            logger.error(f\"API error, falling back to cached data: {e}\")\n            return get_cached_fallback()\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e}\")\n            return None\n    return wrapper\n</code></pre></p>"},{"location":"development/deployment/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Production monitoring commands\n# CPU and memory usage\ntop -p $(pgrep -f \"python.*wfrmls\")\n\n# Network connections\nnetstat -an | grep :443\n\n# Log monitoring\ntail -f /var/log/wfrmls/app.log | grep ERROR\n\n# Disk usage\ndf -h\n</code></pre>"},{"location":"development/deployment/#emergency-procedures","title":"Emergency Procedures","text":"<p>API Service Down: 1. Check WFRMLS status page 2. Enable fallback/cached responses 3. Notify stakeholders 4. Monitor for service restoration</p> <p>High Error Rate: 1. Check API key validity 2. Verify network connectivity 3. Review recent code changes 4. Scale back request rate</p> <p>Memory Issues: 1. Restart application gracefully 2. Clear caches 3. Check for memory leaks 4. Scale up resources if needed</p> <p>Remember to always test deployment procedures in a staging environment that mirrors production as closely as possible. </p>"},{"location":"development/style-guide/","title":"WFRMLS Python API Wrapper Style Guide","text":"<p>This document outlines the coding standards and conventions for the WFRMLS Python API wrapper project. All contributors should follow these guidelines to ensure consistency and maintainability.</p>"},{"location":"development/style-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>General Principles</li> <li>Code Formatting</li> <li>Import Organization</li> <li>Type Hints</li> <li>Documentation</li> <li>Naming Conventions</li> <li>Class Structure</li> <li>Method Implementation</li> <li>Error Handling</li> <li>Enums</li> <li>Testing</li> <li>File Organization</li> </ol>"},{"location":"development/style-guide/#general-principles","title":"General Principles","text":"<ul> <li>Consistency: Follow established patterns in the codebase</li> <li>Readability: Code should be self-documenting and easy to understand</li> <li>Type Safety: Use comprehensive type hints throughout</li> <li>Documentation: All public APIs must have Google-style docstrings</li> <li>Testing: Maintain 100% test coverage</li> <li>Error Handling: Use custom exceptions with meaningful messages</li> </ul>"},{"location":"development/style-guide/#code-formatting","title":"Code Formatting","text":""},{"location":"development/style-guide/#tools-configuration","title":"Tools Configuration","text":"<ul> <li>Black: Line length 88 characters, target Python 3.8+</li> <li>isort: Black-compatible profile, multi-line output 3</li> <li>flake8: Standard configuration</li> <li>mypy: Strict type checking enabled</li> </ul>"},{"location":"development/style-guide/#line-length","title":"Line Length","text":"<ul> <li>Maximum 88 characters per line (Black default)</li> <li>Break long lines at logical points</li> <li>Use parentheses for line continuation when needed</li> </ul>"},{"location":"development/style-guide/#spacing","title":"Spacing","text":"<pre><code># Good\ndef method(self, param1: str, param2: Optional[int] = None) -&gt; Dict[str, Any]:\n    \"\"\"Method with proper spacing.\"\"\"\n    return {\"key\": \"value\"}\n\n# Bad\ndef method(self,param1:str,param2:Optional[int]=None)-&gt;Dict[str,Any]:\n    return {\"key\":\"value\"}\n</code></pre>"},{"location":"development/style-guide/#import-organization","title":"Import Organization","text":"<p>Follow this order (enforced by isort): 1. Standard library imports 2. Third-party imports 3. Local application imports</p> <pre><code>\"\"\"Module docstring.\"\"\"\n\nfrom datetime import date\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union\n\nimport requests\nfrom dotenv import load_dotenv\n\nfrom .base_client import BaseClient\nfrom .exceptions import WFRMLSError\n</code></pre>"},{"location":"development/style-guide/#type-hints","title":"Type Hints","text":""},{"location":"development/style-guide/#required-type-hints","title":"Required Type Hints","text":"<ul> <li>All function/method parameters</li> <li>All function/method return types</li> <li>Class attributes when not obvious</li> <li>Complex variable assignments</li> </ul> <pre><code>def search_teams(\n    self,\n    page_number: Optional[int] = None,\n    page_size: Optional[int] = None,\n    sort_direction: Optional[Union[SortDirection, str]] = None,\n    team_id: Optional[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"Search teams with proper type hints.\"\"\"\n    params: Dict[str, Any] = {}\n    # Implementation...\n</code></pre>"},{"location":"development/style-guide/#type-hint-patterns","title":"Type Hint Patterns","text":"<ul> <li>Use <code>Optional[T]</code> for nullable parameters</li> <li>Use <code>Union[EnumType, str]</code> for enum parameters that accept strings</li> <li>Use <code>Dict[str, Any]</code> for API response data</li> <li>Use <code>List[T]</code> for list parameters</li> <li>Use <code>Union[List[T], T]</code> for parameters that accept single item or list</li> </ul>"},{"location":"development/style-guide/#documentation","title":"Documentation","text":""},{"location":"development/style-guide/#module-docstrings","title":"Module Docstrings","text":"<pre><code>\"\"\"Brief description of the module.\n\nLonger description if needed, explaining the module's purpose\nand main functionality.\n\"\"\"\n</code></pre>"},{"location":"development/style-guide/#class-docstrings","title":"Class Docstrings","text":"<pre><code>class TeamsClient(BaseClient):\n    \"\"\"Client for teams API endpoints.\n\n    This client provides access to team search functionality and team details.\n    Note: This uses a different base URL than the main WFRMLS API.\n    \"\"\"\n</code></pre>"},{"location":"development/style-guide/#method-docstrings","title":"Method Docstrings","text":"<p>Use Google-style docstrings with complete parameter and return documentation:</p> <pre><code>def search_teams(\n    self,\n    page_number: Optional[int] = None,\n    page_size: Optional[int] = None,\n    status: Optional[Union[TeamStatus, str]] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"Search teams given a set of criteria.\n\n    Args:\n        page_number: Page number for pagination (default: 0)\n        page_size: Number of results per page (default: 20, min: 1)\n        status: Filter by team status (ACTIVE or INACTIVE)\n\n    Returns:\n        Dictionary containing team search results with pagination information\n\n    Raises:\n        WFRMLSError: If the API request fails\n        ValidationError: If parameters are invalid\n\n    Example:\n        ```python\n        # Search for active teams\n        teams = client.teams.search_teams(\n            status=TeamStatus.ACTIVE,\n            page_size=50\n        )\n        ```\n    \"\"\"\n</code></pre>"},{"location":"development/style-guide/#documentation-requirements","title":"Documentation Requirements","text":"<ul> <li>All public methods must have docstrings</li> <li>Include parameter descriptions with types and defaults</li> <li>Document return value structure</li> <li>List possible exceptions</li> <li>Provide usage examples for complex methods</li> <li>Use proper Markdown formatting in examples</li> </ul>"},{"location":"development/style-guide/#naming-conventions","title":"Naming Conventions","text":""},{"location":"development/style-guide/#files-and-modules","title":"Files and Modules","text":"<ul> <li>Use snake_case for file names: <code>transaction_builder.py</code></li> <li>Module names should be descriptive and concise</li> </ul>"},{"location":"development/style-guide/#classes","title":"Classes","text":"<ul> <li>Use PascalCase: <code>TransactionBuilderClient</code></li> <li>Client classes should end with \"Client\": <code>TeamsClient</code></li> <li>Exception classes should end with \"Error\": <code>ValidationError</code></li> </ul>"},{"location":"development/style-guide/#methods-and-functions","title":"Methods and Functions","text":"<ul> <li>Use snake_case: <code>search_teams()</code>, <code>get_team_without_agents()</code></li> <li>Use descriptive names that indicate the action</li> <li>Prefix with HTTP method when appropriate: <code>get_</code>, <code>post_</code>, <code>put_</code>, <code>delete_</code></li> </ul>"},{"location":"development/style-guide/#variables","title":"Variables","text":"<ul> <li>Use snake_case: <code>page_number</code>, <code>sort_direction</code></li> <li>Use descriptive names, avoid abbreviations</li> <li>Constants use UPPER_SNAKE_CASE: <code>DEFAULT_PAGE_SIZE</code></li> </ul>"},{"location":"development/style-guide/#parameters","title":"Parameters","text":"<ul> <li>API parameter names should match the API specification</li> <li>Use camelCase for API parameters: <code>pageNumber</code>, <code>sortDirection</code></li> <li>Use snake_case for Python parameter names, convert in method body</li> </ul>"},{"location":"development/style-guide/#class-structure","title":"Class Structure","text":""},{"location":"development/style-guide/#client-class-pattern","title":"Client Class Pattern","text":"<pre><code>class ExampleClient(BaseClient):\n    \"\"\"Client for example API endpoints.\"\"\"\n\n    def __init__(\n        self, api_key: Optional[str] = None, base_url: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"Initialize the client.\n\n        Args:\n            api_key: API key for authentication\n            base_url: Base URL for the API\n        \"\"\"\n        # Set appropriate base URL for this client\n        example_base_url = base_url or \"https://api.example.com/v1\"\n        super().__init__(api_key=api_key, base_url=example_base_url)\n\n    # Public methods in logical order\n    # GET methods first, then POST, PUT, PATCH, DELETE\n</code></pre>"},{"location":"development/style-guide/#property-based-client-access","title":"Property-based Client Access","text":"<pre><code>@property\ndef example_client(self) -&gt; ExampleClient:\n    \"\"\"Access to example endpoints.\n\n    Returns:\n        ExampleClient instance\n    \"\"\"\n    if self._example_client is None:\n        self._example_client = ExampleClient(\n            api_key=self._api_key, base_url=self._base_url\n        )\n    return self._example_client\n</code></pre>"},{"location":"development/style-guide/#method-implementation","title":"Method Implementation","text":""},{"location":"development/style-guide/#parameter-processing-pattern","title":"Parameter Processing Pattern","text":"<pre><code>def search_method(\n    self,\n    required_param: str,\n    optional_param: Optional[int] = None,\n    enum_param: Optional[Union[MyEnum, str]] = None,\n    list_param: Optional[List[Union[MyEnum, str]]] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"Method with standard parameter processing.\"\"\"\n    params: Dict[str, Any] = {}\n\n    # Required parameters (validate if needed)\n    # No need to add to params dict for path parameters\n\n    # Optional simple parameters\n    if optional_param is not None:\n        params[\"optionalParam\"] = optional_param\n\n    # Enum parameters\n    if enum_param is not None:\n        if isinstance(enum_param, MyEnum):\n            params[\"enumParam\"] = enum_param.value\n        else:\n            params[\"enumParam\"] = enum_param\n\n    # List parameters with enum support\n    if list_param is not None:\n        params[\"listParam\"] = [\n            item.value if isinstance(item, MyEnum) else item\n            for item in list_param\n        ]\n\n    return self.get(\"endpoint\", params=params)\n</code></pre>"},{"location":"development/style-guide/#date-parameter-handling","title":"Date Parameter Handling","text":"<pre><code># For date parameters\nif date_param is not None:\n    if isinstance(date_param, date):\n        params[\"dateParam\"] = date_param.isoformat()\n    else:\n        params[\"dateParam\"] = date_param\n</code></pre>"},{"location":"development/style-guide/#error-handling","title":"Error Handling","text":""},{"location":"development/style-guide/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>class WFRMLSError(Exception):\n    \"\"\"Base exception for all WFRMLS API errors.\"\"\"\n\nclass AuthenticationError(WFRMLSError):\n    \"\"\"Raised when authentication fails.\"\"\"\n\nclass ValidationError(WFRMLSError):\n    \"\"\"Raised when request validation fails.\"\"\"\n</code></pre>"},{"location":"development/style-guide/#error-documentation","title":"Error Documentation","text":"<ul> <li>Document all possible exceptions in method docstrings</li> <li>Use specific exception types when appropriate</li> <li>Include helpful error messages with context</li> </ul>"},{"location":"development/style-guide/#enums","title":"Enums","text":""},{"location":"development/style-guide/#enum-definition-pattern","title":"Enum Definition Pattern","text":"<pre><code>class SortDirection(Enum):\n    \"\"\"Sort direction options.\"\"\"\n\n    ASC = \"ASC\"\n    DESC = \"DESC\"\n\n\nclass TeamStatus(Enum):\n    \"\"\"Team status options.\"\"\"\n\n    ACTIVE = \"ACTIVE\"\n    INACTIVE = \"INACTIVE\"\n</code></pre>"},{"location":"development/style-guide/#enum-usage","title":"Enum Usage","text":"<ul> <li>Use descriptive enum names</li> <li>Values should match API specification exactly</li> <li>Include docstring describing the enum's purpose</li> <li>Export enums in <code>__init__.py</code> for public use</li> </ul>"},{"location":"development/style-guide/#testing","title":"Testing","text":""},{"location":"development/style-guide/#test-file-structure","title":"Test File Structure","text":"<pre><code>\"\"\"Tests for the example client.\"\"\"\n\nimport pytest\nimport responses\n\nfrom wfrmls.example import ExampleClient\nfrom wfrmls.exceptions import WFRMLSError\n\n\nclass TestExampleClientInit:\n    \"\"\"Test ExampleClient initialization.\"\"\"\n\n    def test_init_with_api_key(self) -&gt; None:\n        \"\"\"Test initialization with provided API key.\"\"\"\n        # Test implementation\n\n\nclass TestExampleClientMethods:\n    \"\"\"Test ExampleClient methods.\"\"\"\n\n    def setup_method(self) -&gt; None:\n        \"\"\"Set up test client.\"\"\"\n        self.client = ExampleClient(api_key=\"test_key\")\n\n    @responses.activate\n    def test_method_success(self) -&gt; None:\n        \"\"\"Test successful method call.\"\"\"\n        # Test implementation\n</code></pre>"},{"location":"development/style-guide/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>100% code coverage required</li> <li>Test all success paths</li> <li>Test all error conditions</li> <li>Use <code>responses</code> library for HTTP mocking</li> <li>Test parameter validation and conversion</li> <li>Test enum handling</li> <li>Include integration tests where appropriate</li> </ul>"},{"location":"development/style-guide/#test-naming","title":"Test Naming","text":"<ul> <li>Test classes: <code>TestClassName</code></li> <li>Test methods: <code>test_method_name_condition</code></li> <li>Use descriptive names that explain what is being tested</li> </ul>"},{"location":"development/style-guide/#file-organization","title":"File Organization","text":""},{"location":"development/style-guide/#directory-structure","title":"Directory Structure","text":"<pre><code>wfrmls/\n\u251c\u2500\u2500 __init__.py          # Package exports\n\u251c\u2500\u2500 base_client.py       # Base client functionality\n\u251c\u2500\u2500 client.py           # Main client class\n\u251c\u2500\u2500 exceptions.py       # Custom exceptions\n\u251c\u2500\u2500 agents.py          # Agents client\n\u251c\u2500\u2500 teams.py           # Teams client\n\u251c\u2500\u2500 transactions.py    # Transactions client\n\u251c\u2500\u2500 transaction_builder.py  # Transaction builder client\n\u251c\u2500\u2500 directory.py       # Directory client (new)\n\u2514\u2500\u2500 py.typed          # Type hint marker\n\ntests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 test_base_client.py\n\u251c\u2500\u2500 test_client.py\n\u251c\u2500\u2500 test_exceptions.py\n\u251c\u2500\u2500 test_agents.py\n\u251c\u2500\u2500 test_teams.py\n\u251c\u2500\u2500 test_transactions.py\n\u251c\u2500\u2500 test_transaction_builder.py\n\u2514\u2500\u2500 test_directory.py  # Directory tests (new)\n</code></pre>"},{"location":"development/style-guide/#module-organization","title":"Module Organization","text":"<ul> <li>One client class per module</li> <li>Related enums in the same module as the client</li> <li>Keep modules focused and cohesive</li> <li>Export public APIs through <code>__init__.py</code></li> </ul>"},{"location":"development/style-guide/#importexport-pattern","title":"Import/Export Pattern","text":"<pre><code># In client module\nfrom .base_client import BaseClient\n\n# In __init__.py\nfrom .example import ExampleClient, ExampleEnum\n\n__all__ = [\n    \"ExampleClient\",\n    \"ExampleEnum\",\n    # ... other exports\n]\n</code></pre>"},{"location":"development/style-guide/#api-key-management","title":"API Key Management","text":""},{"location":"development/style-guide/#environment-variable-pattern","title":"Environment Variable Pattern","text":"<pre><code># Always check for environment variable first\nself.api_key = api_key or os.getenv(\"WFRMLS_BEARER_TOKEN\")\nif not self.api_key:\n    raise AuthenticationError(\n        \"API key is required. Set WFRMLS_BEARER_TOKEN environment variable or pass api_key parameter.\"\n    )\n</code></pre>"},{"location":"development/style-guide/#api-key-usage","title":"API Key Usage","text":"<ul> <li>Use <code>WFRMLS_BEARER_TOKEN</code> environment variable as default</li> <li>Allow override via constructor parameter</li> <li>Include in Authorization header as Bearer token</li> </ul>"},{"location":"development/style-guide/#version-management","title":"Version Management","text":""},{"location":"development/style-guide/#version-updates","title":"Version Updates","text":"<ul> <li>Update version in <code>pyproject.toml</code></li> <li>Update version in <code>__init__.py</code></li> <li>Follow semantic versioning (MAJOR.MINOR.PATCH)</li> <li>Document changes in release notes</li> </ul>"},{"location":"development/style-guide/#documentation-updates","title":"Documentation Updates","text":""},{"location":"development/style-guide/#when-adding-new-endpoints","title":"When Adding New Endpoints","text":"<ol> <li>Update the appropriate client class</li> <li>Add comprehensive docstrings with examples</li> <li>Update <code>__init__.py</code> exports if needed</li> <li>Add/update tests with 100% coverage</li> <li>Update API documentation in <code>docs/</code> directory</li> <li>Mark endpoint as completed in <code>tasks/</code> files</li> </ol> <p>This style guide ensures consistency across the WFRMLS API wrapper codebase and should be followed for all new implementations and modifications.</p>"},{"location":"examples/","title":"Examples","text":"<p>Explore practical code examples and recipes for common WFRMLS API use cases. All examples are production-ready and follow best practices.</p>"},{"location":"examples/#browse-examples","title":"\ud83c\udfaf Browse Examples","text":"<ul> <li> <p> Basic Usage</p> <p>Simple examples to get you started with core functionality</p> <p> Basic Usage</p> </li> <li> <p> Advanced Patterns</p> <p>Complex patterns for sophisticated real estate applications</p> <p> Advanced Patterns</p> </li> <li> <p> Integration Examples</p> <p>Complete examples for integrating with external systems</p> <p> Integration Examples</p> </li> <li> <p> Real-World Scenarios</p> <p>Production examples from actual real estate applications</p> <p> Real-World Scenarios</p> </li> </ul>"},{"location":"examples/#examples-by-category","title":"Examples by Category","text":""},{"location":"examples/#property-data","title":"\ud83c\udfe0 Property Data","text":"<p>Learn to work with property listings, search, and analysis:</p> BasicAdvanced <ul> <li>Retrieve active properties</li> <li>Search by location</li> <li>Filter by price range</li> <li>Get property details</li> </ul> <ul> <li>Complex search queries</li> <li>Market analysis</li> <li>Property comparison</li> <li>Price trend analysis</li> </ul>"},{"location":"examples/#member-office-data","title":"\ud83d\udc65 Member &amp; Office Data","text":"<p>Examples for working with agents, brokers, and offices:</p> BasicAdvanced <ul> <li>Get active members</li> <li>Search agents by name</li> <li>Retrieve office information</li> <li>Contact directories</li> </ul> <ul> <li>Performance analytics</li> <li>Team management</li> <li>Territory analysis</li> <li>Commission tracking</li> </ul>"},{"location":"examples/#open-house-management","title":"\ud83d\udcc5 Open House Management","text":"<p>Handle showing schedules and events:</p> BasicAdvanced <ul> <li>Upcoming open houses</li> <li>Agent schedules</li> <li>Property showings</li> <li>Event notifications</li> </ul> <ul> <li>Automated scheduling</li> <li>Conflict detection</li> <li>Performance tracking</li> <li>Integration with calendars</li> </ul>"},{"location":"examples/#data-synchronization","title":"\ud83d\udd04 Data Synchronization","text":"<p>Keep your data in sync with the MLS:</p> BasicAdvanced <ul> <li>Simple sync patterns</li> <li>Change detection</li> <li>Basic error handling</li> <li>Status monitoring</li> </ul> <ul> <li>Real-time synchronization</li> <li>Conflict resolution</li> <li>Batch processing</li> <li>Recovery strategies</li> </ul>"},{"location":"examples/#example-types","title":"Example Types","text":""},{"location":"examples/#code-snippets","title":"\ud83d\udccb Code Snippets","text":"<p>Quick, focused examples for specific tasks: <pre><code># Get properties in Salt Lake City\nproperties = client.property.get_properties(\n    filter_query=\"City eq 'Salt Lake City'\",\n    top=50\n)\n</code></pre></p>"},{"location":"examples/#complete-applications","title":"\ud83c\udfd7\ufe0f Complete Applications","text":"<p>Full application examples with multiple components: - Real estate dashboard - Agent CRM integration - Market analysis tool - Property management system</p>"},{"location":"examples/#utility-functions","title":"\ud83d\udd27 Utility Functions","text":"<p>Reusable helper functions for common tasks: - Data validation - Format conversion - Error handling - Caching strategies</p>"},{"location":"examples/#how-to-use-examples","title":"How to Use Examples","text":"<ol> <li>Copy &amp; Paste: Most examples are ready to use with minimal modification</li> <li>Customize: Adapt the examples to your specific needs</li> <li>Learn: Understand the patterns and apply them to your use cases</li> <li>Contribute: Share your own examples with the community</li> </ol> <p>Prerequisites</p> <p>All examples assume you have:</p> <ul> <li>Installed the WFRMLS package</li> <li>Configured authentication</li> <li>Basic Python knowledge</li> </ul> <p>If you need help with setup, check our Getting Started guide.</p>"},{"location":"examples/#example-structure","title":"Example Structure","text":"<p>Each example includes:</p> <ul> <li>Purpose: What the example accomplishes</li> <li>Code: Complete, runnable code</li> <li>Explanation: Line-by-line breakdown</li> <li>Variations: Alternative approaches</li> <li>Best Practices: Tips for production use</li> </ul>"},{"location":"examples/#community-examples","title":"Community Examples","text":"<p>Found a great use case? Contribute your example to help other developers!</p> <p>Popular community contributions: - \ud83c\udfc6 MLS data warehouse sync - \ud83d\udcca Market trend visualization - \ud83d\udcf1 Mobile app integration - \ud83e\udd16 Automated listing updates</p> <p>Start with Basic Usage if you're new to the API, or jump to Real-World Scenarios for production examples. </p>"},{"location":"examples/basic-usage/","title":"WFRMLS API Examples","text":"<p>This guide provides comprehensive examples for using the WFRMLS Python API wrapper in real-world scenarios.</p>"},{"location":"examples/basic-usage/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Setup</li> <li>Property Search Examples</li> <li>Agent and Member Examples</li> <li>Office and Brokerage Examples</li> <li>Media and Photos</li> <li>Analytics and Market Data</li> <li>Advanced Use Cases</li> <li>Error Handling Patterns</li> </ol>"},{"location":"examples/basic-usage/#basic-setup","title":"Basic Setup","text":""},{"location":"examples/basic-usage/#client-initialization","title":"Client Initialization","text":"<pre><code>from wfrmls import WFRMLSClient\nfrom wfrmls.exceptions import WFRMLSError, AuthenticationError\n\n# Initialize with environment variable (recommended)\nclient = WFRMLSClient()\n\n# Or with explicit API key\nclient = WFRMLSClient(api_key=\"your_api_key_here\")\n\n# Test connection\ntry:\n    resources = client.resource.get_resources()\n    print(\"\u2705 Connected to WFRMLS API\")\n    print(f\"Available resources: {[r['resourceName'] for r in resources]}\")\nexcept AuthenticationError:\n    print(\"\u274c Authentication failed - check your API key\")\nexcept WFRMLSError as e:\n    print(f\"\u274c API error: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#environment-configuration","title":"Environment Configuration","text":"<pre><code># .env file\nWFRMLS_BEARER_TOKEN=your_api_key_here\n\n# In your code\nfrom dotenv import load_dotenv\nload_dotenv()\n\nclient = WFRMLSClient()  # Will automatically use environment variable\n</code></pre>"},{"location":"examples/basic-usage/#property-search-examples","title":"Property Search Examples","text":""},{"location":"examples/basic-usage/#basic-property-search","title":"Basic Property Search","text":"<pre><code># Search for all active residential properties in Salt Lake City\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    property_type=\"Residential\",\n    listing_status=\"Active\"\n)\n\nprint(f\"Found {len(properties)} active residential properties\")\nfor prop in properties[:5]:  # Show first 5\n    print(f\"${prop['ListPrice']:,} - {prop['UnparsedAddress']}\")\n</code></pre>"},{"location":"examples/basic-usage/#price-range-filtering","title":"Price Range Filtering","text":"<pre><code># Find homes between $300k and $600k\naffordable_homes = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    min_list_price=300000,\n    max_list_price=600000,\n    property_type=\"Residential\",\n    listing_status=\"Active\"\n)\n\nprint(f\"Found {len(affordable_homes)} homes in price range\")\n\n# Calculate average price\nif affordable_homes:\n    avg_price = sum(prop['ListPrice'] for prop in affordable_homes) / len(affordable_homes)\n    print(f\"Average price: ${avg_price:,.0f}\")\n</code></pre>"},{"location":"examples/basic-usage/#bedroom-and-bathroom-filtering","title":"Bedroom and Bathroom Filtering","text":"<pre><code># Find 3+ bedroom, 2+ bathroom homes\nfamily_homes = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    bedrooms_total=3,  # Minimum 3 bedrooms\n    bathrooms_total_integer=2,  # Minimum 2 full bathrooms\n    property_type=\"Residential\",\n    listing_status=\"Active\",\n    page_size=50\n)\n\nfor home in family_homes:\n    bedrooms = home.get('BedroomsTotal', 'N/A')\n    bathrooms = home.get('BathroomsTotalInteger', 'N/A')\n    print(f\"{bedrooms}BR/{bathrooms}BA - ${home['ListPrice']:,} - {home['UnparsedAddress']}\")\n</code></pre>"},{"location":"examples/basic-usage/#recently-listed-properties","title":"Recently Listed Properties","text":"<pre><code>from datetime import date, timedelta\n\n# Find properties listed in the last 7 days\nrecent_date = date.today() - timedelta(days=7)\nrecent_listings = client.properties.search_properties(\n    modification_timestamp_from=recent_date,\n    listing_status=\"Active\",\n    city=\"Salt Lake City\",\n    page_size=25\n)\n\nprint(f\"Found {len(recent_listings)} properties listed in the last 7 days\")\nfor prop in recent_listings:\n    list_date = prop.get('ListingContractDate', 'Unknown')\n    print(f\"Listed {list_date}: ${prop['ListPrice']:,} - {prop['UnparsedAddress']}\")\n</code></pre>"},{"location":"examples/basic-usage/#property-details","title":"Property Details","text":"<pre><code># Get detailed information for a specific property\nproperty_id = \"your_property_id_here\"\n\ntry:\n    property_details = client.properties.get_property(property_id)\n\n    print(f\"Property Details for {property_id}:\")\n    print(f\"Address: {property_details.get('UnparsedAddress')}\")\n    print(f\"Price: ${property_details.get('ListPrice', 0):,}\")\n    print(f\"Bedrooms: {property_details.get('BedroomsTotal', 'N/A')}\")\n    print(f\"Bathrooms: {property_details.get('BathroomsTotalInteger', 'N/A')}\")\n    print(f\"Square Feet: {property_details.get('LivingArea', 'N/A')}\")\n    print(f\"Lot Size: {property_details.get('LotSizeAcres', 'N/A')} acres\")\n    print(f\"Year Built: {property_details.get('YearBuilt', 'N/A')}\")\n    print(f\"Property Type: {property_details.get('PropertyType', 'N/A')}\")\n\nexcept WFRMLSError as e:\n    print(f\"Error retrieving property {property_id}: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#agent-and-member-examples","title":"Agent and Member Examples","text":""},{"location":"examples/basic-usage/#agent-search","title":"Agent Search","text":"<pre><code># Search for agents by name\nagents = client.member.search_members(\n    first_name=\"John\",\n    last_name=\"Smith\"\n)\n\nprint(f\"Found {len(agents)} agents named John Smith\")\nfor agent in agents:\n    print(f\"{agent.get('MemberFullName')} - {agent.get('OfficePhoneNumber')}\")\n</code></pre>"},{"location":"examples/basic-usage/#agent-details-and-listings","title":"Agent Details and Listings","text":"<pre><code># Get agent details and their recent listings\nagent_id = \"agent_key_here\"\n\ntry:\n    # Get agent information\n    agent_details = client.member.get_member(agent_id)\n    print(f\"Agent: {agent_details.get('MemberFullName')}\")\n    print(f\"Office: {agent_details.get('OfficeName')}\")\n    print(f\"Phone: {agent_details.get('OfficePhoneNumber')}\")\n\n    # Find their recent listings\n    agent_listings = client.properties.search_properties(\n        listing_agent_key=agent_id,\n        listing_status=\"Active\",\n        page_size=20\n    )\n\n    print(f\"\\nCurrent Listings ({len(agent_listings)}):\")\n    for listing in agent_listings:\n        print(f\"${listing['ListPrice']:,} - {listing['UnparsedAddress']}\")\n\nexcept WFRMLSError as e:\n    print(f\"Error retrieving agent data: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#top-agents-by-listings","title":"Top Agents by Listings","text":"<pre><code># Find agents with the most active listings\nfrom collections import Counter\n\n# Get recent listings\nall_listings = client.properties.search_properties(\n    listing_status=\"Active\",\n    city=\"Salt Lake City\",\n    page_size=200\n)\n\n# Count listings per agent\nagent_counts = Counter()\nfor listing in all_listings:\n    agent_key = listing.get('ListAgentKey')\n    if agent_key:\n        agent_counts[agent_key] += 1\n\n# Get details for top 10 agents\nprint(\"Top 10 Agents by Active Listings:\")\nfor agent_key, count in agent_counts.most_common(10):\n    try:\n        agent = client.member.get_member(agent_key)\n        print(f\"{agent.get('MemberFullName', 'Unknown')}: {count} listings\")\n    except WFRMLSError:\n        print(f\"Agent {agent_key}: {count} listings\")\n</code></pre>"},{"location":"examples/basic-usage/#office-and-brokerage-examples","title":"Office and Brokerage Examples","text":""},{"location":"examples/basic-usage/#office-search","title":"Office Search","text":"<pre><code># Find offices in specific cities\noffices = client.office.search_offices(\n    office_city=\"Salt Lake City\"\n)\n\nprint(f\"Found {len(offices)} offices in Salt Lake City\")\nfor office in offices:\n    print(f\"{office.get('OfficeName')} - {office.get('OfficePhoneNumber')}\")\n</code></pre>"},{"location":"examples/basic-usage/#office-performance-analysis","title":"Office Performance Analysis","text":"<pre><code># Analyze office performance by listings\noffice_performance = {}\n\n# Get all active listings\nlistings = client.properties.search_properties(\n    listing_status=\"Active\",\n    city=\"Salt Lake City\",\n    page_size=500\n)\n\n# Group by office\nfor listing in listings:\n    office_key = listing.get('ListOfficeKey')\n    if office_key:\n        if office_key not in office_performance:\n            office_performance[office_key] = {\n                'listing_count': 0,\n                'total_value': 0,\n                'avg_price': 0\n            }\n\n        office_performance[office_key]['listing_count'] += 1\n        office_performance[office_key]['total_value'] += listing.get('ListPrice', 0)\n\n# Calculate averages and get office details\nfor office_key, stats in office_performance.items():\n    if stats['listing_count'] &gt; 0:\n        stats['avg_price'] = stats['total_value'] / stats['listing_count']\n\n    try:\n        office_details = client.office.get_office(office_key)\n        office_name = office_details.get('OfficeName', 'Unknown Office')\n\n        print(f\"{office_name}:\")\n        print(f\"  Active Listings: {stats['listing_count']}\")\n        print(f\"  Total Value: ${stats['total_value']:,}\")\n        print(f\"  Average Price: ${stats['avg_price']:,.0f}\\n\")\n\n    except WFRMLSError:\n        continue\n</code></pre>"},{"location":"examples/basic-usage/#media-and-photos","title":"Media and Photos","text":""},{"location":"examples/basic-usage/#property-photos","title":"Property Photos","text":"<pre><code># Get all media for a property\nproperty_id = \"your_property_id_here\"\n\ntry:\n    media_items = client.media.search_media(\n        resource_name=\"Property\",\n        resource_record_key=property_id\n    )\n\n    print(f\"Found {len(media_items)} media items for property {property_id}\")\n\n    # Download first photo\n    if media_items:\n        first_photo = media_items[0]\n        photo_url = first_photo['MediaURL']\n\n        # Download the photo\n        photo_data = client.media.get_media_object(photo_url)\n\n        # Save to file\n        filename = f\"property_{property_id}_photo_1.jpg\"\n        with open(filename, \"wb\") as f:\n            f.write(photo_data)\n\n        print(f\"Downloaded photo: {filename}\")\n        print(f\"Photo details: {first_photo.get('MediaDescription', 'No description')}\")\n\nexcept WFRMLSError as e:\n    print(f\"Error retrieving media: {e}\")\n</code></pre>"},{"location":"examples/basic-usage/#bulk-photo-download","title":"Bulk Photo Download","text":"<pre><code>import os\nfrom pathlib import Path\n\ndef download_property_photos(property_id, max_photos=5):\n    \"\"\"Download up to max_photos for a property.\"\"\"\n\n    # Create directory for this property\n    photo_dir = Path(f\"property_photos/{property_id}\")\n    photo_dir.mkdir(parents=True, exist_ok=True)\n\n    try:\n        media_items = client.media.search_media(\n            resource_name=\"Property\",\n            resource_record_key=property_id\n        )\n\n        # Filter for images only\n        photos = [item for item in media_items if 'image' in item.get('MediaType', '').lower()]\n\n        downloaded = 0\n        for i, photo in enumerate(photos[:max_photos]):\n            try:\n                photo_data = client.media.get_media_object(photo['MediaURL'])\n                filename = photo_dir / f\"photo_{i+1}.jpg\"\n\n                with open(filename, \"wb\") as f:\n                    f.write(photo_data)\n\n                downloaded += 1\n                print(f\"Downloaded: {filename}\")\n\n            except Exception as e:\n                print(f\"Error downloading photo {i+1}: {e}\")\n\n        print(f\"Downloaded {downloaded} photos for property {property_id}\")\n\n    except WFRMLSError as e:\n        print(f\"Error retrieving media for property {property_id}: {e}\")\n\n# Usage\nproperty_ids = [\"123456\", \"789012\", \"345678\"]\nfor prop_id in property_ids:\n    download_property_photos(prop_id)\n</code></pre>"},{"location":"examples/basic-usage/#analytics-and-market-data","title":"Analytics and Market Data","text":""},{"location":"examples/basic-usage/#market-statistics","title":"Market Statistics","text":"<pre><code># Get market analytics for different areas\nareas = [\"Salt Lake City\", \"West Valley City\", \"Sandy\", \"Provo\"]\n\nfor area in areas:\n    properties = client.properties.search_properties(\n        city=area,\n        listing_status=\"Active\",\n        property_type=\"Residential\",\n        page_size=100\n    )\n\n    if properties:\n        prices = [prop['ListPrice'] for prop in properties]\n\n        print(f\"\\n{area} Market Analysis:\")\n        print(f\"Active Listings: {len(properties)}\")\n        print(f\"Average Price: ${sum(prices) / len(prices):,.0f}\")\n        print(f\"Median Price: ${sorted(prices)[len(prices)//2]:,.0f}\")\n        print(f\"Price Range: ${min(prices):,} - ${max(prices):,}\")\n</code></pre>"},{"location":"examples/basic-usage/#days-on-market-analysis","title":"Days on Market Analysis","text":"<pre><code>from datetime import date, datetime\n\ndef calculate_days_on_market(properties):\n    \"\"\"Calculate days on market for a list of properties.\"\"\"\n    dom_data = []\n\n    for prop in properties:\n        list_date_str = prop.get('ListingContractDate')\n        if list_date_str:\n            try:\n                # Parse date (adjust format as needed)\n                list_date = datetime.strptime(list_date_str[:10], '%Y-%m-%d').date()\n                days_on_market = (date.today() - list_date).days\n                dom_data.append(days_on_market)\n            except (ValueError, TypeError):\n                continue\n\n    return dom_data\n\n# Analyze days on market by price range\nprice_ranges = [\n    (0, 300000, \"Under $300k\"),\n    (300000, 500000, \"$300k-$500k\"),\n    (500000, 750000, \"$500k-$750k\"),\n    (750000, float('inf'), \"Over $750k\")\n]\n\nfor min_price, max_price, label in price_ranges:\n    properties = client.properties.search_properties(\n        city=\"Salt Lake City\",\n        min_list_price=min_price if min_price &gt; 0 else None,\n        max_list_price=max_price if max_price &lt; float('inf') else None,\n        listing_status=\"Active\",\n        property_type=\"Residential\",\n        page_size=100\n    )\n\n    dom_data = calculate_days_on_market(properties)\n\n    if dom_data:\n        avg_dom = sum(dom_data) / len(dom_data)\n        print(f\"{label}: {len(properties)} properties, {avg_dom:.0f} avg days on market\")\n</code></pre>"},{"location":"examples/basic-usage/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"examples/basic-usage/#property-investment-analysis","title":"Property Investment Analysis","text":"<pre><code>def analyze_investment_properties(city, max_price=500000):\n    \"\"\"Find and analyze potential investment properties.\"\"\"\n\n    properties = client.properties.search_properties(\n        city=city,\n        max_list_price=max_price,\n        property_type=\"Residential\",\n        listing_status=\"Active\",\n        page_size=100\n    )\n\n    investment_candidates = []\n\n    for prop in properties:\n        # Basic investment metrics\n        price = prop.get('ListPrice', 0)\n        bedrooms = prop.get('BedroomsTotal', 0)\n        bathrooms = prop.get('BathroomsTotalInteger', 0)\n        sqft = prop.get('LivingArea', 0)\n\n        # Calculate price per square foot\n        price_per_sqft = price / sqft if sqft &gt; 0 else 0\n\n        # Simple investment score (customize based on your criteria)\n        score = 0\n        if bedrooms &gt;= 3: score += 10\n        if bathrooms &gt;= 2: score += 10\n        if price_per_sqft &gt; 0 and price_per_sqft &lt; 200: score += 20\n        if price &lt; 400000: score += 15\n\n        if score &gt;= 30:  # Threshold for consideration\n            investment_candidates.append({\n                'property': prop,\n                'score': score,\n                'price_per_sqft': price_per_sqft\n            })\n\n    # Sort by score\n    investment_candidates.sort(key=lambda x: x['score'], reverse=True)\n\n    print(f\"Top Investment Candidates in {city}:\")\n    for i, candidate in enumerate(investment_candidates[:10]):\n        prop = candidate['property']\n        print(f\"{i+1}. ${prop['ListPrice']:,} - {prop['UnparsedAddress']}\")\n        print(f\"   Score: {candidate['score']}, ${candidate['price_per_sqft']:.0f}/sqft\")\n        print()\n\n# Usage\nanalyze_investment_properties(\"Salt Lake City\")\n</code></pre>"},{"location":"examples/basic-usage/#market-comparison-tool","title":"Market Comparison Tool","text":"<pre><code>def compare_markets(cities):\n    \"\"\"Compare market conditions across multiple cities.\"\"\"\n\n    comparison_data = {}\n\n    for city in cities:\n        properties = client.properties.search_properties(\n            city=city,\n            listing_status=\"Active\",\n            property_type=\"Residential\",\n            page_size=200\n        )\n\n        if properties:\n            prices = [prop['ListPrice'] for prop in properties]\n            sqft_data = [prop.get('LivingArea', 0) for prop in properties if prop.get('LivingArea', 0) &gt; 0]\n\n            comparison_data[city] = {\n                'count': len(properties),\n                'avg_price': sum(prices) / len(prices),\n                'median_price': sorted(prices)[len(prices)//2],\n                'avg_sqft': sum(sqft_data) / len(sqft_data) if sqft_data else 0,\n                'avg_price_per_sqft': (sum(prices) / len(prices)) / (sum(sqft_data) / len(sqft_data)) if sqft_data else 0\n            }\n\n    # Print comparison\n    print(\"Market Comparison:\")\n    print(f\"{'City':&lt;20} {'Count':&lt;8} {'Avg Price':&lt;12} {'Med Price':&lt;12} {'$/SqFt':&lt;8}\")\n    print(\"-\" * 70)\n\n    for city, data in comparison_data.items():\n        print(f\"{city:&lt;20} {data['count']:&lt;8} ${data['avg_price']:&lt;11,.0f} ${data['median_price']:&lt;11,.0f} ${data['avg_price_per_sqft']:&lt;7.0f}\")\n\n# Usage\ncities = [\"Salt Lake City\", \"Provo\", \"Ogden\", \"West Valley City\"]\ncompare_markets(cities)\n</code></pre>"},{"location":"examples/basic-usage/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"examples/basic-usage/#robust-api-calls","title":"Robust API Calls","text":"<pre><code>import time\nimport logging\nfrom wfrmls.exceptions import WFRMLSError, AuthenticationError\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef safe_api_call(func, *args, **kwargs):\n    \"\"\"Execute API call with error handling and retries.\"\"\"\n    max_retries = 3\n    retry_delay = 1\n\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n\n        except AuthenticationError as e:\n            logger.error(f\"Authentication error: {e}\")\n            raise  # Don't retry auth errors\n\n        except WFRMLSError as e:\n            if \"429\" in str(e):  # Rate limit\n                wait_time = retry_delay * (2 ** attempt)\n                logger.warning(f\"Rate limited, waiting {wait_time}s before retry\")\n                time.sleep(wait_time)\n                continue\n            else:\n                logger.error(f\"API error: {e}\")\n                if attempt == max_retries - 1:\n                    raise\n\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e}\")\n            if attempt == max_retries - 1:\n                raise\n\n    return None\n\n# Usage\nproperties = safe_api_call(\n    client.properties.search_properties,\n    city=\"Salt Lake City\",\n    page_size=50\n)\n</code></pre>"},{"location":"examples/basic-usage/#batch-processing-with-error-handling","title":"Batch Processing with Error Handling","text":"<pre><code>def process_properties_batch(property_ids, batch_size=10):\n    \"\"\"Process multiple properties with error handling.\"\"\"\n\n    results = []\n    failed = []\n\n    for i in range(0, len(property_ids), batch_size):\n        batch = property_ids[i:i + batch_size]\n\n        for property_id in batch:\n            try:\n                property_data = safe_api_call(\n                    client.properties.get_property,\n                    property_id\n                )\n\n                if property_data:\n                    results.append(property_data)\n                    logger.info(f\"Processed property {property_id}\")\n\n            except Exception as e:\n                logger.error(f\"Failed to process property {property_id}: {e}\")\n                failed.append(property_id)\n\n            # Small delay to respect rate limits\n            time.sleep(0.1)\n\n    logger.info(f\"Processed {len(results)} properties, {len(failed)} failed\")\n    return results, failed\n\n# Usage\nproperty_list = [\"123456\", \"789012\", \"345678\", \"901234\"]\nsuccessful, failed = process_properties_batch(property_list)\n</code></pre>"},{"location":"examples/basic-usage/#validation-helpers","title":"Validation Helpers","text":"<pre><code>def validate_search_params(**params):\n    \"\"\"Validate search parameters before API call.\"\"\"\n\n    errors = []\n\n    # Price validation\n    min_price = params.get('min_list_price')\n    max_price = params.get('max_list_price')\n\n    if min_price is not None and min_price &lt; 0:\n        errors.append(\"min_list_price must be positive\")\n\n    if max_price is not None and max_price &lt; 0:\n        errors.append(\"max_list_price must be positive\")\n\n    if min_price and max_price and min_price &gt; max_price:\n        errors.append(\"min_list_price cannot be greater than max_list_price\")\n\n    # Page size validation\n    page_size = params.get('page_size')\n    if page_size is not None and (page_size &lt; 1 or page_size &gt; 500):\n        errors.append(\"page_size must be between 1 and 500\")\n\n    if errors:\n        raise ValueError(f\"Validation errors: {', '.join(errors)}\")\n\n# Usage\ntry:\n    validate_search_params(\n        min_list_price=200000,\n        max_list_price=500000,\n        page_size=50\n    )\n\n    properties = client.properties.search_properties(\n        min_list_price=200000,\n        max_list_price=500000,\n        page_size=50\n    )\n\nexcept ValueError as e:\n    print(f\"Parameter validation failed: {e}\")\nexcept WFRMLSError as e:\n    print(f\"API error: {e}\")\n</code></pre> <p>These examples demonstrate comprehensive usage patterns for the WFRMLS API wrapper. Remember to:</p> <ol> <li>Always handle errors appropriately using the custom exception types</li> <li>Respect rate limits by adding delays between requests</li> <li>Validate parameters before making API calls</li> <li>Use pagination for large result sets</li> <li>Cache results when appropriate to minimize API calls</li> <li>Log operations for debugging and monitoring</li> </ol> <p>For more specific use cases or questions, refer to the API Reference or Troubleshooting Guide. </p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the WFRMLS Python API wrapper! This section will guide you through everything you need to get up and running quickly.</p>"},{"location":"getting-started/#quick-navigation","title":"\ud83d\ude80 Quick Navigation","text":"<ul> <li> <p> Installation</p> <p>Install the WFRMLS package and set up your development environment</p> <p> Installation Guide</p> </li> <li> <p> Quick Start</p> <p>Get started with your first API calls in minutes</p> <p> Quick Start</p> </li> <li> <p> Authentication</p> <p>Learn how to authenticate and secure your API access</p> <p> Authentication</p> </li> <li> <p> First Steps</p> <p>Understand core concepts and basic usage patterns</p> <p> First Steps</p> </li> </ul>"},{"location":"getting-started/#learning-path","title":"Learning Path","text":"<p>Follow this recommended learning path for the best experience:</p> <ol> <li>Installation - Set up your environment</li> <li>Authentication - Configure API access  </li> <li>Quick Start - Make your first API calls</li> <li>First Steps - Learn core concepts</li> </ol> <p>New to APIs?</p> <p>If you're new to working with APIs, start with our First Steps guide to understand the basic concepts before diving into code examples.</p>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":"<p>After completing the getting started section, you'll be able to:</p> <ul> <li>\u2705 Install and configure the WFRMLS Python package</li> <li>\u2705 Authenticate with the WFRMLS API using bearer tokens</li> <li>\u2705 Make basic API calls to retrieve property data</li> <li>\u2705 Handle common errors and responses</li> <li>\u2705 Understand the structure of WFRMLS data</li> </ul>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcd6 Check our Guides for detailed how-to instructions</li> <li>\ud83d\udd0d Browse the API Reference for complete method documentation</li> <li>\ud83d\udca1 See Examples for real-world usage patterns</li> <li>\ud83d\udee0\ufe0f Visit Troubleshooting if you encounter issues</li> </ul> <p>Ready to get started? Let's begin with Installation! </p>"},{"location":"getting-started/authentication/","title":"Authentication","text":"<p>Learn how to authenticate with the WFRMLS API using bearer tokens and configure secure access for your applications.</p>"},{"location":"getting-started/authentication/#authentication-overview","title":"\ud83d\udd11 Authentication Overview","text":"<p>The WFRMLS API uses Bearer Token Authentication for secure access. You'll need a valid bearer token to make any API requests.</p> <p>Getting API Access</p> <p>To obtain WFRMLS API credentials, contact the Wasatch Front Regional Multiple Listing Service directly. This wrapper is designed for developers who already have authorized access to the WFRMLS API.</p>"},{"location":"getting-started/authentication/#bearer-token-setup","title":"Bearer Token Setup","text":""},{"location":"getting-started/authentication/#method-1-environment-variable-recommended","title":"Method 1: Environment Variable (Recommended)","text":"<p>The most secure way to handle your API token is using environment variables:</p> Linux/macOSWindowsPython (.env file) <pre><code># Set in your shell profile (~/.bashrc, ~/.zshrc, etc.)\nexport WFRMLS_BEARER_TOKEN=\"9d0243d7632d115b002acf3547d2d7ee\"\n\n# Or set for current session\nexport WFRMLS_BEARER_TOKEN=\"your_actual_token_here\"\n</code></pre> <pre><code># Command Prompt\nset WFRMLS_BEARER_TOKEN=your_actual_token_here\n\n# PowerShell\n$env:WFRMLS_BEARER_TOKEN=\"your_actual_token_here\"\n</code></pre> <pre><code># Create a .env file in your project root\n# .env\nWFRMLS_BEARER_TOKEN=your_actual_token_here\n\n# Load in your Python code\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\ntoken = os.getenv('WFRMLS_BEARER_TOKEN')\n</code></pre> <p>Then initialize the client without explicitly passing the token:</p> <pre><code>from wfrmls import WFRMLSClient\n\n# Automatically loads from WFRMLS_BEARER_TOKEN environment variable\nclient = WFRMLSClient()\n</code></pre>"},{"location":"getting-started/authentication/#method-2-direct-token-development-only","title":"Method 2: Direct Token (Development Only)","text":"<p>For development and testing, you can pass the token directly:</p> <pre><code>from wfrmls import WFRMLSClient\n\n# Pass token directly (not recommended for production)\nclient = WFRMLSClient(bearer_token=\"your_actual_token_here\")\n</code></pre> <p>Security Warning</p> <p>Never hardcode API tokens in your source code, especially in production environments or public repositories.</p>"},{"location":"getting-started/authentication/#token-management-best-practices","title":"Token Management Best Practices","text":""},{"location":"getting-started/authentication/#security-guidelines","title":"\ud83d\udd12 Security Guidelines","text":"<ol> <li>Never Commit Tokens: Add <code>.env</code> files to your <code>.gitignore</code></li> <li>Use Environment Variables: Keep tokens out of source code</li> <li>Rotate Regularly: Update tokens periodically if possible</li> <li>Limit Scope: Use tokens with minimal required permissions</li> <li>Monitor Usage: Track API usage for unusual activity</li> </ol>"},{"location":"getting-started/authentication/#project-structure-for-token-security","title":"\ud83d\udcc1 Project Structure for Token Security","text":"<pre><code>your-project/\n\u251c\u2500\u2500 .env                    # Environment variables (add to .gitignore)\n\u251c\u2500\u2500 .gitignore             # Exclude .env from version control\n\u251c\u2500\u2500 config.py              # Configuration management\n\u251c\u2500\u2500 main.py                # Your application\n\u2514\u2500\u2500 requirements.txt       # Dependencies\n</code></pre> <p><code>.gitignore</code> example: <pre><code># Environment variables\n.env\n.env.local\n.env.production\n\n# API keys and secrets\n*.key\nconfig/secrets.json\n</code></pre></p>"},{"location":"getting-started/authentication/#configuration-management","title":"\ud83d\udee0\ufe0f Configuration Management","text":"<p>Create a configuration module for better token management:</p> <pre><code># config.py\nimport os\nfrom typing import Optional\n\nclass Config:\n    \"\"\"Application configuration.\"\"\"\n\n    def __init__(self):\n        self.wfrmls_token = self._get_wfrmls_token()\n        self.base_url = os.getenv('WFRMLS_BASE_URL', 'https://api.wfrmls.com/RETS/api')\n\n    def _get_wfrmls_token(self) -&gt; str:\n        \"\"\"Get WFRMLS bearer token from environment.\"\"\"\n        token = os.getenv('WFRMLS_BEARER_TOKEN')\n        if not token:\n            raise ValueError(\n                \"WFRMLS bearer token not found. \"\n                \"Set the WFRMLS_BEARER_TOKEN environment variable.\"\n            )\n        return token\n\n    @property\n    def is_production(self) -&gt; bool:\n        \"\"\"Check if running in production environment.\"\"\"\n        return os.getenv('ENVIRONMENT', 'development').lower() == 'production'\n\n# Usage in your application\nconfig = Config()\nclient = WFRMLSClient(bearer_token=config.wfrmls_token)\n</code></pre>"},{"location":"getting-started/authentication/#testing-authentication","title":"Testing Authentication","text":""},{"location":"getting-started/authentication/#verify-your-setup","title":"Verify Your Setup","text":"<p>Test your authentication setup with a simple connection test:</p> <pre><code>from wfrmls import WFRMLSClient\nfrom wfrmls.exceptions import AuthenticationError, WFRMLSError\n\ndef test_authentication():\n    \"\"\"Test WFRMLS API authentication.\"\"\"\n    try:\n        # Initialize client\n        client = WFRMLSClient()\n\n        # Test with a simple API call\n        service_doc = client.get_service_document()\n\n        print(\"\u2705 Authentication successful!\")\n        print(f\"\ud83d\udccb Found {len(service_doc.get('value', []))} available resources\")\n\n        # List available resources\n        for resource in service_doc.get('value', [])[:5]:\n            print(f\"   \u2022 {resource.get('name', 'Unknown')}\")\n\n        return True\n\n    except AuthenticationError:\n        print(\"\u274c Authentication failed!\")\n        print(\"\ud83d\udd27 Check your bearer token and try again\")\n        return False\n\n    except WFRMLSError as e:\n        print(f\"\ud83d\udea8 API error: {e}\")\n        return False\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 Unexpected error: {e}\")\n        return False\n\n# Run the test\nif __name__ == \"__main__\":\n    test_authentication()\n</code></pre>"},{"location":"getting-started/authentication/#common-authentication-issues","title":"Common Authentication Issues","text":"Token Not FoundInvalid TokenAccess Denied <pre><code>ValueError: WFRMLS bearer token not found\n</code></pre> <p>Solutions: - Set the <code>WFRMLS_BEARER_TOKEN</code> environment variable - Check spelling of environment variable name - Ensure your shell has loaded the variable (<code>echo $WFRMLS_BEARER_TOKEN</code>)</p> <pre><code>AuthenticationError: Invalid credentials\n</code></pre> <p>Solutions: - Verify your token is correct and not expired - Contact WFRMLS to confirm your API access - Check for extra spaces or characters in the token</p> <pre><code>AuthenticationError: Access denied\n</code></pre> <p>Solutions: - Ensure your account has API access permissions - Check if your IP address is allowlisted - Verify your MLS membership status</p>"},{"location":"getting-started/authentication/#advanced-authentication","title":"Advanced Authentication","text":""},{"location":"getting-started/authentication/#multiple-environments","title":"Multiple Environments","text":"<p>Manage different tokens for different environments:</p> <pre><code>import os\n\nclass EnvironmentConfig:\n    \"\"\"Multi-environment configuration.\"\"\"\n\n    def __init__(self):\n        self.env = os.getenv('ENVIRONMENT', 'development')\n        self.token = self._get_token_for_environment()\n\n    def _get_token_for_environment(self) -&gt; str:\n        \"\"\"Get appropriate token based on environment.\"\"\"\n        if self.env == 'production':\n            return os.getenv('WFRMLS_PRODUCTION_TOKEN')\n        elif self.env == 'staging':\n            return os.getenv('WFRMLS_STAGING_TOKEN')\n        else:\n            return os.getenv('WFRMLS_DEVELOPMENT_TOKEN')\n\n# Usage\nconfig = EnvironmentConfig()\nclient = WFRMLSClient(bearer_token=config.token)\n</code></pre>"},{"location":"getting-started/authentication/#token-validation","title":"Token Validation","text":"<p>Add token validation to catch issues early:</p> <pre><code>def validate_token_format(token: str) -&gt; bool:\n    \"\"\"Validate bearer token format.\"\"\"\n    if not token:\n        return False\n\n    # Basic validation (adjust based on actual WFRMLS token format)\n    if len(token) &lt; 32:  # Minimum expected length\n        return False\n\n    # Check for common issues\n    if token.startswith(' ') or token.endswith(' '):\n        print(\"\u26a0\ufe0f Token has leading/trailing spaces\")\n        return False\n\n    return True\n\n# Usage\ntoken = os.getenv('WFRMLS_BEARER_TOKEN')\nif not validate_token_format(token):\n    raise ValueError(\"Invalid token format\")\n\nclient = WFRMLSClient(bearer_token=token)\n</code></pre>"},{"location":"getting-started/authentication/#next-steps","title":"Next Steps","text":"<p>Once authentication is working:</p> <ol> <li>Quick Start - Make your first API calls</li> <li>First Steps - Learn core concepts</li> <li>API Reference - Explore available endpoints</li> <li>Examples - See practical usage patterns</li> </ol> <p>Having authentication issues? Check our Troubleshooting Guide or open an issue for help. </p>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>Now that you have the WFRMLS package installed and authentication configured, let's explore the core concepts and take your first steps with the API.</p>"},{"location":"getting-started/first-steps/#core-concepts","title":"\ud83c\udfaf Core Concepts","text":""},{"location":"getting-started/first-steps/#understanding-the-wfrmls-api","title":"Understanding the WFRMLS API","text":"<p>The WFRMLS (Wasatch Front Regional Multiple Listing Service) API provides access to real estate data following the RESO (Real Estate Standards Organization) standards. Key concepts include:</p> <ul> <li>Resources: Different data types (Properties, Members, Offices, etc.)</li> <li>OData v4: Query standard for filtering, sorting, and pagination</li> <li>Bearer Token: Authentication method for API access</li> <li>Rate Limits: Usage constraints to ensure fair access</li> </ul>"},{"location":"getting-started/first-steps/#key-data-types","title":"Key Data Types","text":"<ul> <li> <p> Properties</p> <p>Real estate listings with detailed information about homes, condos, land, and commercial properties</p> </li> <li> <p> Members</p> <p>Real estate agents and brokers registered with the MLS</p> </li> <li> <p> Offices</p> <p>Real estate offices and brokerages where agents work</p> </li> <li> <p> Open Houses</p> <p>Scheduled property showings and events</p> </li> </ul>"},{"location":"getting-started/first-steps/#your-first-api-calls","title":"\ud83d\ude80 Your First API Calls","text":"<p>Let's start with some basic examples to get you familiar with the API:</p>"},{"location":"getting-started/first-steps/#1-initialize-the-client","title":"1. Initialize the Client","text":"<pre><code>from wfrmls import WFRMLSClient\n\n# Initialize client (loads token from environment)\nclient = WFRMLSClient()\nprint(\"\u2705 Client initialized successfully!\")\n</code></pre>"},{"location":"getting-started/first-steps/#2-explore-available-resources","title":"2. Explore Available Resources","text":"<pre><code># Get service document to see what's available\nservice_doc = client.get_service_document()\n\nprint(\"\ud83d\udccb Available Resources:\")\nfor resource in service_doc.get('value', []):\n    name = resource.get('name', 'Unknown')\n    title = resource.get('title', 'No description')\n    print(f\"   \u2022 {name}: {title}\")\n</code></pre>"},{"location":"getting-started/first-steps/#3-get-some-properties","title":"3. Get Some Properties","text":"<pre><code># Get your first 10 properties\nproperties = client.property.get_active_properties(top=10)\n\nprint(f\"\\n\ud83c\udfe0 Found {len(properties.get('value', []))} properties:\")\nfor prop in properties.get('value', [])[:3]:  # Show first 3\n    listing_id = prop.get('ListingId', 'Unknown')\n    price = prop.get('ListPrice', 0)\n    city = prop.get('City', 'Unknown')\n    address = prop.get('UnparsedAddress', 'Unknown Address')\n\n    print(f\"   \ud83d\udccd {listing_id}: {address}, {city} - ${price:,}\")\n</code></pre>"},{"location":"getting-started/first-steps/#4-search-for-agents","title":"4. Search for Agents","text":"<pre><code># Get some active real estate agents\nagents = client.member.get_active_members(top=5)\n\nprint(f\"\\n\ud83d\udc65 Found {len(agents.get('value', []))} agents:\")\nfor agent in agents.get('value', []):\n    first_name = agent.get('MemberFirstName', '')\n    last_name = agent.get('MemberLastName', '')\n    email = agent.get('MemberEmail', 'No email')\n\n    print(f\"   \ud83e\udd1d {first_name} {last_name} - {email}\")\n</code></pre>"},{"location":"getting-started/first-steps/#understanding-responses","title":"\ud83d\udcd6 Understanding Responses","text":"<p>WFRMLS API responses follow the OData v4 format:</p> <pre><code>{\n    \"@odata.context\": \"https://api.wfrmls.com/RETS/api/$metadata#Property\",\n    \"@odata.count\": 1250,\n    \"value\": [\n        {\n            \"ListingId\": \"12345678\",\n            \"ListPrice\": 750000,\n            \"City\": \"Salt Lake City\",\n            \"@odata.etag\": \"W/\\\"datetime'2024-01-15T10%3A30%3A00.000Z'\\\"\"\n        }\n    ]\n}\n</code></pre> <p>Key components:</p> <ul> <li><code>@odata.context</code>: Metadata about the response type</li> <li><code>@odata.count</code>: Total number of records (if requested)</li> <li><code>value</code>: Array containing the actual data</li> <li><code>@odata.etag</code>: Version information for change tracking</li> </ul>"},{"location":"getting-started/first-steps/#basic-filtering-and-searching","title":"\ud83d\udd0d Basic Filtering and Searching","text":""},{"location":"getting-started/first-steps/#simple-filters","title":"Simple Filters","text":"<pre><code># Properties in a specific city\nslc_properties = client.property.get_properties(\n    filter_query=\"City eq 'Salt Lake City'\",\n    top=20\n)\n\n# Properties above a certain price\nexpensive_properties = client.property.get_properties(\n    filter_query=\"ListPrice gt 500000\",\n    orderby=\"ListPrice desc\",\n    top=10\n)\n\n# Active agents in a specific office\noffice_agents = client.member.get_members(\n    filter_query=\"MemberOfficeKey eq '12345' and MemberStatus eq 'Active'\",\n    top=50\n)\n</code></pre>"},{"location":"getting-started/first-steps/#common-filter-operations","title":"Common Filter Operations","text":"Operation Symbol Example Equals <code>eq</code> <code>City eq 'Provo'</code> Not equals <code>ne</code> <code>ListPrice ne null</code> Greater than <code>gt</code> <code>ListPrice gt 300000</code> Greater or equal <code>ge</code> <code>BedroomsTotal ge 3</code> Less than <code>lt</code> <code>LivingArea lt 3000</code> Less or equal <code>le</code> <code>ListPrice le 1000000</code> Contains <code>contains</code> <code>contains(City, 'Salt')</code>"},{"location":"getting-started/first-steps/#combining-filters","title":"Combining Filters","text":"<pre><code># Multiple conditions with AND\nfamily_homes = client.property.get_properties(\n    filter_query=\"BedroomsTotal ge 3 and BathroomsTotalInteger ge 2 and ListPrice le 800000\",\n    orderby=\"ListPrice asc\"\n)\n\n# Multiple conditions with OR\nutah_county_cities = client.property.get_properties(\n    filter_query=\"City eq 'Provo' or City eq 'Orem' or City eq 'American Fork'\",\n    top=50\n)\n</code></pre>"},{"location":"getting-started/first-steps/#pagination-and-data-management","title":"\ud83d\udcc4 Pagination and Data Management","text":""},{"location":"getting-started/first-steps/#working-with-large-result-sets","title":"Working with Large Result Sets","text":"<pre><code># Get first page\npage1 = client.property.get_properties(top=50)\n\n# Get second page\npage2 = client.property.get_properties(top=50, skip=50)\n\n# Include total count\nwith_count = client.property.get_properties(top=10, count=True)\ntotal_properties = with_count.get('@odata.count', 'Unknown')\nprint(f\"Total properties available: {total_properties}\")\n</code></pre>"},{"location":"getting-started/first-steps/#pagination-helper-function","title":"Pagination Helper Function","text":"<pre><code>def get_all_pages(client, resource_method, page_size=100, max_pages=None):\n    \"\"\"Get all pages of data from a resource method.\"\"\"\n    all_data = []\n    skip = 0\n    pages_fetched = 0\n\n    while True:\n        # Get next page\n        page = resource_method(top=page_size, skip=skip)\n        page_data = page.get('value', [])\n\n        if not page_data:\n            break\n\n        all_data.extend(page_data)\n        skip += page_size\n        pages_fetched += 1\n\n        print(f\"\ud83d\udcc4 Fetched page {pages_fetched}: {len(page_data)} records\")\n\n        # Stop if max pages reached\n        if max_pages and pages_fetched &gt;= max_pages:\n            break\n\n    return all_data\n\n# Usage\nall_active_properties = get_all_pages(\n    client, \n    client.property.get_active_properties,\n    page_size=100,\n    max_pages=5  # Limit to first 5 pages for testing\n)\n</code></pre>"},{"location":"getting-started/first-steps/#error-handling-basics","title":"\ud83d\udee0\ufe0f Error Handling Basics","text":"<p>Always handle potential errors in your API calls:</p> <pre><code>from wfrmls.exceptions import (\n    WFRMLSError,\n    AuthenticationError,\n    NotFoundError,\n    RateLimitError,\n    ValidationError\n)\n\ndef safe_api_call():\n    \"\"\"Example of proper error handling.\"\"\"\n    try:\n        # Make API call\n        properties = client.property.get_properties(top=10)\n\n        print(\"\u2705 Success!\")\n        return properties\n\n    except AuthenticationError:\n        print(\"\u274c Authentication failed - check your token\")\n\n    except NotFoundError:\n        print(\"\ud83d\udd0d Resource not found\")\n\n    except RateLimitError:\n        print(\"\u23f1\ufe0f Rate limit exceeded - please wait\")\n\n    except ValidationError as e:\n        print(f\"\ud83d\udcdd Invalid parameters: {e}\")\n\n    except WFRMLSError as e:\n        print(f\"\ud83d\udea8 API error: {e}\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 Unexpected error: {e}\")\n\n    return None\n\n# Usage\nresult = safe_api_call()\n</code></pre>"},{"location":"getting-started/first-steps/#common-use-cases","title":"\ud83c\udfaf Common Use Cases","text":""},{"location":"getting-started/first-steps/#1-property-search-by-location","title":"1. Property Search by Location","text":"<pre><code>def search_properties_by_city(city_name, max_price=None):\n    \"\"\"Search for properties in a specific city.\"\"\"\n\n    # Build filter query\n    filter_parts = [f\"City eq '{city_name}'\"]\n    if max_price:\n        filter_parts.append(f\"ListPrice le {max_price}\")\n\n    filter_query = \" and \".join(filter_parts)\n\n    # Search properties\n    properties = client.property.get_properties(\n        filter_query=filter_query,\n        orderby=\"ListPrice asc\",\n        top=50\n    )\n\n    return properties.get('value', [])\n\n# Usage\npark_city_homes = search_properties_by_city(\"Park City\", max_price=1000000)\nprint(f\"Found {len(park_city_homes)} properties in Park City under $1M\")\n</code></pre>"},{"location":"getting-started/first-steps/#2-agent-directory","title":"2. Agent Directory","text":"<pre><code>def create_agent_directory(office_name=None):\n    \"\"\"Create a directory of active agents.\"\"\"\n\n    # Build filter for active agents\n    filter_query = \"MemberStatus eq 'Active' and MemberType eq 'Agent'\"\n\n    # Get agents\n    agents = client.member.get_members(\n        filter_query=filter_query,\n        select=\"MemberFirstName,MemberLastName,MemberEmail,MemberDirectPhone\",\n        orderby=\"MemberLastName asc\",\n        top=100\n    )\n\n    # Format for display\n    directory = []\n    for agent in agents.get('value', []):\n        directory.append({\n            'name': f\"{agent.get('MemberFirstName', '')} {agent.get('MemberLastName', '')}\".strip(),\n            'email': agent.get('MemberEmail', ''),\n            'phone': agent.get('MemberDirectPhone', '')\n        })\n\n    return directory\n\n# Usage\nagent_list = create_agent_directory()\nfor agent in agent_list[:5]:  # Show first 5\n    print(f\"\ud83d\udc64 {agent['name']} - {agent['email']}\")\n</code></pre>"},{"location":"getting-started/first-steps/#3-market-summary","title":"3. Market Summary","text":"<pre><code>def get_market_summary(city=\"Salt Lake City\"):\n    \"\"\"Get basic market statistics for a city.\"\"\"\n\n    # Get active properties in the city\n    properties = client.property.get_properties(\n        filter_query=f\"City eq '{city}' and StandardStatus eq 'Active'\",\n        select=\"ListPrice,BedroomsTotal,LivingArea\",\n        top=500\n    )\n\n    props = properties.get('value', [])\n    if not props:\n        return {\"error\": f\"No properties found in {city}\"}\n\n    # Calculate statistics\n    prices = [p.get('ListPrice', 0) for p in props if p.get('ListPrice')]\n\n    summary = {\n        'city': city,\n        'total_active': len(props),\n        'avg_price': sum(prices) / len(prices) if prices else 0,\n        'min_price': min(prices) if prices else 0,\n        'max_price': max(prices) if prices else 0,\n        'median_price': sorted(prices)[len(prices)//2] if prices else 0\n    }\n\n    return summary\n\n# Usage\nmarket_data = get_market_summary(\"Provo\")\nprint(f\"\ud83d\udcca Market Summary for {market_data['city']}:\")\nprint(f\"   Active Listings: {market_data['total_active']}\")\nprint(f\"   Average Price: ${market_data['avg_price']:,.0f}\")\nprint(f\"   Price Range: ${market_data['min_price']:,.0f} - ${market_data['max_price']:,.0f}\")\n</code></pre>"},{"location":"getting-started/first-steps/#whats-next","title":"\ud83d\udcda What's Next?","text":"<p>Now that you understand the basics, explore these areas:</p>"},{"location":"getting-started/first-steps/#deepen-your-knowledge","title":"\ud83c\udfaf Deepen Your Knowledge","text":"<ul> <li>API Reference - Complete method documentation</li> <li>Guides - Detailed how-to guides for specific tasks</li> <li>Examples - Real-world code examples</li> </ul>"},{"location":"getting-started/first-steps/#build-something","title":"\ud83d\ude80 Build Something","text":"<ul> <li>Property search application</li> <li>Agent contact management</li> <li>Market analysis dashboard</li> <li>Open house scheduling system</li> </ul>"},{"location":"getting-started/first-steps/#advanced-topics","title":"\ud83d\udee0\ufe0f Advanced Topics","text":"<ul> <li>Performance Optimization</li> <li>Data Synchronization</li> <li>Error Handling</li> </ul> <p>Ready for more? Check out our Property Search Guide to learn advanced search techniques, or browse Examples for complete applications. </p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install and set up the WFRMLS Python API wrapper.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> <li>WFRMLS API access token</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#1-install-from-pypi-recommended","title":"1. Install from PyPI (Recommended)","text":"<pre><code>pip install wfrmls\n</code></pre>"},{"location":"getting-started/installation/#2-install-from-source","title":"2. Install from Source","text":"<p>For the latest development version:</p> <pre><code>git clone https://github.com/theperrygroup/wfrmls.git\ncd wfrmls\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#3-development-installation","title":"3. Development Installation","text":"<p>For contributing to the project:</p> <pre><code>git clone https://github.com/theperrygroup/wfrmls.git\ncd wfrmls\npip install -e \".[dev]\"\n</code></pre> <p>This includes all development dependencies for testing, linting, and formatting.</p>"},{"location":"getting-started/installation/#api-key-setup","title":"API Key Setup","text":""},{"location":"getting-started/installation/#option-1-environment-variable-recommended","title":"Option 1: Environment Variable (Recommended)","text":"<p>Set your API key as an environment variable:</p> <p>Linux/macOS: <pre><code>export WFRMLS_BEARER_TOKEN=\"your_api_key_here\"\n</code></pre></p> <p>Windows (Command Prompt): <pre><code>set WFRMLS_BEARER_TOKEN=your_api_key_here\n</code></pre></p> <p>Windows (PowerShell): <pre><code>$env:WFRMLS_BEARER_TOKEN=\"your_api_key_here\"\n</code></pre></p>"},{"location":"getting-started/installation/#option-2-env-file","title":"Option 2: .env File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>WFRMLS_BEARER_TOKEN=your_api_key_here\n</code></pre> <p>The client will automatically load this using python-dotenv.</p>"},{"location":"getting-started/installation/#option-3-direct-parameter","title":"Option 3: Direct Parameter","text":"<p>Pass the API key directly when initializing the client:</p> <pre><code>from wfrmls import WFRMLSClient\n\nclient = WFRMLSClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>Verify your installation by running:</p> <pre><code>from wfrmls import WFRMLSClient\n\n# Test basic initialization\nclient = WFRMLSClient()\nprint(f\"WFRMLS Client initialized successfully\")\n\n# Test API access\ntry:\n    resources = client.resource.get_resources()\n    print(\"\u2705 API connection successful\")\nexcept Exception as e:\n    print(f\"\u274c API connection failed: {e}\")\n</code></pre>"},{"location":"getting-started/installation/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<p>It's recommended to use a virtual environment:</p> <pre><code># Create virtual environment\npython -m venv wfrmls-env\n\n# Activate it\n# Linux/macOS:\nsource wfrmls-env/bin/activate\n# Windows:\nwfrmls-env\\Scripts\\activate\n\n# Install WFRMLS\npip install wfrmls\n</code></pre>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":""},{"location":"getting-started/installation/#runtime-dependencies","title":"Runtime Dependencies","text":"<ul> <li><code>requests&gt;=2.25.0</code> - HTTP client library</li> <li><code>python-dotenv&gt;=0.19.0</code> - Environment variable loading</li> </ul>"},{"location":"getting-started/installation/#development-dependencies-optional","title":"Development Dependencies (optional)","text":"<ul> <li><code>pytest&gt;=7.0.0</code> - Testing framework</li> <li><code>pytest-cov&gt;=4.0.0</code> - Coverage reporting</li> <li><code>pytest-mock&gt;=3.10.0</code> - Mocking utilities</li> <li><code>responses&gt;=0.23.0</code> - HTTP response mocking</li> <li><code>black&gt;=23.0.0</code> - Code formatting</li> <li><code>flake8&gt;=6.0.0</code> - Linting</li> <li><code>mypy&gt;=1.0.0</code> - Type checking</li> <li><code>isort&gt;=5.12.0</code> - Import sorting</li> <li><code>pylint&gt;=2.17.0</code> - Additional linting</li> <li><code>types-requests&gt;=2.25.0</code> - Type stubs for requests</li> </ul>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>1. Permission Errors <pre><code># Use --user flag\npip install --user wfrmls\n\n# Or use virtual environment (recommended)\n</code></pre></p> <p>2. SSL Certificate Issues <pre><code># Upgrade pip and certificates\npip install --upgrade pip certifi\n</code></pre></p> <p>3. Python Version Compatibility <pre><code># Check Python version\npython --version\n\n# Ensure you're using Python 3.8+\n</code></pre></p> <p>4. Network/Proxy Issues <pre><code># Use proxy if needed\npip install --proxy http://proxy.company.com:port wfrmls\n</code></pre></p>"},{"location":"getting-started/installation/#api-key-issues","title":"API Key Issues","text":"<p>Invalid API Key: - Verify your API key is correct - Check that your account has API access enabled - Ensure the environment variable name is exactly <code>WFRMLS_BEARER_TOKEN</code></p> <p>Permission Denied: - Contact WFRMLS support to verify your API access level - Check if your IP address is whitelisted (if required)</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, proceed to the Quick Start Guide to begin using the WFRMLS API wrapper.</p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter installation issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Search existing GitHub Issues</li> <li>Create a new issue with:</li> <li>Your Python version</li> <li>Operating system</li> <li>Complete error message</li> <li>Installation method used </li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with the WFRMLS Python API wrapper in 5 minutes.</p>"},{"location":"getting-started/quickstart/#1-installation","title":"1. Installation","text":"<pre><code>pip install wfrmls\n</code></pre>"},{"location":"getting-started/quickstart/#2-set-up-authentication","title":"2. Set Up Authentication","text":"<p>Set your API key as an environment variable:</p> <pre><code>export WFRMLS_BEARER_TOKEN=\"your_api_key_here\"\n</code></pre>"},{"location":"getting-started/quickstart/#3-basic-usage","title":"3. Basic Usage","text":""},{"location":"getting-started/quickstart/#initialize-the-client","title":"Initialize the Client","text":"<pre><code>from wfrmls import WFRMLSClient\n\n# Initialize client (uses WFRMLS_BEARER_TOKEN environment variable)\nclient = WFRMLSClient()\n\n# Or provide API key directly\nclient = WFRMLSClient(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"getting-started/quickstart/#your-first-api-call","title":"Your First API Call","text":"<pre><code># Get available resources to verify connection\nresources = client.resource.get_resources()\nprint(\"Available resources:\", [r['resourceName'] for r in resources])\n</code></pre>"},{"location":"getting-started/quickstart/#4-common-use-cases","title":"4. Common Use Cases","text":""},{"location":"getting-started/quickstart/#property-search","title":"Property Search","text":"<pre><code># Search for properties in Salt Lake City under $500k\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    max_list_price=500000,\n    property_type=\"Residential\"\n)\n\nprint(f\"Found {len(properties)} properties\")\n\n# Get details for the first property\nif properties:\n    property_id = properties[0]['ListingKey']\n    details = client.properties.get_property(property_id)\n    print(f\"Property address: {details.get('UnparsedAddress')}\")\n</code></pre>"},{"location":"getting-started/quickstart/#agent-search","title":"Agent Search","text":"<pre><code># Search for agents by name\nagents = client.member.search_members(\n    first_name=\"John\",\n    last_name=\"Smith\"\n)\n\nprint(f\"Found {len(agents)} agents named John Smith\")\n\n# Get agent details\nif agents:\n    agent_id = agents[0]['MemberKey']\n    agent_details = client.member.get_member(agent_id)\n    print(f\"Agent: {agent_details.get('MemberFullName')}\")\n</code></pre>"},{"location":"getting-started/quickstart/#office-search","title":"Office Search","text":"<pre><code># Search for offices in a specific city\noffices = client.office.search_offices(\n    office_city=\"Salt Lake City\"\n)\n\nprint(f\"Found {len(offices)} offices in Salt Lake City\")\n</code></pre>"},{"location":"getting-started/quickstart/#media-and-photos","title":"Media and Photos","text":"<pre><code># Get media for a property\nproperty_id = \"123456\"\nmedia = client.media.search_media(\n    resource_name=\"Property\",\n    resource_record_key=property_id\n)\n\nprint(f\"Found {len(media)} media items for property {property_id}\")\n\n# Download first image\nif media:\n    media_url = media[0]['MediaURL']\n    photo_data = client.media.get_media_object(media_url)\n    with open(f\"property_{property_id}_photo.jpg\", \"wb\") as f:\n        f.write(photo_data)\n</code></pre>"},{"location":"getting-started/quickstart/#5-error-handling","title":"5. Error Handling","text":"<pre><code>from wfrmls import WFRMLSClient\nfrom wfrmls.exceptions import WFRMLSError, AuthenticationError\n\nclient = WFRMLSClient()\n\ntry:\n    # Attempt to get property with invalid ID\n    property_details = client.properties.get_property(\"invalid_id\")\nexcept AuthenticationError:\n    print(\"Authentication failed - check your API key\")\nexcept WFRMLSError as e:\n    print(f\"API error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#6-advanced-features","title":"6. Advanced Features","text":""},{"location":"getting-started/quickstart/#pagination","title":"Pagination","text":"<pre><code># Get paginated results\npage_1 = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    page_number=0,\n    page_size=25\n)\n\npage_2 = client.properties.search_properties(\n    city=\"Salt Lake City\", \n    page_number=1,\n    page_size=25\n)\n</code></pre>"},{"location":"getting-started/quickstart/#filtering-and-sorting","title":"Filtering and Sorting","text":"<pre><code>from datetime import date\n\n# Advanced property search with filters\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    min_list_price=200000,\n    max_list_price=800000,\n    bedrooms_total=3,\n    bathrooms_total_integer=2,\n    listing_status=\"Active\",\n    modification_timestamp_from=date(2024, 1, 1)\n)\n</code></pre>"},{"location":"getting-started/quickstart/#analytics-and-market-data","title":"Analytics and Market Data","text":"<pre><code># Get market analytics\nanalytics = client.analytics.get_market_statistics(\n    area=\"Salt Lake County\",\n    property_type=\"Residential\",\n    date_range=\"last_30_days\"\n)\n\nprint(f\"Average price: ${analytics.get('average_price')}\")\nprint(f\"Days on market: {analytics.get('average_dom')}\")\n</code></pre>"},{"location":"getting-started/quickstart/#7-working-with-different-data-types","title":"7. Working with Different Data Types","text":""},{"location":"getting-started/quickstart/#open-houses","title":"Open Houses","text":"<pre><code>from datetime import date\n\n# Find upcoming open houses\nopen_houses = client.openhouse.search_open_houses(\n    open_house_date_from=date.today(),\n    city=\"Salt Lake City\"\n)\n\nprint(f\"Found {len(open_houses)} upcoming open houses\")\n</code></pre>"},{"location":"getting-started/quickstart/#lookup-data","title":"Lookup Data","text":"<pre><code># Get reference data\nproperty_types = client.lookup.get_lookup_values(\"PropertyType\")\nlisting_statuses = client.lookup.get_lookup_values(\"MlsStatus\")\n\nprint(\"Available property types:\", property_types)\nprint(\"Available listing statuses:\", listing_statuses)\n</code></pre>"},{"location":"getting-started/quickstart/#history-data","title":"History Data","text":"<pre><code># Get property history\nproperty_id = \"123456\"\nhistory = client.history.get_property_history(property_id)\n\nprint(f\"Property has {len(history)} historical records\")\n</code></pre>"},{"location":"getting-started/quickstart/#8-best-practices","title":"8. Best Practices","text":""},{"location":"getting-started/quickstart/#environment-configuration","title":"Environment Configuration","text":"<p>Create a <code>.env</code> file for local development:</p> <pre><code># .env file\nWFRMLS_BEARER_TOKEN=your_api_key_here\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling-pattern","title":"Error Handling Pattern","text":"<pre><code>from wfrmls import WFRMLSClient\nfrom wfrmls.exceptions import WFRMLSError\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef safe_api_call(client, operation):\n    try:\n        return operation()\n    except WFRMLSError as e:\n        logger.error(f\"WFRMLS API error: {e}\")\n        return None\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        return None\n\n# Usage\nclient = WFRMLSClient()\nproperties = safe_api_call(\n    client, \n    lambda: client.properties.search_properties(city=\"Salt Lake City\")\n)\n</code></pre>"},{"location":"getting-started/quickstart/#rate-limiting","title":"Rate Limiting","text":"<pre><code>import time\n\ndef batch_process_properties(property_ids):\n    \"\"\"Process properties with rate limiting.\"\"\"\n    client = WFRMLSClient()\n    results = []\n\n    for property_id in property_ids:\n        try:\n            details = client.properties.get_property(property_id)\n            results.append(details)\n\n            # Add small delay to respect rate limits\n            time.sleep(0.1)\n\n        except WFRMLSError as e:\n            print(f\"Error processing {property_id}: {e}\")\n            continue\n\n    return results\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've learned the basics:</p> <ol> <li>Explore the Examples for more detailed use cases</li> <li>Read the API Reference for complete endpoint documentation</li> <li>Check the Troubleshooting Guide if you encounter issues</li> <li>Review the Contributing Guide if you want to contribute</li> </ol>"},{"location":"getting-started/quickstart/#quick-reference","title":"Quick Reference","text":""},{"location":"getting-started/quickstart/#most-common-endpoints","title":"Most Common Endpoints","text":"Endpoint Purpose Example <code>client.properties.search_properties()</code> Search properties Property listings <code>client.properties.get_property(id)</code> Get property details Individual property <code>client.member.search_members()</code> Search agents Agent directory <code>client.office.search_offices()</code> Search offices Office listings <code>client.media.search_media()</code> Get property media Photos, documents <code>client.lookup.get_lookup_values()</code> Reference data Valid values"},{"location":"getting-started/quickstart/#common-parameters","title":"Common Parameters","text":"<ul> <li><code>page_number</code>: Page for pagination (starts at 0)</li> <li><code>page_size</code>: Items per page (default 20, max varies by endpoint)</li> <li><code>modification_timestamp_from</code>: Get records modified since date</li> <li><code>listing_status</code>: Filter by listing status (Active, Sold, etc.)</li> <li><code>city</code>: Filter by city name</li> <li><code>property_type</code>: Filter by property type</li> </ul> <p>That's it! You're now ready to start building with the WFRMLS API wrapper. </p>"},{"location":"guides/","title":"Guides","text":"<p>This section contains comprehensive how-to guides and tutorials to help you accomplish specific tasks with the WFRMLS API. Each guide provides step-by-step instructions, best practices, and real-world examples.</p>"},{"location":"guides/#available-guides","title":"\ud83c\udfaf Available Guides","text":"<ul> <li> <p> Property Search</p> <p>Master property search patterns, filtering, and data retrieval</p> <p> Property Search</p> </li> <li> <p> Member Management</p> <p>Work with agent and broker data, directories, and analytics</p> <p> Member Management</p> </li> <li> <p> Data Synchronization</p> <p>Keep your local data in sync with the MLS system</p> <p> Data Synchronization</p> </li> <li> <p> Error Handling</p> <p>Handle errors gracefully and implement retry strategies</p> <p> Error Handling</p> </li> <li> <p> Best Practices</p> <p>Follow industry best practices for API integration</p> <p> Best Practices</p> </li> <li> <p> Performance Optimization</p> <p>Optimize your API usage for speed and efficiency</p> <p> Performance Optimization</p> </li> <li> <p> Troubleshooting</p> <p>Solve common issues and debug problems</p> <p> Troubleshooting</p> </li> </ul>"},{"location":"guides/#guide-categories","title":"Guide Categories","text":""},{"location":"guides/#beginner-guides","title":"\ud83d\udd30 Beginner Guides","text":"<p>Perfect for developers new to the WFRMLS API:</p> <ul> <li>Error Handling - Essential error handling patterns</li> <li>Best Practices - Core principles and recommendations</li> </ul>"},{"location":"guides/#intermediate-guides","title":"\ud83d\ude80 Intermediate Guides","text":"<p>For developers building production applications:</p> <ul> <li>Property Search - Advanced search and filtering</li> <li>Member Management - Working with agent/broker data</li> <li>Performance Optimization - Speed and efficiency tips</li> </ul>"},{"location":"guides/#advanced-guides","title":"\ud83c\udfaf Advanced Guides","text":"<p>For complex integrations and specialized use cases:</p> <ul> <li>Data Synchronization - Real-time data sync strategies</li> <li>Troubleshooting - Advanced debugging techniques</li> </ul>"},{"location":"guides/#how-to-use-these-guides","title":"How to Use These Guides","text":"<p>Each guide is designed to be:</p> <ul> <li>Task-oriented: Focused on accomplishing specific goals</li> <li>Step-by-step: Clear instructions you can follow</li> <li>Practical: Real-world examples and code samples</li> <li>Comprehensive: Covers edge cases and best practices</li> </ul> <p>Before You Start</p> <p>Make sure you've completed the Getting Started section before diving into these guides. You'll need a working WFRMLS client setup to follow along with the examples.</p>"},{"location":"guides/#need-something-else","title":"Need Something Else?","text":"<ul> <li>\ud83d\udcda Learning: Start with Getting Started for basics</li> <li>\ud83d\udd0d Reference: Check API Reference for detailed method documentation  </li> <li>\ud83d\udca1 Examples: Browse Examples for code recipes</li> <li>\ud83d\udee0\ufe0f Development: See Development for contributing guidelines</li> </ul> <p>Can't find what you're looking for? Open an issue and let us know what guides would be helpful! </p>"},{"location":"guides/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide covers common issues and their solutions when using the WFRMLS Python API wrapper.</p>"},{"location":"guides/troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Authentication Issues</li> <li>API Request Problems</li> <li>Installation Issues</li> <li>Data and Response Issues</li> <li>Performance Issues</li> <li>Development Issues</li> <li>Network and Connectivity</li> <li>Getting Additional Help</li> </ol>"},{"location":"guides/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"guides/troubleshooting/#issue-authentication-failed-invalid-api-key","title":"Issue: \"Authentication failed - invalid API key\"","text":"<p>Symptoms: <pre><code>AuthenticationError: Authentication failed - invalid API key\n</code></pre></p> <p>Solutions: 1. Verify your API key: <pre><code>import os\nprint(f\"API Key: {os.getenv('WFRMLS_BEARER_TOKEN')}\")\n</code></pre></p> <ol> <li> <p>Check environment variable name: <pre><code># Must be exactly this name\nexport WFRMLS_BEARER_TOKEN=\"your_key_here\"\n</code></pre></p> </li> <li> <p>Test with direct parameter: <pre><code>client = WFRMLSClient(api_key=\"your_key_here\")\n</code></pre></p> </li> <li> <p>Verify .env file format: <pre><code># .env file - no quotes, no spaces around =\nWFRMLS_BEARER_TOKEN=your_actual_key_here\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#issue-api-key-is-required-error","title":"Issue: \"API key is required\" Error","text":"<p>Symptoms: <pre><code>AuthenticationError: API key is required. Set WFRMLS_BEARER_TOKEN environment variable or pass api_key parameter.\n</code></pre></p> <p>Solutions: 1. Set environment variable properly: <pre><code># Linux/macOS\nexport WFRMLS_BEARER_TOKEN=\"your_key_here\"\n\n# Windows\nset WFRMLS_BEARER_TOKEN=your_key_here\n</code></pre></p> <ol> <li> <p>Use .env file in project root: <pre><code>WFRMLS_BEARER_TOKEN=your_key_here\n</code></pre></p> </li> <li> <p>Pass API key directly: <pre><code>from wfrmls import WFRMLSClient\nclient = WFRMLSClient(api_key=\"your_key_here\")\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#api-request-problems","title":"API Request Problems","text":""},{"location":"guides/troubleshooting/#issue-404-not-found-errors","title":"Issue: \"404 Not Found\" Errors","text":"<p>Symptoms: <pre><code>WFRMLSError: 404 Client Error: Not Found\n</code></pre></p> <p>Solutions: 1. Verify endpoint exists: <pre><code># Check available resources\nresources = client.resource.get_resources()\nprint([r['resourceName'] for r in resources])\n</code></pre></p> <ol> <li> <p>Check record ID format: <pre><code># Property IDs should be strings\nproperty_details = client.properties.get_property(\"123456\")  # Not integer\n</code></pre></p> </li> <li> <p>Verify resource permissions:</p> </li> <li>Contact WFRMLS support to verify your API access level</li> <li>Some endpoints may require specific permissions</li> </ol>"},{"location":"guides/troubleshooting/#issue-400-bad-request-errors","title":"Issue: \"400 Bad Request\" Errors","text":"<p>Symptoms: <pre><code>WFRMLSError: 400 Client Error: Bad Request\n</code></pre></p> <p>Solutions: 1. Check parameter format: <pre><code>from datetime import date\n\n# Correct date format\nproperties = client.properties.search_properties(\n    modification_timestamp_from=date(2024, 1, 1)  # Use date object\n)\n</code></pre></p> <ol> <li> <p>Validate required parameters: <pre><code># Some endpoints require specific parameters\nmedia = client.media.search_media(\n    resource_name=\"Property\",  # Required\n    resource_record_key=\"123456\"  # Required\n)\n</code></pre></p> </li> <li> <p>Check parameter values: <pre><code># Use valid enum values or strings\nproperties = client.properties.search_properties(\n    listing_status=\"Active\"  # Must be valid status\n)\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#issue-429-too-many-requests-errors","title":"Issue: \"429 Too Many Requests\" Errors","text":"<p>Symptoms: <pre><code>WFRMLSError: 429 Client Error: Too Many Requests\n</code></pre></p> <p>Solutions: 1. Implement rate limiting: <pre><code>import time\n\ndef rate_limited_requests(requests_list):\n    results = []\n    for request in requests_list:\n        try:\n            result = request()\n            results.append(result)\n            time.sleep(0.1)  # 100ms delay\n        except Exception as e:\n            print(f\"Error: {e}\")\n            time.sleep(1)  # Longer delay on error\n    return results\n</code></pre></p> <ol> <li>Use batch operations when available: <pre><code># Instead of multiple individual requests\nproperty_ids = [\"123\", \"456\", \"789\"]\n\n# Use pagination to get multiple results\nproperties = client.properties.search_properties(\n    page_size=100  # Get more results per request\n)\n</code></pre></li> </ol>"},{"location":"guides/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"guides/troubleshooting/#issue-package-not-found","title":"Issue: Package Not Found","text":"<p>Symptoms: <pre><code>ERROR: Could not find a version that satisfies the requirement wfrmls\n</code></pre></p> <p>Solutions: 1. Upgrade pip: <pre><code>pip install --upgrade pip\n</code></pre></p> <ol> <li> <p>Check Python version: <pre><code>python --version  # Must be 3.8+\n</code></pre></p> </li> <li> <p>Use specific index if needed: <pre><code>pip install --index-url https://pypi.org/simple/ wfrmls\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#issue-permission-denied-during-installation","title":"Issue: Permission Denied During Installation","text":"<p>Symptoms: <pre><code>PermissionError: [Errno 13] Permission denied\n</code></pre></p> <p>Solutions: 1. Use virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# or\nvenv\\Scripts\\activate  # Windows\npip install wfrmls\n</code></pre></p> <ol> <li>Install for user only: <pre><code>pip install --user wfrmls\n</code></pre></li> </ol>"},{"location":"guides/troubleshooting/#issue-import-errors","title":"Issue: Import Errors","text":"<p>Symptoms: <pre><code>ModuleNotFoundError: No module named 'wfrmls'\n</code></pre></p> <p>Solutions: 1. Verify installation: <pre><code>pip list | grep wfrmls\n</code></pre></p> <ol> <li> <p>Check Python environment: <pre><code>import sys\nprint(sys.path)\n</code></pre></p> </li> <li> <p>Reinstall package: <pre><code>pip uninstall wfrmls\npip install wfrmls\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#data-and-response-issues","title":"Data and Response Issues","text":""},{"location":"guides/troubleshooting/#issue-empty-results","title":"Issue: Empty Results","text":"<p>Symptoms: <pre><code>properties = client.properties.search_properties(city=\"Salt Lake City\")\nprint(len(properties))  # Returns 0\n</code></pre></p> <p>Solutions: 1. Check filter parameters: <pre><code># Remove filters to see if data exists\nall_properties = client.properties.search_properties()\nprint(f\"Total properties: {len(all_properties)}\")\n</code></pre></p> <ol> <li> <p>Verify search criteria: <pre><code># Use broader search criteria\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    listing_status=\"Active\"  # Try different statuses\n)\n</code></pre></p> </li> <li> <p>Check pagination: <pre><code># Increase page size\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    page_size=100  # Default might be too small\n)\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#issue-unexpected-data-structure","title":"Issue: Unexpected Data Structure","text":"<p>Symptoms: <pre><code>property_data = client.properties.get_property(\"123456\")\nprint(property_data['Address'])  # KeyError: 'Address'\n</code></pre></p> <p>Solutions: 1. Inspect response structure: <pre><code>import json\nproperty_data = client.properties.get_property(\"123456\")\nprint(json.dumps(property_data, indent=2)[:500])  # First 500 chars\n</code></pre></p> <ol> <li> <p>Use safe dictionary access: <pre><code>address = property_data.get('UnparsedAddress', 'Address not available')\n</code></pre></p> </li> <li> <p>Check API documentation:</p> </li> <li>Review field names in <code>api_docs/</code> directory</li> <li>Field names may differ from expectations</li> </ol>"},{"location":"guides/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"guides/troubleshooting/#issue-slow-api-responses","title":"Issue: Slow API Responses","text":"<p>Solutions: 1. Use pagination effectively: <pre><code># Request smaller pages\nproperties = client.properties.search_properties(\n    page_size=25,  # Smaller page size\n    page_number=0\n)\n</code></pre></p> <ol> <li> <p>Filter requests: <pre><code># Be specific with filters to reduce response size\nproperties = client.properties.search_properties(\n    city=\"Salt Lake City\",\n    property_type=\"Residential\",\n    listing_status=\"Active\"\n)\n</code></pre></p> </li> <li> <p>Cache results when appropriate: <pre><code>import time\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100)\ndef cached_lookup_values(lookup_type):\n    return client.lookup.get_lookup_values(lookup_type)\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#issue-memory-usage","title":"Issue: Memory Usage","text":"<p>Solutions: 1. Process data in chunks: <pre><code>def process_properties_in_chunks(search_params, chunk_size=50):\n    page_number = 0\n    while True:\n        properties = client.properties.search_properties(\n            **search_params,\n            page_number=page_number,\n            page_size=chunk_size\n        )\n\n        if not properties:\n            break\n\n        # Process chunk\n        yield properties\n        page_number += 1\n</code></pre></p> <ol> <li>Clear large variables: <pre><code>large_dataset = client.properties.search_properties(page_size=1000)\n# Process data\ndel large_dataset  # Free memory\n</code></pre></li> </ol>"},{"location":"guides/troubleshooting/#development-issues","title":"Development Issues","text":""},{"location":"guides/troubleshooting/#issue-type-checking-errors","title":"Issue: Type Checking Errors","text":"<p>Symptoms: <pre><code>mypy error: Argument has incompatible type\n</code></pre></p> <p>Solutions: 1. Import type hints: <pre><code>from typing import Optional, Dict, Any, List\nfrom datetime import date\n\ndef search_properties(\n    client,\n    city: Optional[str] = None,\n    min_price: Optional[int] = None\n) -&gt; List[Dict[str, Any]]:\n    return client.properties.search_properties(\n        city=city,\n        min_list_price=min_price\n    )\n</code></pre></p> <ol> <li>Handle union types: <pre><code>from wfrmls.lookup import PropertyType  # If enum exists\n\n# Use enum or string\nproperty_type: Union[PropertyType, str] = \"Residential\"\n</code></pre></li> </ol>"},{"location":"guides/troubleshooting/#issue-test-failures","title":"Issue: Test Failures","text":"<p>Solutions: 1. Mock API responses: <pre><code>import responses\nimport json\n\n@responses.activate\ndef test_property_search():\n    responses.add(\n        responses.GET,\n        \"https://api.wfrmls.com/properties\",\n        json=[{\"ListingKey\": \"123\", \"City\": \"Salt Lake City\"}],\n        status=200\n    )\n\n    client = WFRMLSClient(api_key=\"test_key\")\n    properties = client.properties.search_properties(city=\"Salt Lake City\")\n    assert len(properties) == 1\n</code></pre></p> <ol> <li>Use environment variables for tests: <pre><code>import os\nimport pytest\n\n@pytest.fixture\ndef test_client():\n    return WFRMLSClient(api_key=os.getenv(\"TEST_API_KEY\", \"test_key\"))\n</code></pre></li> </ol>"},{"location":"guides/troubleshooting/#network-and-connectivity","title":"Network and Connectivity","text":""},{"location":"guides/troubleshooting/#issue-ssl-certificate-errors","title":"Issue: SSL Certificate Errors","text":"<p>Symptoms: <pre><code>requests.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED]\n</code></pre></p> <p>Solutions: 1. Update certificates: <pre><code>pip install --upgrade certifi\n</code></pre></p> <ol> <li>Check system time:</li> <li>Ensure system clock is accurate</li> <li>SSL certificates are time-sensitive</li> </ol>"},{"location":"guides/troubleshooting/#issue-timeout-errors","title":"Issue: Timeout Errors","text":"<p>Symptoms: <pre><code>requests.exceptions.ReadTimeout: HTTPSConnectionPool\n</code></pre></p> <p>Solutions: 1. Increase timeout (for development only): <pre><code># Note: This requires custom timeout handling in client\n# Contact support if timeouts are frequent\n</code></pre></p> <ol> <li> <p>Check network connectivity: <pre><code>ping api.wfrmls.com\n</code></pre></p> </li> <li> <p>Retry logic: <pre><code>import time\n\ndef retry_request(func, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except requests.exceptions.Timeout:\n            if attempt == max_retries - 1:\n                raise\n            time.sleep(2 ** attempt)  # Exponential backoff\n</code></pre></p> </li> </ol>"},{"location":"guides/troubleshooting/#getting-additional-help","title":"Getting Additional Help","text":""},{"location":"guides/troubleshooting/#before-seeking-help","title":"Before Seeking Help","text":"<ol> <li>Check this troubleshooting guide</li> <li>Review the API Reference</li> <li>Search GitHub Issues</li> <li>Enable debug logging: <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></li> </ol>"},{"location":"guides/troubleshooting/#creating-a-bug-report","title":"Creating a Bug Report","text":"<p>Include the following information:</p> <ol> <li> <p>Environment details: <pre><code>import sys\nimport wfrmls\nprint(f\"Python: {sys.version}\")\nprint(f\"WFRMLS: {wfrmls.__version__}\")\nprint(f\"Platform: {sys.platform}\")\n</code></pre></p> </li> <li> <p>Minimal reproduction case: <pre><code>from wfrmls import WFRMLSClient\n\nclient = WFRMLSClient(api_key=\"test_key\")\n# Minimal code that reproduces the issue\n</code></pre></p> </li> <li> <p>Complete error message:</p> </li> <li>Include full traceback</li> <li> <p>Remove sensitive information (API keys, etc.)</p> </li> <li> <p>Expected vs actual behavior</p> </li> </ol>"},{"location":"guides/troubleshooting/#contact-options","title":"Contact Options","text":"<ul> <li>GitHub Issues: For bugs and feature requests</li> <li>Documentation: Check all documentation files first</li> <li>WFRMLS Support: For API access and permission issues</li> <li>Community: Stack Overflow with <code>wfrmls</code> tag</li> </ul>"},{"location":"guides/troubleshooting/#emergency-workarounds","title":"Emergency Workarounds","text":"<p>If you need immediate functionality while waiting for a fix:</p> <ol> <li> <p>Use direct requests: <pre><code>import requests\n\nheaders = {\"Authorization\": \"Bearer your_token\"}\nresponse = requests.get(\"https://api.wfrmls.com/endpoint\", headers=headers)\n</code></pre></p> </li> <li> <p>Downgrade to previous version: <pre><code>pip install wfrmls==1.0.0  # Use last working version\n</code></pre></p> </li> <li> <p>Use alternative endpoints:</p> </li> <li>Check if similar data is available from other endpoints</li> <li>Some endpoints may have different parameter requirements </li> </ol>"},{"location":"legal/","title":"Legal","text":"<p>Legal information, licensing, and terms for the WFRMLS Python API wrapper.</p>"},{"location":"legal/#legal-documents","title":"\ud83d\udccb Legal Documents","text":"<ul> <li> <p> License</p> <p>MIT License terms and conditions for using this software</p> <p> License</p> </li> <li> <p> Terms of Service</p> <p>Terms of service for using the WFRMLS API</p> <p> Terms of Service</p> </li> </ul>"},{"location":"legal/#license-summary","title":"License Summary","text":"<p>This project is licensed under the MIT License, which means:</p> <p>\u2705 You can: - Use the software for any purpose - Modify the software - Distribute the software - Use the software commercially - Include the software in proprietary projects</p> <p>\u2757 You must: - Include the original license and copyright notice - Provide attribution to the original authors</p> <p>\u274c You cannot: - Hold the authors liable for any damages - Use the authors' names for endorsement without permission</p>"},{"location":"legal/#wfrmls-api-terms","title":"WFRMLS API Terms","text":"<p>API Usage Agreement</p> <p>Use of the WFRMLS API is subject to the WFRMLS Terms of Service and Data License Agreement. By using this Python wrapper, you agree to comply with all WFRMLS terms and conditions.</p>"},{"location":"legal/#key-requirements","title":"Key Requirements","text":"<ul> <li>Valid Credentials: You must have valid WFRMLS API credentials</li> <li>Data Usage: Follow WFRMLS data usage policies</li> <li>Rate Limits: Respect API rate limits and usage guidelines</li> <li>Attribution: Provide proper attribution when required</li> <li>Compliance: Comply with MLS rules and regulations</li> </ul>"},{"location":"legal/#attribution","title":"Attribution","text":"<p>This software includes:</p> <ul> <li>WFRMLS API: Wasatch Front Regional Multiple Listing Service</li> <li>Third-party Libraries: See <code>requirements.txt</code> for dependencies</li> <li>Community Contributions: Various community contributors</li> </ul>"},{"location":"legal/#disclaimer","title":"Disclaimer","text":"<p>No Warranty</p> <p>This software is provided \"as is\" without warranty of any kind. The authors are not responsible for any damages or losses resulting from the use of this software.</p> <p>Not Official</p> <p>This is an unofficial Python wrapper for the WFRMLS API. It is not endorsed or officially supported by the Wasatch Front Regional Multiple Listing Service.</p>"},{"location":"legal/#data-protection","title":"Data Protection","text":""},{"location":"legal/#privacy-considerations","title":"Privacy Considerations","text":"<ul> <li>MLS Data: All MLS data accessed through this API belongs to WFRMLS</li> <li>Personal Information: Handle agent and client data according to privacy laws</li> <li>Compliance: Follow GDPR, CCPA, and other applicable privacy regulations</li> </ul>"},{"location":"legal/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Store API credentials securely</li> <li>Use HTTPS for all API communications</li> <li>Implement proper access controls</li> <li>Log and monitor API usage appropriately</li> </ul>"},{"location":"legal/#contact","title":"Contact","text":"<p>For legal questions or concerns:</p> <ul> <li>Software Issues: GitHub Issues</li> <li>WFRMLS API Terms: Contact WFRMLS directly</li> <li>License Questions: Email the project maintainers</li> </ul> <p>Last updated: [Current Date] | For the most current legal information, always refer to the official license file and WFRMLS terms. </p>"},{"location":"legal/license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2025 The Perry Group</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p>"},{"location":"reference/","title":"Reference","text":"<p>Quick reference materials and technical documentation for the WFRMLS API. Use this section to quickly look up information while developing.</p>"},{"location":"reference/#reference-materials","title":"\ud83d\udcda Reference Materials","text":"<ul> <li> <p> Error Codes</p> <p>Complete list of error codes, meanings, and solutions</p> <p> Error Codes</p> </li> <li> <p> Rate Limits</p> <p>API rate limiting details and best practices</p> <p> Rate Limits</p> </li> <li> <p> Field Reference</p> <p>Complete field definitions and data types</p> <p> Field Reference</p> </li> <li> <p> OData Queries</p> <p>OData v4 query syntax and examples</p> <p> OData Queries</p> </li> <li> <p> Changelog</p> <p>Version history and release notes</p> <p> Changelog</p> </li> </ul>"},{"location":"reference/#quick-reference-tables","title":"Quick Reference Tables","text":""},{"location":"reference/#authentication","title":"Authentication","text":"<pre><code># Environment variable (recommended)\nos.environ['WFRMLS_BEARER_TOKEN'] = \"your_token\"\nclient = WFRMLSClient()\n\n# Direct token\nclient = WFRMLSClient(bearer_token=\"your_token\")\n</code></pre>"},{"location":"reference/#common-status-codes","title":"Common Status Codes","text":"Code Status Description 200 OK Request successful 400 Bad Request Invalid parameters 401 Unauthorized Invalid credentials 404 Not Found Resource not found 429 Rate Limited Too many requests 500 Server Error Internal server error"},{"location":"reference/#rate-limits","title":"Rate Limits","text":"Limit Type Value Description Hourly 1000 requests Standard rate limit Burst 100 requests/minute Short-term burst Concurrent 10 connections Max simultaneous"},{"location":"reference/#common-odata-operators","title":"Common OData Operators","text":"Operator Usage Example <code>eq</code> Equals <code>City eq 'Salt Lake City'</code> <code>ne</code> Not equals <code>ListPrice ne null</code> <code>gt</code> Greater than <code>ListPrice gt 500000</code> <code>ge</code> Greater or equal <code>BedroomsTotal ge 3</code> <code>lt</code> Less than <code>LivingArea lt 3000</code> <code>le</code> Less or equal <code>ListPrice le 1000000</code> <code>and</code> Logical AND <code>City eq 'Provo' and ListPrice gt 300000</code> <code>or</code> Logical OR <code>City eq 'Provo' or City eq 'Orem'</code> <code>contains</code> Contains text <code>contains(tolower(City), 'salt')</code>"},{"location":"reference/#standard-query-parameters","title":"Standard Query Parameters","text":"Parameter Type Description Example <code>$top</code> int Limit results <code>$top=50</code> <code>$skip</code> int Skip results <code>$skip=100</code> <code>$filter</code> string Filter criteria <code>$filter=City eq 'Provo'</code> <code>$orderby</code> string Sort order <code>$orderby=ListPrice desc</code> <code>$select</code> string Choose fields <code>$select=ListingId,ListPrice</code> <code>$count</code> bool Include count <code>$count=true</code>"},{"location":"reference/#property-field-quick-reference","title":"Property Field Quick Reference","text":""},{"location":"reference/#core-property-fields","title":"Core Property Fields","text":"Field Type Description <code>ListingId</code> string Unique listing identifier <code>ListPrice</code> decimal Current listing price <code>StandardStatus</code> string Active, Pending, Sold, etc. <code>City</code> string Property city <code>BedroomsTotal</code> int Number of bedrooms <code>BathroomsTotalInteger</code> int Number of bathrooms <code>LivingArea</code> decimal Square footage <code>PropertyType</code> string Residential, Commercial, etc. <code>PropertySubType</code> string Single Family, Condo, etc."},{"location":"reference/#location-fields","title":"Location Fields","text":"Field Type Description <code>UnparsedAddress</code> string Full address <code>Latitude</code> decimal Geographic latitude <code>Longitude</code> decimal Geographic longitude <code>PostalCode</code> string ZIP/postal code <code>CountyOrParish</code> string County name"},{"location":"reference/#date-fields","title":"Date Fields","text":"Field Type Description <code>ListingContractDate</code> datetime Date listed <code>ModificationTimestamp</code> datetime Last modified <code>CloseDate</code> datetime Closing date <code>OriginalEntryTimestamp</code> datetime First entry"},{"location":"reference/#member-field-quick-reference","title":"Member Field Quick Reference","text":""},{"location":"reference/#core-member-fields","title":"Core Member Fields","text":"Field Type Description <code>MemberKey</code> string Unique member identifier <code>MemberFirstName</code> string Agent first name <code>MemberLastName</code> string Agent last name <code>MemberEmail</code> string Contact email <code>MemberDirectPhone</code> string Direct phone <code>MemberType</code> string Agent, Broker, etc. <code>MemberStatus</code> string Active, Inactive, etc. <code>MemberOfficeKey</code> string Associated office"},{"location":"reference/#office-field-quick-reference","title":"Office Field Quick Reference","text":""},{"location":"reference/#core-office-fields","title":"Core Office Fields","text":"Field Type Description <code>OfficeKey</code> string Unique office identifier <code>OfficeName</code> string Office/brokerage name <code>OfficePhone</code> string Main phone number <code>OfficeEmail</code> string Contact email <code>OfficeCity</code> string Office city <code>OfficeStatus</code> string Active, Inactive, etc."},{"location":"reference/#need-more-detail","title":"Need More Detail?","text":"<ul> <li>\ud83d\udcd6 Complete Documentation: See the API Reference for detailed method documentation</li> <li>\ud83c\udfaf How-To Guides: Check Guides for step-by-step instructions</li> <li>\ud83d\udca1 Examples: Browse Examples for practical code samples</li> <li>\ud83d\udee0\ufe0f Issues: Report problems on GitHub Issues</li> </ul> <p>This reference is generated from the latest API version. For historical information, see the Changelog. </p>"},{"location":"reference/changelog/","title":"Changelog","text":"<p>All notable changes to the WFRMLS Python API wrapper will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"reference/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"reference/changelog/#changed","title":"Changed","text":"<ul> <li>Repository URL updates and documentation improvements</li> </ul>"},{"location":"reference/changelog/#removed","title":"Removed","text":"<ul> <li>TEMPORARY: Disabled Media, History, and Green Verification endpoints due to server-side issues</li> <li>Media endpoints: 504 Gateway Timeout errors</li> <li>History endpoints: Missing entity type <code>HistoryTransactional</code> </li> <li>Green Verification endpoints: Missing entity type <code>PropertyGreenVerification</code></li> <li>These endpoints will be restored once server issues are resolved</li> </ul>"},{"location":"reference/changelog/#fixed","title":"Fixed","text":"<ul> <li>All unit tests now pass after removing problematic server-side endpoints</li> <li>Updated documentation to reflect current endpoint availability</li> </ul>"},{"location":"reference/changelog/#121-2024-12-21","title":"[1.2.1] - 2024-12-21","text":""},{"location":"reference/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>GitHub Pages deployment workflow issues</li> <li>Documentation build warnings and navigation errors</li> <li>Missing requirements-docs.txt file for documentation dependencies</li> </ul>"},{"location":"reference/changelog/#changed_1","title":"Changed","text":"<ul> <li>Simplified documentation deployment workflow to focus on documentation building</li> <li>Removed test execution from docs workflow to prevent deployment failures</li> <li>Improved documentation file organization and structure</li> </ul>"},{"location":"reference/changelog/#added","title":"Added","text":"<ul> <li>Complete documentation requirements file (requirements-docs.txt)</li> <li>STYLE_GUIDE.md to docs directory for proper navigation</li> </ul>"},{"location":"reference/changelog/#120-2024-12-20","title":"[1.2.0] - 2024-12-20","text":""},{"location":"reference/changelog/#added_1","title":"Added","text":"<ul> <li>Enhanced GitHub Actions CI/CD workflows with multi-version testing</li> <li>Automated release management and documentation deployment</li> <li>Comprehensive test coverage reporting</li> </ul>"},{"location":"reference/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>CI workflow robustness improvements</li> <li>Test discovery and execution reliability</li> </ul>"},{"location":"reference/changelog/#110-2024-12-19","title":"[1.1.0] - 2024-12-19","text":""},{"location":"reference/changelog/#added_2","title":"Added","text":"<ul> <li>Comprehensive documentation structure following industry best practices</li> <li>Auto-documentation maintenance rules with WFRMLS_DOCUMENTATION_RULES.md</li> <li>Version consistency validation across all files</li> <li>Professional MkDocs documentation site with Material theme</li> <li>Complete API reference structure (ready for code implementation)</li> <li>Detailed installation, quickstart, and troubleshooting guides</li> <li>Contributing guidelines with development workflow</li> <li>Deployment guide for production usage</li> </ul>"},{"location":"reference/changelog/#changed_2","title":"Changed","text":"<ul> <li>Enhanced documentation with more detailed examples and troubleshooting</li> <li>Updated repository references to correct GitHub organization (theperrygroup/wfrmls)</li> <li>Improved MkDocs configuration with proper theming and navigation</li> <li>Documentation URLs updated to use GitHub Pages</li> </ul>"},{"location":"reference/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Repository URL corrections throughout all documentation files</li> <li>MkDocs build issues with FontAwesome icons (switched to Material Design icons)</li> <li>Documentation link consistency across all files</li> </ul>"},{"location":"reference/changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":""},{"location":"reference/changelog/#added_3","title":"Added","text":"<ul> <li>Complete WFRMLS API wrapper implementation</li> <li>Support for all major endpoints:</li> <li>Properties (search, get, analytics)</li> <li>Members (agents and member data)  </li> <li>Offices (brokerage information)</li> <li>Media (property photos and documents)</li> <li>Analytics (market statistics and reporting)</li> <li>Lookup (reference data and valid values)</li> <li>History (property and listing history)</li> <li>Open Houses (event information)</li> <li>ADU (Accessory Dwelling Unit data)</li> <li>Green Verification (building certifications)</li> <li>Resource (API metadata)</li> <li>Data System (system information)</li> <li>Property Unit Types (classification data)</li> <li>Comprehensive type hints throughout codebase</li> <li>Google-style docstrings for all public methods</li> <li>Custom exception hierarchy with meaningful error messages</li> <li>100% test coverage with pytest</li> <li>Environment variable support for API key management</li> <li>Rate limiting and error handling best practices</li> <li>Support for Python 3.8+</li> </ul>"},{"location":"reference/changelog/#infrastructure","title":"Infrastructure","text":"<ul> <li>Black code formatting with 88-character line length</li> <li>isort import organization</li> <li>mypy strict type checking</li> <li>flake8 linting</li> <li>pytest with coverage reporting</li> <li>GitHub Actions CI/CD pipeline</li> <li>Comprehensive development dependencies</li> </ul>"},{"location":"reference/changelog/#documentation","title":"Documentation","text":"<ul> <li>Complete API reference documentation</li> <li>Installation and setup guides</li> <li>Usage examples for all endpoints</li> <li>Error handling patterns</li> <li>Best practices documentation</li> <li>Contributing guidelines</li> </ul>"},{"location":"reference/changelog/#security","title":"Security","text":"<ul> <li>Secure API key handling with environment variables</li> <li>Input validation and sanitization</li> <li>HTTPS-only API communication</li> </ul>"},{"location":"reference/changelog/#version-history","title":"Version History","text":""},{"location":"reference/changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"reference/changelog/#v100","title":"v1.0.0","text":"<ul> <li>Initial stable release</li> <li>Established public API interface</li> <li>All future changes will follow semantic versioning</li> </ul>"},{"location":"reference/changelog/#migration-guides","title":"Migration Guides","text":""},{"location":"reference/changelog/#from-pre-10-versions","title":"From Pre-1.0 Versions","text":"<p>This is the first stable release. If you were using development versions:</p> <ol> <li>Update your installation: <code>pip install --upgrade wfrmls</code></li> <li>Review the API Reference for any method signature changes</li> <li>Update import statements if needed:    <pre><code># New stable imports\nfrom wfrmls import WFRMLSClient\nfrom wfrmls.exceptions import WFRMLSError, AuthenticationError\n</code></pre></li> </ol>"},{"location":"reference/changelog/#deprecation-notices","title":"Deprecation Notices","text":"<p>No current deprecations. Future deprecations will be announced here with migration timelines.</p>"},{"location":"reference/changelog/#known-issues","title":"Known Issues","text":"<ul> <li>None currently identified</li> </ul>"},{"location":"reference/changelog/#planned-features","title":"Planned Features","text":""},{"location":"reference/changelog/#v110-next-minor-release","title":"v1.1.0 (Next Minor Release)","text":"<ul> <li>Async/await support for improved performance</li> <li>Bulk operation helpers</li> <li>Caching mechanisms for frequently accessed data</li> <li>Enhanced filtering capabilities</li> </ul>"},{"location":"reference/changelog/#v120-future-release","title":"v1.2.0 (Future Release)","text":"<ul> <li>Webhook support for real-time updates</li> <li>Advanced analytics and reporting features</li> <li>Integration with common real estate platforms</li> </ul>"},{"location":"reference/changelog/#support-matrix","title":"Support Matrix","text":"Version Python Support Status Security Fixes Bug Fixes 1.0.x 3.8+ Active \u2705 Yes \u2705 Yes"},{"location":"reference/changelog/#release-process","title":"Release Process","text":"<ol> <li>Pre-release Testing</li> <li>All tests must pass</li> <li>Code coverage must remain at 100%</li> <li>Documentation must be updated</li> <li> <p>Version numbers must be consistent</p> </li> <li> <p>Version Bumping</p> </li> <li>Update <code>pyproject.toml</code> version</li> <li>Update <code>wfrmls/__init__.py</code> <code>__version__</code></li> <li> <p>Update this changelog</p> </li> <li> <p>Release Validation</p> </li> <li>Tag release in Git</li> <li>Build and test package</li> <li>Publish to PyPI</li> <li>Update documentation sites</li> </ol>"},{"location":"reference/changelog/#contributing-to-changelog","title":"Contributing to Changelog","text":"<p>When making changes:</p> <ol> <li>Add entries to [Unreleased] section</li> <li>Use categories: Added, Changed, Deprecated, Removed, Fixed, Security</li> <li>Be specific: Include method names, parameter changes, etc.</li> <li>Include migration notes for breaking changes</li> <li>Reference issues/PRs where applicable</li> </ol> <p>Example entry format: <pre><code>### Added\n- `PropertiesClient.search_properties()` now supports `sort_order` parameter (#123)\n- New `ValidationError` exception for parameter validation failures\n- Support for batch property updates via `PropertiesClient.update_properties_batch()`\n\n### Changed\n- **BREAKING**: `MemberClient.search_members()` parameter `name` renamed to `full_name` (#456)\n- Improved error messages for authentication failures\n- Updated minimum Python version to 3.9 (security reasons)\n\n### Fixed\n- Fixed pagination bug in `OfficeClient.search_offices()` when `page_size &gt; 100` (#789)\n- Corrected type hints for optional parameters in analytics methods\n</code></pre></p>"},{"location":"reference/changelog/#release-notes-template","title":"Release Notes Template","text":"<p>For maintainers creating release notes:</p> <pre><code>## [X.Y.Z] - YYYY-MM-DD\n\nBrief description of the release focus.\n\n### \ud83d\ude80 New Features\n- Major new functionality\n\n### \ud83d\udd27 Improvements  \n- Enhancements and optimizations\n\n### \ud83d\udc1b Bug Fixes\n- Important fixes\n\n### \u26a0\ufe0f Breaking Changes\n- Changes requiring user action\n\n### \ud83d\udd12 Security\n- Security-related updates\n\n### \ud83d\udcda Documentation\n- Documentation improvements\n\n**Full Changelog**: https://github.com/theperrygroup/wfrmls/compare/vX.Y.Z-1...vX.Y.Z\n</code></pre>"}]}